
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104c8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08010688  08010688  00020688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011194  08011194  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011194  08011194  00021194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801119c  0801119c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801119c  0801119c  0002119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111a0  080111a0  000211a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080111a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fe0  200001e0  08011384  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200061c0  08011384  000361c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b91  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000499f  00000000  00000000  00054da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e28  00000000  00000000  00059740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  0005b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed8b  00000000  00000000  0005d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023222  00000000  00000000  0008bf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bfec  00000000  00000000  000af165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cb151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095d4  00000000  00000000  001cb1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08010670 	.word	0x08010670

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08010670 	.word	0x08010670

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fa0 <FusionRadiansToDegrees+0x24>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	42652ee0 	.word	0x42652ee0

08000fa4 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d802      	bhi.n	8000fc6 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000fc0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000ff4 <FusionAsin+0x50>
 8000fc4:	e011      	b.n	8000fea <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	db02      	blt.n	8000fde <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000fd8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000ff8 <FusionAsin+0x54>
 8000fdc:	e005      	b.n	8000fea <FusionAsin+0x46>
    }
    return asinf(value);
 8000fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fe2:	f00e f849 	bl	800f078 <asinf>
 8000fe6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	bfc90fdb 	.word	0xbfc90fdb
 8000ff8:	3fc90fdb 	.word	0x3fc90fdb

08000ffc <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b091      	sub	sp, #68	; 0x44
 8001000:	af00      	add	r7, sp, #0
 8001002:	eeb0 5a40 	vmov.f32	s10, s0
 8001006:	eef0 5a60 	vmov.f32	s11, s1
 800100a:	eeb0 6a41 	vmov.f32	s12, s2
 800100e:	eef0 6a61 	vmov.f32	s13, s3
 8001012:	eeb0 7a42 	vmov.f32	s14, s4
 8001016:	eef0 7a62 	vmov.f32	s15, s5
 800101a:	ed87 5a07 	vstr	s10, [r7, #28]
 800101e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001022:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001026:	edc7 6a04 	vstr	s13, [r7, #16]
 800102a:	ed87 7a05 	vstr	s14, [r7, #20]
 800102e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001032:	ed97 7a07 	vldr	s14, [r7, #28]
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001042:	ed97 7a08 	vldr	s14, [r7, #32]
 8001046:	edd7 7a05 	vldr	s15, [r7, #20]
 800104a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001052:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001056:	edd7 7a06 	vldr	s15, [r7, #24]
 800105a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8001062:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001066:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800106a:	ca07      	ldmia	r2, {r0, r1, r2}
 800106c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001076:	ee06 1a90 	vmov	s13, r1
 800107a:	ee07 2a10 	vmov	s14, r2
 800107e:	ee07 3a90 	vmov	s15, r3
}
 8001082:	eeb0 0a66 	vmov.f32	s0, s13
 8001086:	eef0 0a47 	vmov.f32	s1, s14
 800108a:	eeb0 1a67 	vmov.f32	s2, s15
 800108e:	3744      	adds	r7, #68	; 0x44
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001098:	b480      	push	{r7}
 800109a:	b091      	sub	sp, #68	; 0x44
 800109c:	af00      	add	r7, sp, #0
 800109e:	eeb0 5a40 	vmov.f32	s10, s0
 80010a2:	eef0 5a60 	vmov.f32	s11, s1
 80010a6:	eeb0 6a41 	vmov.f32	s12, s2
 80010aa:	eef0 6a61 	vmov.f32	s13, s3
 80010ae:	eeb0 7a42 	vmov.f32	s14, s4
 80010b2:	eef0 7a62 	vmov.f32	s15, s5
 80010b6:	ed87 5a07 	vstr	s10, [r7, #28]
 80010ba:	edc7 5a08 	vstr	s11, [r7, #32]
 80010be:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80010c2:	edc7 6a04 	vstr	s13, [r7, #16]
 80010c6:	ed87 7a05 	vstr	s14, [r7, #20]
 80010ca:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 80010ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 80010de:	ed97 7a08 	vldr	s14, [r7, #32]
 80010e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010e6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 80010ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001106:	ca07      	ldmia	r2, {r0, r1, r2}
 8001108:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800110c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800110e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001112:	ee06 1a90 	vmov	s13, r1
 8001116:	ee07 2a10 	vmov	s14, r2
 800111a:	ee07 3a90 	vmov	s15, r3
}
 800111e:	eeb0 0a66 	vmov.f32	s0, s13
 8001122:	eef0 0a47 	vmov.f32	s1, s14
 8001126:	eeb0 1a67 	vmov.f32	s2, s15
 800112a:	3744      	adds	r7, #68	; 0x44
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001134:	b084      	sub	sp, #16
 8001136:	b480      	push	{r7}
 8001138:	b08f      	sub	sp, #60	; 0x3c
 800113a:	af00      	add	r7, sp, #0
 800113c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001140:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001144:	eef0 6a40 	vmov.f32	s13, s0
 8001148:	eeb0 7a60 	vmov.f32	s14, s1
 800114c:	eef0 7a41 	vmov.f32	s15, s2
 8001150:	edc7 6a05 	vstr	s13, [r7, #20]
 8001154:	ed87 7a06 	vstr	s14, [r7, #24]
 8001158:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800115c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001160:	edd7 7a05 	vldr	s15, [r7, #20]
 8001164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001168:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800116c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001178:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800117c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001188:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 800118c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	f107 0220 	add.w	r2, r7, #32
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001200:	ee06 1a90 	vmov	s13, r1
 8001204:	ee07 2a10 	vmov	s14, r2
 8001208:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800120c:	eeb0 0a66 	vmov.f32	s0, s13
 8001210:	eef0 0a47 	vmov.f32	s1, s14
 8001214:	eeb0 1a67 	vmov.f32	s2, s15
 8001218:	373c      	adds	r7, #60	; 0x3c
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	b004      	add	sp, #16
 8001222:	4770      	bx	lr

08001224 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b090      	sub	sp, #64	; 0x40
 8001228:	af00      	add	r7, sp, #0
 800122a:	eeb0 6a40 	vmov.f32	s12, s0
 800122e:	eef0 6a60 	vmov.f32	s13, s1
 8001232:	eeb0 7a41 	vmov.f32	s14, s2
 8001236:	eef0 7a61 	vmov.f32	s15, s3
 800123a:	ed87 6a04 	vstr	s12, [r7, #16]
 800123e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001242:	ed87 7a06 	vstr	s14, [r7, #24]
 8001246:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 800124a:	ed97 7a06 	vldr	s14, [r7, #24]
 800124e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800125a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8001262:	ed97 7a04 	vldr	s14, [r7, #16]
 8001266:	edd7 7a05 	vldr	s15, [r7, #20]
 800126a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001272:	edd7 7a07 	vldr	s15, [r7, #28]
 8001276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800127e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001282:	edd7 7a05 	vldr	s15, [r7, #20]
 8001286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800128e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001292:	eef0 0a67 	vmov.f32	s1, s15
 8001296:	eeb0 0a66 	vmov.f32	s0, s13
 800129a:	f00d ff19 	bl	800f0d0 <atan2f>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	f7ff fe69 	bl	8000f7c <FusionRadiansToDegrees>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80012ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 80012b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80012b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012be:	edd7 6a07 	vldr	s13, [r7, #28]
 80012c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f7ff fe65 	bl	8000fa4 <FusionAsin>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	eeb0 0a67 	vmov.f32	s0, s15
 80012e2:	f7ff fe4b 	bl	8000f7c <FusionRadiansToDegrees>
 80012e6:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80012ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80012ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80012f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80012fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001306:	ee77 6a27 	vadd.f32	s13, s14, s15
 800130a:	ed97 7a07 	vldr	s14, [r7, #28]
 800130e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	eeb0 0a66 	vmov.f32	s0, s13
 8001326:	f00d fed3 	bl	800f0d0 <atan2f>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	f7ff fe23 	bl	8000f7c <FusionRadiansToDegrees>
 8001336:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800133a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800133e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001342:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001346:	ca07      	ldmia	r2, {r0, r1, r2}
 8001348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800134c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800134e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001352:	ee06 1a90 	vmov	s13, r1
 8001356:	ee07 2a10 	vmov	s14, r2
 800135a:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800135e:	eeb0 0a66 	vmov.f32	s0, s13
 8001362:	eef0 0a47 	vmov.f32	s1, s14
 8001366:	eeb0 1a67 	vmov.f32	s2, s15
 800136a:	3740      	adds	r7, #64	; 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 8001370:	b084      	sub	sp, #16
 8001372:	b5b0      	push	{r4, r5, r7, lr}
 8001374:	b09e      	sub	sp, #120	; 0x78
 8001376:	af06      	add	r7, sp, #24
 8001378:	eef0 4a41 	vmov.f32	s9, s2
 800137c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001384:	eeb0 5a61 	vmov.f32	s10, s3
 8001388:	eef0 5a42 	vmov.f32	s11, s4
 800138c:	eeb0 6a62 	vmov.f32	s12, s5
 8001390:	eef0 6a43 	vmov.f32	s13, s6
 8001394:	eeb0 7a63 	vmov.f32	s14, s7
 8001398:	eef0 7a44 	vmov.f32	s15, s8
 800139c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 80013a0:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 80013a4:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 80013a8:	ed87 5a08 	vstr	s10, [r7, #32]
 80013ac:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 80013b0:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 80013b4:	edc7 6a05 	vstr	s13, [r7, #20]
 80013b8:	ed87 7a06 	vstr	s14, [r7, #24]
 80013bc:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 80013c0:	ed97 5a05 	vldr	s10, [r7, #20]
 80013c4:	edd7 5a06 	vldr	s11, [r7, #24]
 80013c8:	ed97 6a07 	vldr	s12, [r7, #28]
 80013cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80013d0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80013d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013d8:	eef0 1a45 	vmov.f32	s3, s10
 80013dc:	eeb0 2a65 	vmov.f32	s4, s11
 80013e0:	eef0 2a46 	vmov.f32	s5, s12
 80013e4:	eeb0 0a66 	vmov.f32	s0, s13
 80013e8:	eef0 0a47 	vmov.f32	s1, s14
 80013ec:	eeb0 1a67 	vmov.f32	s2, s15
 80013f0:	f7ff fe04 	bl	8000ffc <FusionVectorSubtract>
 80013f4:	eef0 6a40 	vmov.f32	s13, s0
 80013f8:	eeb0 7a60 	vmov.f32	s14, s1
 80013fc:	eef0 7a41 	vmov.f32	s15, s2
 8001400:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001404:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001408:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800140c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001410:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001414:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001418:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800141c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001420:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001424:	eef0 1a45 	vmov.f32	s3, s10
 8001428:	eeb0 2a65 	vmov.f32	s4, s11
 800142c:	eef0 2a46 	vmov.f32	s5, s12
 8001430:	eeb0 0a66 	vmov.f32	s0, s13
 8001434:	eef0 0a47 	vmov.f32	s1, s14
 8001438:	eeb0 1a67 	vmov.f32	s2, s15
 800143c:	f7ff fe2c 	bl	8001098 <FusionVectorHadamardProduct>
 8001440:	eef0 6a40 	vmov.f32	s13, s0
 8001444:	eeb0 7a60 	vmov.f32	s14, s1
 8001448:	eef0 7a41 	vmov.f32	s15, s2
 800144c:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 8001450:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8001454:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8001458:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800145c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001460:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001464:	466d      	mov	r5, sp
 8001466:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	602b      	str	r3, [r5, #0]
 8001472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001478:	eeb0 0a66 	vmov.f32	s0, s13
 800147c:	eef0 0a47 	vmov.f32	s1, s14
 8001480:	eeb0 1a67 	vmov.f32	s2, s15
 8001484:	f7ff fe56 	bl	8001134 <FusionMatrixMultiplyVector>
 8001488:	eef0 6a40 	vmov.f32	s13, s0
 800148c:	eeb0 7a60 	vmov.f32	s14, s1
 8001490:	eef0 7a41 	vmov.f32	s15, s2
 8001494:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8001498:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800149c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80014a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80014a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	ee06 1a90 	vmov	s13, r1
 80014aa:	ee07 2a10 	vmov	s14, r2
 80014ae:	ee07 3a90 	vmov	s15, r3
}
 80014b2:	eeb0 0a66 	vmov.f32	s0, s13
 80014b6:	eef0 0a47 	vmov.f32	s1, s14
 80014ba:	eeb0 1a67 	vmov.f32	s2, s15
 80014be:	3760      	adds	r7, #96	; 0x60
 80014c0:	46bd      	mov	sp, r7
 80014c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014c6:	b004      	add	sp, #16
 80014c8:	4770      	bx	lr

080014ca <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 80014ca:	b084      	sub	sp, #16
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b096      	sub	sp, #88	; 0x58
 80014d0:	af06      	add	r7, sp, #24
 80014d2:	eeb0 5a40 	vmov.f32	s10, s0
 80014d6:	eef0 5a60 	vmov.f32	s11, s1
 80014da:	eeb0 6a41 	vmov.f32	s12, s2
 80014de:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80014e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014e6:	eef0 6a61 	vmov.f32	s13, s3
 80014ea:	eeb0 7a42 	vmov.f32	s14, s4
 80014ee:	eef0 7a62 	vmov.f32	s15, s5
 80014f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80014f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80014fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80014fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8001502:	ed87 7a05 	vstr	s14, [r7, #20]
 8001506:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 800150a:	edd7 6a07 	vldr	s13, [r7, #28]
 800150e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001512:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001516:	466d      	mov	r5, sp
 8001518:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152a:	eeb0 0a66 	vmov.f32	s0, s13
 800152e:	eef0 0a47 	vmov.f32	s1, s14
 8001532:	eeb0 1a67 	vmov.f32	s2, s15
 8001536:	f7ff fdfd 	bl	8001134 <FusionMatrixMultiplyVector>
 800153a:	eef0 6a40 	vmov.f32	s13, s0
 800153e:	eeb0 7a60 	vmov.f32	s14, s1
 8001542:	eef0 7a41 	vmov.f32	s15, s2
 8001546:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800154a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800154e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8001552:	ed97 5a04 	vldr	s10, [r7, #16]
 8001556:	edd7 5a05 	vldr	s11, [r7, #20]
 800155a:	ed97 6a06 	vldr	s12, [r7, #24]
 800155e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001562:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001566:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800156a:	eef0 1a45 	vmov.f32	s3, s10
 800156e:	eeb0 2a65 	vmov.f32	s4, s11
 8001572:	eef0 2a46 	vmov.f32	s5, s12
 8001576:	eeb0 0a66 	vmov.f32	s0, s13
 800157a:	eef0 0a47 	vmov.f32	s1, s14
 800157e:	eeb0 1a67 	vmov.f32	s2, s15
 8001582:	f7ff fd3b 	bl	8000ffc <FusionVectorSubtract>
 8001586:	eef0 6a40 	vmov.f32	s13, s0
 800158a:	eeb0 7a60 	vmov.f32	s14, s1
 800158e:	eef0 7a41 	vmov.f32	s15, s2
 8001592:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001596:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800159a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800159e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	ee06 1a90 	vmov	s13, r1
 80015a8:	ee07 2a10 	vmov	s14, r2
 80015ac:	ee07 3a90 	vmov	s15, r3
}
 80015b0:	eeb0 0a66 	vmov.f32	s0, s13
 80015b4:	eef0 0a47 	vmov.f32	s1, s14
 80015b8:	eeb0 1a67 	vmov.f32	s2, s15
 80015bc:	3740      	adds	r7, #64	; 0x40
 80015be:	46bd      	mov	sp, r7
 80015c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015c4:	b004      	add	sp, #16
 80015c6:	4770      	bx	lr

080015c8 <FusionInit>:

FusionAhrs ahrs;
FusionOffset offset;

/* Initialize Fusion algorithm. */
void FusionInit(void){
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 80015ce:	2146      	movs	r1, #70	; 0x46
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <FusionInit+0x34>)
 80015d2:	f002 fa57 	bl	8003a84 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <FusionInit+0x38>)
 80015d8:	f000 fe6c 	bl	80022b4 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <FusionInit+0x3c>)
 80015de:	1d3c      	adds	r4, r7, #4
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <FusionInit+0x38>)
 80015f0:	f000 feda 	bl	80023a8 <FusionAhrsSetSettings>

}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	20000264 	.word	0x20000264
 8001600:	200001fc 	.word	0x200001fc
 8001604:	08010688 	.word	0x08010688

08001608 <FusionCalcHeading>:
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}

/* Calculate heading based on all three sensors.*/
void FusionCalcHeading(mems_data_t *memsData, FusionEuler *output_angles){
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160a:	b099      	sub	sp, #100	; 0x64
 800160c:	af06      	add	r7, sp, #24
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	const clock_t timestamp = memsData->timestamp; // timestamp taken from LSM6DRX gyroscope.
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
	FusionVector gyroscope = {memsData->gyro_x, memsData->gyro_y, memsData->gyro_z};
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
	FusionVector accelerometer = {memsData->acc_x, memsData->acc_y, memsData->acc_z};
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	623b      	str	r3, [r7, #32]
	FusionVector magnetometer = {memsData->magn_x, memsData->magn_y, memsData->magn_z}; // replace this with actual magnetometer data in arbitrary units
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	617b      	str	r3, [r7, #20]

	// Apply calibration
	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 800164e:	4bb4      	ldr	r3, [pc, #720]	; (8001920 <FusionCalcHeading+0x318>)
 8001650:	edd3 3a00 	vldr	s7, [r3]
 8001654:	ed93 4a01 	vldr	s8, [r3, #4]
 8001658:	edd3 4a02 	vldr	s9, [r3, #8]
 800165c:	4bb1      	ldr	r3, [pc, #708]	; (8001924 <FusionCalcHeading+0x31c>)
 800165e:	ed93 5a00 	vldr	s10, [r3]
 8001662:	edd3 5a01 	vldr	s11, [r3, #4]
 8001666:	ed93 6a02 	vldr	s12, [r3, #8]
 800166a:	4eaf      	ldr	r6, [pc, #700]	; (8001928 <FusionCalcHeading+0x320>)
 800166c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001670:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001674:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001678:	466d      	mov	r5, sp
 800167a:	f106 0410 	add.w	r4, r6, #16
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	602b      	str	r3, [r5, #0]
 8001686:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800168a:	eeb0 3a63 	vmov.f32	s6, s7
 800168e:	eef0 3a44 	vmov.f32	s7, s8
 8001692:	eeb0 4a64 	vmov.f32	s8, s9
 8001696:	eef0 1a45 	vmov.f32	s3, s10
 800169a:	eeb0 2a65 	vmov.f32	s4, s11
 800169e:	eef0 2a46 	vmov.f32	s5, s12
 80016a2:	eeb0 0a66 	vmov.f32	s0, s13
 80016a6:	eef0 0a47 	vmov.f32	s1, s14
 80016aa:	eeb0 1a67 	vmov.f32	s2, s15
 80016ae:	f7ff fe5f 	bl	8001370 <FusionCalibrationInertial>
 80016b2:	eef0 6a40 	vmov.f32	s13, s0
 80016b6:	eeb0 7a60 	vmov.f32	s14, s1
 80016ba:	eef0 7a41 	vmov.f32	s15, s2
 80016be:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80016c2:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80016c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 80016ca:	4b98      	ldr	r3, [pc, #608]	; (800192c <FusionCalcHeading+0x324>)
 80016cc:	edd3 3a00 	vldr	s7, [r3]
 80016d0:	ed93 4a01 	vldr	s8, [r3, #4]
 80016d4:	edd3 4a02 	vldr	s9, [r3, #8]
 80016d8:	4b95      	ldr	r3, [pc, #596]	; (8001930 <FusionCalcHeading+0x328>)
 80016da:	ed93 5a00 	vldr	s10, [r3]
 80016de:	edd3 5a01 	vldr	s11, [r3, #4]
 80016e2:	ed93 6a02 	vldr	s12, [r3, #8]
 80016e6:	4e93      	ldr	r6, [pc, #588]	; (8001934 <FusionCalcHeading+0x32c>)
 80016e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80016ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80016f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80016f4:	466d      	mov	r5, sp
 80016f6:	f106 0410 	add.w	r4, r6, #16
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	602b      	str	r3, [r5, #0]
 8001702:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001706:	eeb0 3a63 	vmov.f32	s6, s7
 800170a:	eef0 3a44 	vmov.f32	s7, s8
 800170e:	eeb0 4a64 	vmov.f32	s8, s9
 8001712:	eef0 1a45 	vmov.f32	s3, s10
 8001716:	eeb0 2a65 	vmov.f32	s4, s11
 800171a:	eef0 2a46 	vmov.f32	s5, s12
 800171e:	eeb0 0a66 	vmov.f32	s0, s13
 8001722:	eef0 0a47 	vmov.f32	s1, s14
 8001726:	eeb0 1a67 	vmov.f32	s2, s15
 800172a:	f7ff fe21 	bl	8001370 <FusionCalibrationInertial>
 800172e:	eef0 6a40 	vmov.f32	s13, s0
 8001732:	eeb0 7a60 	vmov.f32	s14, s1
 8001736:	eef0 7a41 	vmov.f32	s15, s2
 800173a:	edc7 6a06 	vstr	s13, [r7, #24]
 800173e:	ed87 7a07 	vstr	s14, [r7, #28]
 8001742:	edc7 7a08 	vstr	s15, [r7, #32]
	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 8001746:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <FusionCalcHeading+0x330>)
 8001748:	ed93 5a00 	vldr	s10, [r3]
 800174c:	edd3 5a01 	vldr	s11, [r3, #4]
 8001750:	ed93 6a02 	vldr	s12, [r3, #8]
 8001754:	4e79      	ldr	r6, [pc, #484]	; (800193c <FusionCalcHeading+0x334>)
 8001756:	edd7 6a03 	vldr	s13, [r7, #12]
 800175a:	ed97 7a04 	vldr	s14, [r7, #16]
 800175e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001762:	466d      	mov	r5, sp
 8001764:	f106 0410 	add.w	r4, r6, #16
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	602b      	str	r3, [r5, #0]
 8001770:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001774:	eef0 1a45 	vmov.f32	s3, s10
 8001778:	eeb0 2a65 	vmov.f32	s4, s11
 800177c:	eef0 2a46 	vmov.f32	s5, s12
 8001780:	eeb0 0a66 	vmov.f32	s0, s13
 8001784:	eef0 0a47 	vmov.f32	s1, s14
 8001788:	eeb0 1a67 	vmov.f32	s2, s15
 800178c:	f7ff fe9d 	bl	80014ca <FusionCalibrationMagnetic>
 8001790:	eef0 6a40 	vmov.f32	s13, s0
 8001794:	eeb0 7a60 	vmov.f32	s14, s1
 8001798:	eef0 7a41 	vmov.f32	s15, s2
 800179c:	edc7 6a03 	vstr	s13, [r7, #12]
 80017a0:	ed87 7a04 	vstr	s14, [r7, #16]
 80017a4:	edc7 7a05 	vstr	s15, [r7, #20]

	// Update gyroscope offset correction algorithm
	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 80017a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80017ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80017b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017b4:	eeb0 0a66 	vmov.f32	s0, s13
 80017b8:	eef0 0a47 	vmov.f32	s1, s14
 80017bc:	eeb0 1a67 	vmov.f32	s2, s15
 80017c0:	485f      	ldr	r0, [pc, #380]	; (8001940 <FusionCalcHeading+0x338>)
 80017c2:	f002 f991 	bl	8003ae8 <FusionOffsetUpdate>
 80017c6:	eef0 6a40 	vmov.f32	s13, s0
 80017ca:	eeb0 7a60 	vmov.f32	s14, s1
 80017ce:	eef0 7a41 	vmov.f32	s15, s2
 80017d2:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80017d6:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80017da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Calculate delta time (in seconds) to account for gyroscope sample clock error
	static clock_t previousTimestamp;
	const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
 80017de:	4b59      	ldr	r3, [pc, #356]	; (8001944 <FusionCalcHeading+0x33c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ee:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001948 <FusionCalcHeading+0x340>
 80017f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	previousTimestamp = timestamp;
 80017fa:	4a52      	ldr	r2, [pc, #328]	; (8001944 <FusionCalcHeading+0x33c>)
 80017fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fe:	6013      	str	r3, [r2, #0]


	// Update gyroscope AHRS algorithm
	FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 8001800:	ed97 3a03 	vldr	s6, [r7, #12]
 8001804:	edd7 3a04 	vldr	s7, [r7, #16]
 8001808:	ed97 4a05 	vldr	s8, [r7, #20]
 800180c:	ed97 5a06 	vldr	s10, [r7, #24]
 8001810:	edd7 5a07 	vldr	s11, [r7, #28]
 8001814:	ed97 6a08 	vldr	s12, [r7, #32]
 8001818:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800181c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001820:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001824:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8001828:	eef0 1a45 	vmov.f32	s3, s10
 800182c:	eeb0 2a65 	vmov.f32	s4, s11
 8001830:	eef0 2a46 	vmov.f32	s5, s12
 8001834:	eeb0 0a66 	vmov.f32	s0, s13
 8001838:	eef0 0a47 	vmov.f32	s1, s14
 800183c:	eeb0 1a67 	vmov.f32	s2, s15
 8001840:	4842      	ldr	r0, [pc, #264]	; (800194c <FusionCalcHeading+0x344>)
 8001842:	f000 fe3f 	bl	80024c4 <FusionAhrsUpdate>

	// Print algorithm outputs
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001846:	4841      	ldr	r0, [pc, #260]	; (800194c <FusionCalcHeading+0x344>)
 8001848:	f001 fb64 	bl	8002f14 <FusionAhrsGetQuaternion>
 800184c:	eeb0 6a40 	vmov.f32	s12, s0
 8001850:	eef0 6a60 	vmov.f32	s13, s1
 8001854:	eeb0 7a41 	vmov.f32	s14, s2
 8001858:	eef0 7a61 	vmov.f32	s15, s3
 800185c:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 8001860:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8001864:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8001868:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800186c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8001870:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001874:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001878:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800187c:	eeb0 0a46 	vmov.f32	s0, s12
 8001880:	eef0 0a66 	vmov.f32	s1, s13
 8001884:	eeb0 1a47 	vmov.f32	s2, s14
 8001888:	eef0 1a67 	vmov.f32	s3, s15
 800188c:	f7ff fcca 	bl	8001224 <FusionQuaternionToEuler>
 8001890:	eef0 6a40 	vmov.f32	s13, s0
 8001894:	eeb0 7a60 	vmov.f32	s14, s1
 8001898:	eef0 7a41 	vmov.f32	s15, s2
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	edc3 6a00 	vstr	s13, [r3]
 80018a2:	ed83 7a01 	vstr	s14, [r3, #4]
 80018a6:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d509      	bpl.n	80018ce <FusionCalcHeading+0x2c6>
		output_angles->angle.yaw += 360;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001950 <FusionCalcHeading+0x348>
 80018c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d509      	bpl.n	80018f2 <FusionCalcHeading+0x2ea>
		output_angles->angle.roll += 360;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001950 <FusionCalcHeading+0x348>
 80018e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	d400      	bmi.n	8001904 <FusionCalcHeading+0x2fc>
		output_angles->angle.pitch += 360;
	}
//	const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
}
 8001902:	e009      	b.n	8001918 <FusionCalcHeading+0x310>
		output_angles->angle.pitch += 360;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	edd3 7a01 	vldr	s15, [r3, #4]
 800190a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001950 <FusionCalcHeading+0x348>
 800190e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001918:	bf00      	nop
 800191a:	374c      	adds	r7, #76	; 0x4c
 800191c:	46bd      	mov	sp, r7
 800191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001920:	08010808 	.word	0x08010808
 8001924:	080107fc 	.word	0x080107fc
 8001928:	080107d8 	.word	0x080107d8
 800192c:	08010844 	.word	0x08010844
 8001930:	08010838 	.word	0x08010838
 8001934:	08010814 	.word	0x08010814
 8001938:	08010874 	.word	0x08010874
 800193c:	08010850 	.word	0x08010850
 8001940:	20000264 	.word	0x20000264
 8001944:	2000027c 	.word	0x2000027c
 8001948:	42c80000 	.word	0x42c80000
 800194c:	200001fc 	.word	0x200001fc
 8001950:	43b40000 	.word	0x43b40000

08001954 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800195e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001962:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001978 <FusionDegreesToRadians+0x24>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	3c8efa35 	.word	0x3c8efa35

0800197c <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	105a      	asrs	r2, r3, #1
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <FusionFastInverseSqrt+0x54>)
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8001994:	ed97 7a03 	vldr	s14, [r7, #12]
 8001998:	edd7 7a01 	vldr	s15, [r7, #4]
 800199c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80019d4 <FusionFastInverseSqrt+0x58>
 80019a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	eddf 6a08 	vldr	s13, [pc, #32]	; 80019d8 <FusionFastInverseSqrt+0x5c>
 80019b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	5f1f1412 	.word	0x5f1f1412
 80019d4:	3f36d312 	.word	0x3f36d312
 80019d8:	3fd851ff 	.word	0x3fd851ff

080019dc <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	eef0 6a40 	vmov.f32	s13, s0
 80019e6:	eeb0 7a60 	vmov.f32	s14, s1
 80019ea:	eef0 7a41 	vmov.f32	s15, s2
 80019ee:	edc7 6a01 	vstr	s13, [r7, #4]
 80019f2:	ed87 7a02 	vstr	s14, [r7, #8]
 80019f6:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 80019fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d10f      	bne.n	8001a28 <FusionVectorIsZero+0x4c>
 8001a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d108      	bne.n	8001a28 <FusionVectorIsZero+0x4c>
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d101      	bne.n	8001a28 <FusionVectorIsZero+0x4c>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <FusionVectorIsZero+0x4e>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b091      	sub	sp, #68	; 0x44
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	eeb0 5a40 	vmov.f32	s10, s0
 8001a46:	eef0 5a60 	vmov.f32	s11, s1
 8001a4a:	eeb0 6a41 	vmov.f32	s12, s2
 8001a4e:	eef0 6a61 	vmov.f32	s13, s3
 8001a52:	eeb0 7a42 	vmov.f32	s14, s4
 8001a56:	eef0 7a62 	vmov.f32	s15, s5
 8001a5a:	ed87 5a07 	vstr	s10, [r7, #28]
 8001a5e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001a62:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001a66:	edc7 6a04 	vstr	s13, [r7, #16]
 8001a6a:	ed87 7a05 	vstr	s14, [r7, #20]
 8001a6e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8001a72:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8001a82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8001a92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001a9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001aa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ab0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab6:	ee06 1a90 	vmov	s13, r1
 8001aba:	ee07 2a10 	vmov	s14, r2
 8001abe:	ee07 3a90 	vmov	s15, r3
}
 8001ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8001ac6:	eef0 0a47 	vmov.f32	s1, s14
 8001aca:	eeb0 1a67 	vmov.f32	s2, s15
 8001ace:	3744      	adds	r7, #68	; 0x44
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	eef0 6a40 	vmov.f32	s13, s0
 8001ae2:	eeb0 7a60 	vmov.f32	s14, s1
 8001ae6:	eef0 7a41 	vmov.f32	s15, s2
 8001aea:	edc7 6a01 	vstr	s13, [r7, #4]
 8001aee:	ed87 7a02 	vstr	s14, [r7, #8]
 8001af2:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001af6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b08f      	sub	sp, #60	; 0x3c
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	eef0 6a40 	vmov.f32	s13, s0
 8001b22:	eeb0 7a60 	vmov.f32	s14, s1
 8001b26:	eef0 7a41 	vmov.f32	s15, s2
 8001b2a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001b2e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b32:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b36:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8001b3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b42:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b46:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8001b4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b52:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8001b5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	f107 0220 	add.w	r2, r7, #32
 8001b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7e:	ee06 1a90 	vmov	s13, r1
 8001b82:	ee07 2a10 	vmov	s14, r2
 8001b86:	ee07 3a90 	vmov	s15, r3
}
 8001b8a:	eeb0 0a66 	vmov.f32	s0, s13
 8001b8e:	eef0 0a47 	vmov.f32	s1, s14
 8001b92:	eeb0 1a67 	vmov.f32	s2, s15
 8001b96:	373c      	adds	r7, #60	; 0x3c
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b091      	sub	sp, #68	; 0x44
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	eeb0 5a40 	vmov.f32	s10, s0
 8001baa:	eef0 5a60 	vmov.f32	s11, s1
 8001bae:	eeb0 6a41 	vmov.f32	s12, s2
 8001bb2:	eef0 6a61 	vmov.f32	s13, s3
 8001bb6:	eeb0 7a42 	vmov.f32	s14, s4
 8001bba:	eef0 7a62 	vmov.f32	s15, s5
 8001bbe:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bc2:	edc7 5a08 	vstr	s11, [r7, #32]
 8001bc6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001bca:	edc7 6a04 	vstr	s13, [r7, #16]
 8001bce:	ed87 7a05 	vstr	s14, [r7, #20]
 8001bd2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001bd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001be2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001be6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001bf2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001bf6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1a:	ee06 1a90 	vmov	s13, r1
 8001c1e:	ee07 2a10 	vmov	s14, r2
 8001c22:	ee07 3a90 	vmov	s15, r3
}
 8001c26:	eeb0 0a66 	vmov.f32	s0, s13
 8001c2a:	eef0 0a47 	vmov.f32	s1, s14
 8001c2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001c32:	3744      	adds	r7, #68	; 0x44
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b091      	sub	sp, #68	; 0x44
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	eeb0 5a40 	vmov.f32	s10, s0
 8001c46:	eef0 5a60 	vmov.f32	s11, s1
 8001c4a:	eeb0 6a41 	vmov.f32	s12, s2
 8001c4e:	eef0 6a61 	vmov.f32	s13, s3
 8001c52:	eeb0 7a42 	vmov.f32	s14, s4
 8001c56:	eef0 7a62 	vmov.f32	s15, s5
 8001c5a:	ed87 5a07 	vstr	s10, [r7, #28]
 8001c5e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c62:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001c66:	edc7 6a04 	vstr	s13, [r7, #16]
 8001c6a:	ed87 7a05 	vstr	s14, [r7, #20]
 8001c6e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001c72:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c76:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c8e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001c92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001cae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001cb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cca:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001cce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001cd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ce0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce6:	ee06 1a90 	vmov	s13, r1
 8001cea:	ee07 2a10 	vmov	s14, r2
 8001cee:	ee07 3a90 	vmov	s15, r3
}
 8001cf2:	eeb0 0a66 	vmov.f32	s0, s13
 8001cf6:	eef0 0a47 	vmov.f32	s1, s14
 8001cfa:	eeb0 1a67 	vmov.f32	s2, s15
 8001cfe:	3744      	adds	r7, #68	; 0x44
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	eef0 6a40 	vmov.f32	s13, s0
 8001d12:	eeb0 7a60 	vmov.f32	s14, s1
 8001d16:	eef0 7a41 	vmov.f32	s15, s2
 8001d1a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001d1e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001d22:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001d26:	ed97 5a01 	vldr	s10, [r7, #4]
 8001d2a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001d32:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d36:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3e:	eef0 1a45 	vmov.f32	s3, s10
 8001d42:	eeb0 2a65 	vmov.f32	s4, s11
 8001d46:	eef0 2a46 	vmov.f32	s5, s12
 8001d4a:	eeb0 0a66 	vmov.f32	s0, s13
 8001d4e:	eef0 0a47 	vmov.f32	s1, s14
 8001d52:	eeb0 1a67 	vmov.f32	s2, s15
 8001d56:	f7ff ff23 	bl	8001ba0 <FusionVectorHadamardProduct>
 8001d5a:	eef0 6a40 	vmov.f32	s13, s0
 8001d5e:	eeb0 7a60 	vmov.f32	s14, s1
 8001d62:	eef0 7a41 	vmov.f32	s15, s2
 8001d66:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d6a:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d6e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001d72:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d76:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7e:	eeb0 0a66 	vmov.f32	s0, s13
 8001d82:	eef0 0a47 	vmov.f32	s1, s14
 8001d86:	eeb0 1a67 	vmov.f32	s2, s15
 8001d8a:	f7ff fea5 	bl	8001ad8 <FusionVectorSum>
 8001d8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001d92:	eeb0 0a67 	vmov.f32	s0, s15
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	eef0 6a40 	vmov.f32	s13, s0
 8001da6:	eeb0 7a60 	vmov.f32	s14, s1
 8001daa:	eef0 7a41 	vmov.f32	s15, s2
 8001dae:	edc7 6a05 	vstr	s13, [r7, #20]
 8001db2:	ed87 7a06 	vstr	s14, [r7, #24]
 8001db6:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001dba:	edd7 6a05 	vldr	s13, [r7, #20]
 8001dbe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc6:	eeb0 0a66 	vmov.f32	s0, s13
 8001dca:	eef0 0a47 	vmov.f32	s1, s14
 8001dce:	eeb0 1a67 	vmov.f32	s2, s15
 8001dd2:	f7ff ff99 	bl	8001d08 <FusionVectorMagnitudeSquared>
 8001dd6:	eef0 7a40 	vmov.f32	s15, s0
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	f7ff fdcd 	bl	800197c <FusionFastInverseSqrt>
 8001de2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001de6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001dea:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001df2:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001df6:	eeb0 0a66 	vmov.f32	s0, s13
 8001dfa:	eef0 0a47 	vmov.f32	s1, s14
 8001dfe:	eeb0 1a67 	vmov.f32	s2, s15
 8001e02:	f7ff fe89 	bl	8001b18 <FusionVectorMultiplyScalar>
 8001e06:	eef0 6a40 	vmov.f32	s13, s0
 8001e0a:	eeb0 7a60 	vmov.f32	s14, s1
 8001e0e:	eef0 7a41 	vmov.f32	s15, s2
 8001e12:	edc7 6a08 	vstr	s13, [r7, #32]
 8001e16:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001e1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001e1e:	6a39      	ldr	r1, [r7, #32]
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	ee06 1a90 	vmov	s13, r1
 8001e28:	ee07 2a10 	vmov	s14, r2
 8001e2c:	ee07 3a90 	vmov	s15, r3
}
 8001e30:	eeb0 0a66 	vmov.f32	s0, s13
 8001e34:	eef0 0a47 	vmov.f32	s1, s14
 8001e38:	eeb0 1a67 	vmov.f32	s2, s15
 8001e3c:	3730      	adds	r7, #48	; 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001e42:	b490      	push	{r4, r7}
 8001e44:	b094      	sub	sp, #80	; 0x50
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	eeb0 4a40 	vmov.f32	s8, s0
 8001e4c:	eef0 4a60 	vmov.f32	s9, s1
 8001e50:	eeb0 5a41 	vmov.f32	s10, s2
 8001e54:	eef0 5a61 	vmov.f32	s11, s3
 8001e58:	eeb0 6a42 	vmov.f32	s12, s4
 8001e5c:	eef0 6a62 	vmov.f32	s13, s5
 8001e60:	eeb0 7a43 	vmov.f32	s14, s6
 8001e64:	eef0 7a63 	vmov.f32	s15, s7
 8001e68:	ed87 4a08 	vstr	s8, [r7, #32]
 8001e6c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001e70:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001e74:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001e78:	ed87 6a04 	vstr	s12, [r7, #16]
 8001e7c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e80:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e84:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001e88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e90:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001e98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ea4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001ea8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001eac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001eb4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001eb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ebc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ec4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001ec8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ed6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ede:	ee06 0a10 	vmov	s12, r0
 8001ee2:	ee06 1a90 	vmov	s13, r1
 8001ee6:	ee07 2a10 	vmov	s14, r2
 8001eea:	ee07 3a90 	vmov	s15, r3
}
 8001eee:	eeb0 0a46 	vmov.f32	s0, s12
 8001ef2:	eef0 0a66 	vmov.f32	s1, s13
 8001ef6:	eeb0 1a47 	vmov.f32	s2, s14
 8001efa:	eef0 1a67 	vmov.f32	s3, s15
 8001efe:	3750      	adds	r7, #80	; 0x50
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc90      	pop	{r4, r7}
 8001f04:	4770      	bx	lr

08001f06 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001f06:	b490      	push	{r4, r7}
 8001f08:	b094      	sub	sp, #80	; 0x50
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	eeb0 4a40 	vmov.f32	s8, s0
 8001f10:	eef0 4a60 	vmov.f32	s9, s1
 8001f14:	eeb0 5a41 	vmov.f32	s10, s2
 8001f18:	eef0 5a61 	vmov.f32	s11, s3
 8001f1c:	eeb0 6a42 	vmov.f32	s12, s4
 8001f20:	eef0 6a62 	vmov.f32	s13, s5
 8001f24:	eeb0 7a43 	vmov.f32	s14, s6
 8001f28:	eef0 7a63 	vmov.f32	s15, s7
 8001f2c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001f30:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001f34:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001f38:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001f3c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001f40:	edc7 6a05 	vstr	s13, [r7, #20]
 8001f44:	ed87 7a06 	vstr	s14, [r7, #24]
 8001f48:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001f4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f68:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f78:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f88:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001f8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001fbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fc8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001fcc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001fdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001fec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002008:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800200c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002010:	edd7 7a07 	vldr	s15, [r7, #28]
 8002014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002018:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800201c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002028:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800202c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002038:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800203c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002048:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 800204c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800205a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800205c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800205e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002062:	ee06 0a10 	vmov	s12, r0
 8002066:	ee06 1a90 	vmov	s13, r1
 800206a:	ee07 2a10 	vmov	s14, r2
 800206e:	ee07 3a90 	vmov	s15, r3
}
 8002072:	eeb0 0a46 	vmov.f32	s0, s12
 8002076:	eef0 0a66 	vmov.f32	s1, s13
 800207a:	eeb0 1a47 	vmov.f32	s2, s14
 800207e:	eef0 1a67 	vmov.f32	s3, s15
 8002082:	3750      	adds	r7, #80	; 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	bc90      	pop	{r4, r7}
 8002088:	4770      	bx	lr

0800208a <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800208a:	b490      	push	{r4, r7}
 800208c:	b094      	sub	sp, #80	; 0x50
 800208e:	af00      	add	r7, sp, #0
 8002090:	eef0 4a40 	vmov.f32	s9, s0
 8002094:	eeb0 5a60 	vmov.f32	s10, s1
 8002098:	eef0 5a41 	vmov.f32	s11, s2
 800209c:	eeb0 6a61 	vmov.f32	s12, s3
 80020a0:	eef0 6a42 	vmov.f32	s13, s4
 80020a4:	eeb0 7a62 	vmov.f32	s14, s5
 80020a8:	eef0 7a43 	vmov.f32	s15, s6
 80020ac:	edc7 4a08 	vstr	s9, [r7, #32]
 80020b0:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 80020b4:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 80020b8:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 80020bc:	edc7 6a05 	vstr	s13, [r7, #20]
 80020c0:	ed87 7a06 	vstr	s14, [r7, #24]
 80020c4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 80020c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020cc:	eeb1 7a67 	vneg.f32	s14, s15
 80020d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80020dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80020ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020f8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 80020fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002100:	edd7 7a05 	vldr	s15, [r7, #20]
 8002104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002108:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800210c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800211c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002124:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002128:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800212c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002130:	edd7 7a06 	vldr	s15, [r7, #24]
 8002134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002138:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800213c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002144:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002148:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800214c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002154:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002158:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800215c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002160:	edd7 7a07 	vldr	s15, [r7, #28]
 8002164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002168:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800216c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002178:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800217c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002188:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 800218c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800219a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800219c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800219e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a2:	ee06 0a10 	vmov	s12, r0
 80021a6:	ee06 1a90 	vmov	s13, r1
 80021aa:	ee07 2a10 	vmov	s14, r2
 80021ae:	ee07 3a90 	vmov	s15, r3
}
 80021b2:	eeb0 0a46 	vmov.f32	s0, s12
 80021b6:	eef0 0a66 	vmov.f32	s1, s13
 80021ba:	eeb0 1a47 	vmov.f32	s2, s14
 80021be:	eef0 1a67 	vmov.f32	s3, s15
 80021c2:	3750      	adds	r7, #80	; 0x50
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc90      	pop	{r4, r7}
 80021c8:	4770      	bx	lr

080021ca <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 80021ca:	b590      	push	{r4, r7, lr}
 80021cc:	b093      	sub	sp, #76	; 0x4c
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	eeb0 6a40 	vmov.f32	s12, s0
 80021d4:	eef0 6a60 	vmov.f32	s13, s1
 80021d8:	eeb0 7a41 	vmov.f32	s14, s2
 80021dc:	eef0 7a61 	vmov.f32	s15, s3
 80021e0:	ed87 6a04 	vstr	s12, [r7, #16]
 80021e4:	edc7 6a05 	vstr	s13, [r7, #20]
 80021e8:	ed87 7a06 	vstr	s14, [r7, #24]
 80021ec:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80021f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80021f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fc:	edd7 6a05 	vldr	s13, [r7, #20]
 8002200:	edd7 7a05 	vldr	s15, [r7, #20]
 8002204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002210:	edd7 7a06 	vldr	s15, [r7, #24]
 8002214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002220:	edd7 7a07 	vldr	s15, [r7, #28]
 8002224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222c:	eeb0 0a67 	vmov.f32	s0, s15
 8002230:	f7ff fba4 	bl	800197c <FusionFastInverseSqrt>
 8002234:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8002238:	ed97 7a04 	vldr	s14, [r7, #16]
 800223c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002240:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002244:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8002248:	ed97 7a05 	vldr	s14, [r7, #20]
 800224c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002250:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002254:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8002258:	ed97 7a06 	vldr	s14, [r7, #24]
 800225c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002264:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8002268:	ed97 7a07 	vldr	s14, [r7, #28]
 800226c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002270:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002274:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002278:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800228a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800228c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228e:	ee06 0a10 	vmov	s12, r0
 8002292:	ee06 1a90 	vmov	s13, r1
 8002296:	ee07 2a10 	vmov	s14, r2
 800229a:	ee07 3a90 	vmov	s15, r3
}
 800229e:	eeb0 0a46 	vmov.f32	s0, s12
 80022a2:	eef0 0a66 	vmov.f32	s1, s13
 80022a6:	eeb0 1a47 	vmov.f32	s2, s14
 80022aa:	eef0 1a67 	vmov.f32	s3, s15
 80022ae:	374c      	adds	r7, #76	; 0x4c
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd90      	pop	{r4, r7, pc}

080022b4 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <FusionAhrsInitialise+0x34>)
 80022be:	f107 040c 	add.w	r4, r7, #12
 80022c2:	461d      	mov	r5, r3
 80022c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f868 	bl	80023a8 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f807 	bl	80022ec <FusionAhrsReset>
}
 80022de:	bf00      	nop
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bdb0      	pop	{r4, r5, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	0801069c 	.word	0x0801069c

080022ec <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 80022ec:	b480      	push	{r7}
 80022ee:	b091      	sub	sp, #68	; 0x44
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <FusionAhrsReset+0xb8>)
 8002338:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	649a      	str	r2, [r3, #72]	; 0x48
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	64da      	str	r2, [r3, #76]	; 0x4c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8002396:	bf00      	nop
 8002398:	3744      	adds	r7, #68	; 0x44
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	41200000 	.word	0x41200000

080023a8 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d003      	beq.n	80023da <FusionAhrsSetSettings+0x32>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <FusionAhrsSetSettings+0x118>)
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e01d      	b.n	800241e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	f7ff fab2 	bl	8001954 <FusionDegreesToRadians>
 80023f0:	eef0 7a40 	vmov.f32	s15, s0
 80023f4:	eeb0 0a67 	vmov.f32	s0, s15
 80023f8:	f00c fdf8 	bl	800efec <sinf>
 80023fc:	eef0 7a40 	vmov.f32	s15, s0
 8002400:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002408:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	f00c fe60 	bl	800f0d4 <powf>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	edd3 7a03 	vldr	s15, [r3, #12]
 8002424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d003      	beq.n	8002436 <FusionAhrsSetSettings+0x8e>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <FusionAhrsSetSettings+0x118>)
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	e01d      	b.n	800247a <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	edd3 7a03 	vldr	s15, [r3, #12]
 8002444:	eeb0 0a67 	vmov.f32	s0, s15
 8002448:	f7ff fa84 	bl	8001954 <FusionDegreesToRadians>
 800244c:	eef0 7a40 	vmov.f32	s15, s0
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	f00c fdca 	bl	800efec <sinf>
 8002458:	eef0 7a40 	vmov.f32	s15, s0
 800245c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002468:	eeb0 0a67 	vmov.f32	s0, s15
 800246c:	f00c fe32 	bl	800f0d4 <powf>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024a8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	7f7fffff 	.word	0x7f7fffff

080024c4 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b0bf      	sub	sp, #252	; 0xfc
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80024cc:	eeb0 5a61 	vmov.f32	s10, s3
 80024d0:	eef0 5a42 	vmov.f32	s11, s4
 80024d4:	eeb0 6a62 	vmov.f32	s12, s5
 80024d8:	eef0 6a43 	vmov.f32	s13, s6
 80024dc:	eeb0 7a63 	vmov.f32	s14, s7
 80024e0:	eef0 7a44 	vmov.f32	s15, s8
 80024e4:	edc7 4a01 	vstr	s9, [r7, #4]
 80024e8:	ed87 0a08 	vstr	s0, [r7, #32]
 80024ec:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 80024f0:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 80024f4:	ed87 5a05 	vstr	s10, [r7, #20]
 80024f8:	edc7 5a06 	vstr	s11, [r7, #24]
 80024fc:	ed87 6a07 	vstr	s12, [r7, #28]
 8002500:	edc7 6a02 	vstr	s13, [r7, #8]
 8002504:	ed87 7a03 	vstr	s14, [r7, #12]
 8002508:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	3324      	adds	r3, #36	; 0x24
 8002510:	f107 0214 	add.w	r2, r7, #20
 8002514:	ca07      	ldmia	r2, {r0, r1, r2}
 8002516:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d025      	beq.n	8002570 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002530:	edd7 7a01 	vldr	s15, [r7, #4]
 8002534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	edd3 7a01 	vldr	s15, [r3, #4]
 800254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d50b      	bpl.n	8002570 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2200      	movs	r2, #0
 800256c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8002570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002572:	f000 fb08 	bl	8002b86 <HalfGravity>
 8002576:	eef0 6a40 	vmov.f32	s13, s0
 800257a:	eeb0 7a60 	vmov.f32	s14, s1
 800257e:	eef0 7a41 	vmov.f32	s15, s2
 8002582:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8002586:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800258a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 80025ae:	edd7 6a05 	vldr	s13, [r7, #20]
 80025b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80025b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025ba:	eeb0 0a66 	vmov.f32	s0, s13
 80025be:	eef0 0a47 	vmov.f32	s1, s14
 80025c2:	eeb0 1a67 	vmov.f32	s2, s15
 80025c6:	f7ff fa09 	bl	80019dc <FusionVectorIsZero>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 809b 	beq.w	800270e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d918      	bls.n	8002616 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80025ea:	3314      	adds	r3, #20
 80025ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 80025f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025f4:	f7ff fe7a 	bl	80022ec <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	f103 0414 	add.w	r4, r3, #20
 80025fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	2200      	movs	r2, #0
 800260c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	2201      	movs	r2, #1
 8002612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002616:	edd7 6a05 	vldr	s13, [r7, #20]
 800261a:	ed97 7a06 	vldr	s14, [r7, #24]
 800261e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002622:	eeb0 0a66 	vmov.f32	s0, s13
 8002626:	eef0 0a47 	vmov.f32	s1, s14
 800262a:	eeb0 1a67 	vmov.f32	s2, s15
 800262e:	f7ff fbb5 	bl	8001d9c <FusionVectorNormalise>
 8002632:	eef0 6a40 	vmov.f32	s13, s0
 8002636:	eeb0 7a60 	vmov.f32	s14, s1
 800263a:	eef0 7a41 	vmov.f32	s15, s2
 800263e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8002642:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8002646:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800264a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800264c:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8002650:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002654:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8002658:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800265c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002660:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002664:	eef0 1a45 	vmov.f32	s3, s10
 8002668:	eeb0 2a65 	vmov.f32	s4, s11
 800266c:	eef0 2a46 	vmov.f32	s5, s12
 8002670:	eeb0 0a66 	vmov.f32	s0, s13
 8002674:	eef0 0a47 	vmov.f32	s1, s14
 8002678:	eeb0 1a67 	vmov.f32	s2, s15
 800267c:	f7ff fade 	bl	8001c3c <FusionVectorCrossProduct>
 8002680:	eef0 6a40 	vmov.f32	s13, s0
 8002684:	eeb0 7a60 	vmov.f32	s14, s1
 8002688:	eef0 7a41 	vmov.f32	s15, s2
 800268c:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 8002690:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8002694:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <FusionAhrsUpdate+0x210>
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80026a8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80026ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80026b0:	eeb0 0a66 	vmov.f32	s0, s13
 80026b4:	eef0 0a47 	vmov.f32	s1, s14
 80026b8:	eeb0 1a67 	vmov.f32	s2, s15
 80026bc:	f7ff fb24 	bl	8001d08 <FusionVectorMagnitudeSquared>
 80026c0:	eeb0 7a40 	vmov.f32	s14, s0
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	d817      	bhi.n	8002704 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80026da:	323c      	adds	r2, #60	; 0x3c
 80026dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80026de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	2b09      	cmp	r3, #9
 80026f4:	d901      	bls.n	80026fa <FusionAhrsUpdate+0x236>
 80026f6:	230a      	movs	r3, #10
 80026f8:	e000      	b.n	80026fc <FusionAhrsUpdate+0x238>
 80026fa:	2300      	movs	r3, #0
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	659a      	str	r2, [r3, #88]	; 0x58
 8002702:	e004      	b.n	800270e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	673b      	str	r3, [r7, #112]	; 0x70
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	677b      	str	r3, [r7, #116]	; 0x74
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	2201      	movs	r2, #1
 8002724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002728:	edd7 6a02 	vldr	s13, [r7, #8]
 800272c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002730:	edd7 7a04 	vldr	s15, [r7, #16]
 8002734:	eeb0 0a66 	vmov.f32	s0, s13
 8002738:	eef0 0a47 	vmov.f32	s1, s14
 800273c:	eeb0 1a67 	vmov.f32	s2, s15
 8002740:	f7ff f94c 	bl	80019dc <FusionVectorIsZero>
 8002744:	4603      	mov	r3, r0
 8002746:	f083 0301 	eor.w	r3, r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80e6 	beq.w	800291e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	429a      	cmp	r2, r3
 8002764:	d92a      	bls.n	80027bc <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	ed97 5a02 	vldr	s10, [r7, #8]
 800276e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002772:	ed97 6a04 	vldr	s12, [r7, #16]
 8002776:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800277a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800277e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002782:	eef0 1a45 	vmov.f32	s3, s10
 8002786:	eeb0 2a65 	vmov.f32	s4, s11
 800278a:	eef0 2a46 	vmov.f32	s5, s12
 800278e:	eeb0 0a66 	vmov.f32	s0, s13
 8002792:	eef0 0a47 	vmov.f32	s1, s14
 8002796:	eeb0 1a67 	vmov.f32	s2, s15
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fe6e 	bl	800347c <FusionCompassCalculateHeading>
 80027a0:	eef0 7a40 	vmov.f32	s15, s0
 80027a4:	eeb0 0a67 	vmov.f32	s0, s15
 80027a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027aa:	f000 fbd6 	bl	8002f5a <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	2200      	movs	r2, #0
 80027b2:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 80027bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027be:	f000 fa9f 	bl	8002d00 <HalfMagnetic>
 80027c2:	eef0 6a40 	vmov.f32	s13, s0
 80027c6:	eeb0 7a60 	vmov.f32	s14, s1
 80027ca:	eef0 7a41 	vmov.f32	s15, s2
 80027ce:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 80027d2:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 80027d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 80027da:	ed97 5a02 	vldr	s10, [r7, #8]
 80027de:	edd7 5a03 	vldr	s11, [r7, #12]
 80027e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80027e6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80027ea:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80027ee:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027f2:	eef0 1a45 	vmov.f32	s3, s10
 80027f6:	eeb0 2a65 	vmov.f32	s4, s11
 80027fa:	eef0 2a46 	vmov.f32	s5, s12
 80027fe:	eeb0 0a66 	vmov.f32	s0, s13
 8002802:	eef0 0a47 	vmov.f32	s1, s14
 8002806:	eeb0 1a67 	vmov.f32	s2, s15
 800280a:	f7ff fa17 	bl	8001c3c <FusionVectorCrossProduct>
 800280e:	eef0 6a40 	vmov.f32	s13, s0
 8002812:	eeb0 7a60 	vmov.f32	s14, s1
 8002816:	eef0 7a41 	vmov.f32	s15, s2
 800281a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800281e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002822:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002826:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800282a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800282e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002832:	eeb0 0a66 	vmov.f32	s0, s13
 8002836:	eef0 0a47 	vmov.f32	s1, s14
 800283a:	eeb0 1a67 	vmov.f32	s2, s15
 800283e:	f7ff faad 	bl	8001d9c <FusionVectorNormalise>
 8002842:	eef0 6a40 	vmov.f32	s13, s0
 8002846:	eeb0 7a60 	vmov.f32	s14, s1
 800284a:	eef0 7a41 	vmov.f32	s15, s2
 800284e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8002852:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8002856:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800285a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800285c:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8002860:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8002864:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8002868:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800286c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002870:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002874:	eef0 1a45 	vmov.f32	s3, s10
 8002878:	eeb0 2a65 	vmov.f32	s4, s11
 800287c:	eef0 2a46 	vmov.f32	s5, s12
 8002880:	eeb0 0a66 	vmov.f32	s0, s13
 8002884:	eef0 0a47 	vmov.f32	s1, s14
 8002888:	eeb0 1a67 	vmov.f32	s2, s15
 800288c:	f7ff f9d6 	bl	8001c3c <FusionVectorCrossProduct>
 8002890:	eef0 6a40 	vmov.f32	s13, s0
 8002894:	eeb0 7a60 	vmov.f32	s14, s1
 8002898:	eef0 7a41 	vmov.f32	s15, s2
 800289c:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 80028a0:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 80028a4:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <FusionAhrsUpdate+0x420>
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80028b8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80028bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80028c0:	eeb0 0a66 	vmov.f32	s0, s13
 80028c4:	eef0 0a47 	vmov.f32	s1, s14
 80028c8:	eeb0 1a67 	vmov.f32	s2, s15
 80028cc:	f7ff fa1c 	bl	8001d08 <FusionVectorMagnitudeSquared>
 80028d0:	eeb0 7a40 	vmov.f32	s14, s0
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80028da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	d817      	bhi.n	8002914 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 80028e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028ea:	3248      	adds	r2, #72	; 0x48
 80028ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	2b09      	cmp	r3, #9
 8002904:	d901      	bls.n	800290a <FusionAhrsUpdate+0x446>
 8002906:	230a      	movs	r3, #10
 8002908:	e000      	b.n	800290c <FusionAhrsUpdate+0x448>
 800290a:	2300      	movs	r3, #0
 800290c:	1ad2      	subs	r2, r2, r3
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	661a      	str	r2, [r3, #96]	; 0x60
 8002912:	e004      	b.n	800291e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800291e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002922:	f7ff f817 	bl	8001954 <FusionDegreesToRadians>
 8002926:	eeb0 6a40 	vmov.f32	s12, s0
 800292a:	edd7 6a08 	vldr	s13, [r7, #32]
 800292e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002936:	eef0 1a46 	vmov.f32	s3, s12
 800293a:	eeb0 0a66 	vmov.f32	s0, s13
 800293e:	eef0 0a47 	vmov.f32	s1, s14
 8002942:	eeb0 1a67 	vmov.f32	s2, s15
 8002946:	f7ff f8e7 	bl	8001b18 <FusionVectorMultiplyScalar>
 800294a:	eef0 6a40 	vmov.f32	s13, s0
 800294e:	eeb0 7a60 	vmov.f32	s14, s1
 8002952:	eef0 7a41 	vmov.f32	s15, s2
 8002956:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800295a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800295e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8002962:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8002966:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800296a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800296e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002972:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002976:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800297a:	eef0 1a45 	vmov.f32	s3, s10
 800297e:	eeb0 2a65 	vmov.f32	s4, s11
 8002982:	eef0 2a46 	vmov.f32	s5, s12
 8002986:	eeb0 0a66 	vmov.f32	s0, s13
 800298a:	eef0 0a47 	vmov.f32	s1, s14
 800298e:	eeb0 1a67 	vmov.f32	s2, s15
 8002992:	f7ff f853 	bl	8001a3c <FusionVectorAdd>
 8002996:	eef0 6a40 	vmov.f32	s13, s0
 800299a:	eeb0 7a60 	vmov.f32	s14, s1
 800299e:	eef0 7a41 	vmov.f32	s15, s2
 80029a2:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 80029a6:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 80029aa:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80029b4:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 80029b8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80029bc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80029c0:	eef0 1a46 	vmov.f32	s3, s12
 80029c4:	eeb0 0a66 	vmov.f32	s0, s13
 80029c8:	eef0 0a47 	vmov.f32	s1, s14
 80029cc:	eeb0 1a67 	vmov.f32	s2, s15
 80029d0:	f7ff f8a2 	bl	8001b18 <FusionVectorMultiplyScalar>
 80029d4:	eef0 6a40 	vmov.f32	s13, s0
 80029d8:	eeb0 7a60 	vmov.f32	s14, s1
 80029dc:	eef0 7a41 	vmov.f32	s15, s2
 80029e0:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 80029e4:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 80029e8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 80029ec:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 80029f0:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 80029f4:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 80029f8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80029fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a00:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a04:	eef0 1a45 	vmov.f32	s3, s10
 8002a08:	eeb0 2a65 	vmov.f32	s4, s11
 8002a0c:	eef0 2a46 	vmov.f32	s5, s12
 8002a10:	eeb0 0a66 	vmov.f32	s0, s13
 8002a14:	eef0 0a47 	vmov.f32	s1, s14
 8002a18:	eeb0 1a67 	vmov.f32	s2, s15
 8002a1c:	f7ff f80e 	bl	8001a3c <FusionVectorAdd>
 8002a20:	eef0 6a40 	vmov.f32	s13, s0
 8002a24:	eeb0 7a60 	vmov.f32	s14, s1
 8002a28:	eef0 7a41 	vmov.f32	s15, s2
 8002a2c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002a30:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002a34:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002a38:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002a3c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a40:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a44:	edd7 1a01 	vldr	s3, [r7, #4]
 8002a48:	eeb0 0a66 	vmov.f32	s0, s13
 8002a4c:	eef0 0a47 	vmov.f32	s1, s14
 8002a50:	eeb0 1a67 	vmov.f32	s2, s15
 8002a54:	f7ff f860 	bl	8001b18 <FusionVectorMultiplyScalar>
 8002a58:	eef0 6a40 	vmov.f32	s13, s0
 8002a5c:	eeb0 7a60 	vmov.f32	s14, s1
 8002a60:	eef0 7a41 	vmov.f32	s15, s2
 8002a64:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8002a68:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8002a6c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8002a70:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8002a74:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8002a78:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a82:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a86:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a8e:	eeb0 2a64 	vmov.f32	s4, s9
 8002a92:	eef0 2a45 	vmov.f32	s5, s10
 8002a96:	eeb0 3a65 	vmov.f32	s6, s11
 8002a9a:	eeb0 0a46 	vmov.f32	s0, s12
 8002a9e:	eef0 0a66 	vmov.f32	s1, s13
 8002aa2:	eeb0 1a47 	vmov.f32	s2, s14
 8002aa6:	eef0 1a67 	vmov.f32	s3, s15
 8002aaa:	f7ff faee 	bl	800208a <FusionQuaternionMultiplyVector>
 8002aae:	eeb0 6a40 	vmov.f32	s12, s0
 8002ab2:	eef0 6a60 	vmov.f32	s13, s1
 8002ab6:	eeb0 7a41 	vmov.f32	s14, s2
 8002aba:	eef0 7a61 	vmov.f32	s15, s3
 8002abe:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002ac2:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002ac6:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002aca:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002ace:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002ad0:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002ad4:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002ad8:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002adc:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	ed93 6a05 	vldr	s12, [r3, #20]
 8002ae6:	edd3 6a06 	vldr	s13, [r3, #24]
 8002aea:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002af2:	eeb0 2a44 	vmov.f32	s4, s8
 8002af6:	eef0 2a64 	vmov.f32	s5, s9
 8002afa:	eeb0 3a45 	vmov.f32	s6, s10
 8002afe:	eef0 3a65 	vmov.f32	s7, s11
 8002b02:	eeb0 0a46 	vmov.f32	s0, s12
 8002b06:	eef0 0a66 	vmov.f32	s1, s13
 8002b0a:	eeb0 1a47 	vmov.f32	s2, s14
 8002b0e:	eef0 1a67 	vmov.f32	s3, s15
 8002b12:	f7ff f996 	bl	8001e42 <FusionQuaternionAdd>
 8002b16:	eeb0 6a40 	vmov.f32	s12, s0
 8002b1a:	eef0 6a60 	vmov.f32	s13, s1
 8002b1e:	eeb0 7a41 	vmov.f32	s14, s2
 8002b22:	eef0 7a61 	vmov.f32	s15, s3
 8002b26:	ed84 6a05 	vstr	s12, [r4, #20]
 8002b2a:	edc4 6a06 	vstr	s13, [r4, #24]
 8002b2e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002b32:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002b36:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	ed93 6a05 	vldr	s12, [r3, #20]
 8002b3e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b42:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b46:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b4a:	eeb0 0a46 	vmov.f32	s0, s12
 8002b4e:	eef0 0a66 	vmov.f32	s1, s13
 8002b52:	eeb0 1a47 	vmov.f32	s2, s14
 8002b56:	eef0 1a67 	vmov.f32	s3, s15
 8002b5a:	f7ff fb36 	bl	80021ca <FusionQuaternionNormalise>
 8002b5e:	eeb0 6a40 	vmov.f32	s12, s0
 8002b62:	eef0 6a60 	vmov.f32	s13, s1
 8002b66:	eeb0 7a41 	vmov.f32	s14, s2
 8002b6a:	eef0 7a61 	vmov.f32	s15, s3
 8002b6e:	ed84 6a05 	vstr	s12, [r4, #20]
 8002b72:	edc4 6a06 	vstr	s13, [r4, #24]
 8002b76:	ed84 7a07 	vstr	s14, [r4, #28]
 8002b7a:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002b7e:	bf00      	nop
 8002b80:	37fc      	adds	r7, #252	; 0xfc
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}

08002b86 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002b86:	b480      	push	{r7}
 8002b88:	b093      	sub	sp, #76	; 0x4c
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	dc02      	bgt.n	8002b9c <HalfGravity+0x16>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da03      	bge.n	8002ba2 <HalfGravity+0x1c>
 8002b9a:	e094      	b.n	8002cc6 <HalfGravity+0x140>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d048      	beq.n	8002c32 <HalfGravity+0xac>
 8002ba0:	e091      	b.n	8002cc6 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002bc6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bea:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002bee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c06:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002c1e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002c22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c30:	e052      	b.n	8002cd8 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c52:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002c56:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002c82:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	edd3 6a08 	vldr	s13, [r3, #32]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cae:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002cb2:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002cb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cba:	f107 0218 	add.w	r2, r7, #24
 8002cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cc4:	e008      	b.n	8002cd8 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	ee06 1a90 	vmov	s13, r1
 8002ce2:	ee07 2a10 	vmov	s14, r2
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eeb0 0a66 	vmov.f32	s0, s13
 8002cee:	eef0 0a47 	vmov.f32	s1, s14
 8002cf2:	eeb0 1a67 	vmov.f32	s2, s15
 8002cf6:	374c      	adds	r7, #76	; 0x4c
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002d00:	b480      	push	{r7}
 8002d02:	b097      	sub	sp, #92	; 0x5c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	f000 809a 	beq.w	8002e46 <HalfMagnetic+0x146>
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	f300 80e1 	bgt.w	8002eda <HalfMagnetic+0x1da>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HalfMagnetic+0x22>
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d048      	beq.n	8002db2 <HalfMagnetic+0xb2>
 8002d20:	e0db      	b.n	8002eda <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d5e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d72:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d76:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d9e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002da2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002da6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002db0:	e09c      	b.n	8002eec <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dda:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dde:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e02:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002e36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e44:	e052      	b.n	8002eec <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	edd3 6a05 	vldr	s13, [r3, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e6e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e9e:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ec6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002eca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ece:	f107 021c 	add.w	r2, r7, #28
 8002ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ed8:	e008      	b.n	8002eec <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002eec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002eee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef2:	ee06 1a90 	vmov	s13, r1
 8002ef6:	ee07 2a10 	vmov	s14, r2
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eeb0 0a66 	vmov.f32	s0, s13
 8002f02:	eef0 0a47 	vmov.f32	s1, s14
 8002f06:	eeb0 1a67 	vmov.f32	s2, s15
 8002f0a:	375c      	adds	r7, #92	; 0x5c
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002f14:	b490      	push	{r4, r7}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f107 0418 	add.w	r4, r7, #24
 8002f22:	3314      	adds	r3, #20
 8002f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f2a:	69b8      	ldr	r0, [r7, #24]
 8002f2c:	69f9      	ldr	r1, [r7, #28]
 8002f2e:	6a3a      	ldr	r2, [r7, #32]
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	ee06 0a10 	vmov	s12, r0
 8002f36:	ee06 1a90 	vmov	s13, r1
 8002f3a:	ee07 2a10 	vmov	s14, r2
 8002f3e:	ee07 3a90 	vmov	s15, r3
}
 8002f42:	eeb0 0a46 	vmov.f32	s0, s12
 8002f46:	eef0 0a66 	vmov.f32	s1, s13
 8002f4a:	eeb0 1a47 	vmov.f32	s2, s14
 8002f4e:	eef0 1a67 	vmov.f32	s3, s15
 8002f52:	3728      	adds	r7, #40	; 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc90      	pop	{r4, r7}
 8002f58:	4770      	bx	lr

08002f5a <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002f5a:	b590      	push	{r4, r7, lr}
 8002f5c:	b089      	sub	sp, #36	; 0x24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f86:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	edd3 6a08 	vldr	s13, [r3, #32]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb6:	eef0 0a67 	vmov.f32	s1, s15
 8002fba:	eeb0 0a46 	vmov.f32	s0, s12
 8002fbe:	f00c f887 	bl	800f0d0 <atan2f>
 8002fc2:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002fc6:	ed97 0a00 	vldr	s0, [r7]
 8002fca:	f7fe fcc3 	bl	8001954 <FusionDegreesToRadians>
 8002fce:	eeb0 7a40 	vmov.f32	s14, s0
 8002fd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002fe6:	ed97 0a06 	vldr	s0, [r7, #24]
 8002fea:	f00b ffbb 	bl	800ef64 <cosf>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002ff2:	edc7 7a02 	vstr	s15, [r7, #8]
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8003002:	ed97 0a06 	vldr	s0, [r7, #24]
 8003006:	f00b fff1 	bl	800efec <sinf>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8003012:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8003016:	687c      	ldr	r4, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	ed93 4a05 	vldr	s8, [r3, #20]
 800301e:	edd3 4a06 	vldr	s9, [r3, #24]
 8003022:	ed93 5a07 	vldr	s10, [r3, #28]
 8003026:	edd3 5a08 	vldr	s11, [r3, #32]
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003032:	ed97 7a04 	vldr	s14, [r7, #16]
 8003036:	edd7 7a05 	vldr	s15, [r7, #20]
 800303a:	eeb0 2a44 	vmov.f32	s4, s8
 800303e:	eef0 2a64 	vmov.f32	s5, s9
 8003042:	eeb0 3a45 	vmov.f32	s6, s10
 8003046:	eef0 3a65 	vmov.f32	s7, s11
 800304a:	eeb0 0a46 	vmov.f32	s0, s12
 800304e:	eef0 0a66 	vmov.f32	s1, s13
 8003052:	eeb0 1a47 	vmov.f32	s2, s14
 8003056:	eef0 1a67 	vmov.f32	s3, s15
 800305a:	f7fe ff54 	bl	8001f06 <FusionQuaternionMultiply>
 800305e:	eeb0 6a40 	vmov.f32	s12, s0
 8003062:	eef0 6a60 	vmov.f32	s13, s1
 8003066:	eeb0 7a41 	vmov.f32	s14, s2
 800306a:	eef0 7a61 	vmov.f32	s15, s3
 800306e:	ed84 6a05 	vstr	s12, [r4, #20]
 8003072:	edc4 6a06 	vstr	s13, [r4, #24]
 8003076:	ed84 7a07 	vstr	s14, [r4, #28]
 800307a:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
	...

08003088 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8003092:	edd7 7a01 	vldr	s15, [r7, #4]
 8003096:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80030ac <FusionRadiansToDegrees+0x24>
 800309a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800309e:	eeb0 0a67 	vmov.f32	s0, s15
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	42652ee0 	.word	0x42652ee0

080030b0 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	105a      	asrs	r2, r3, #1
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <FusionFastInverseSqrt+0x54>)
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80030c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80030cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80030d0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003108 <FusionFastInverseSqrt+0x58>
 80030d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80030d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e8:	eddf 6a08 	vldr	s13, [pc, #32]	; 800310c <FusionFastInverseSqrt+0x5c>
 80030ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030f0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80030f4:	eeb0 0a67 	vmov.f32	s0, s15
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	5f1f1412 	.word	0x5f1f1412
 8003108:	3f36d312 	.word	0x3f36d312
 800310c:	3fd851ff 	.word	0x3fd851ff

08003110 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	eef0 6a40 	vmov.f32	s13, s0
 800311a:	eeb0 7a60 	vmov.f32	s14, s1
 800311e:	eef0 7a41 	vmov.f32	s15, s2
 8003122:	edc7 6a01 	vstr	s13, [r7, #4]
 8003126:	ed87 7a02 	vstr	s14, [r7, #8]
 800312a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800312e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003132:	edd7 7a02 	vldr	s15, [r7, #8]
 8003136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313a:	edd7 7a03 	vldr	s15, [r7, #12]
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8003150:	b480      	push	{r7}
 8003152:	b08f      	sub	sp, #60	; 0x3c
 8003154:	af00      	add	r7, sp, #0
 8003156:	eef0 6a40 	vmov.f32	s13, s0
 800315a:	eeb0 7a60 	vmov.f32	s14, s1
 800315e:	eef0 7a41 	vmov.f32	s15, s2
 8003162:	edc7 1a04 	vstr	s3, [r7, #16]
 8003166:	edc7 6a05 	vstr	s13, [r7, #20]
 800316a:	ed87 7a06 	vstr	s14, [r7, #24]
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8003172:	ed97 7a05 	vldr	s14, [r7, #20]
 8003176:	edd7 7a04 	vldr	s15, [r7, #16]
 800317a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800317e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8003182:	ed97 7a06 	vldr	s14, [r7, #24]
 8003186:	edd7 7a04 	vldr	s15, [r7, #16]
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800318e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8003192:	ed97 7a07 	vldr	s14, [r7, #28]
 8003196:	edd7 7a04 	vldr	s15, [r7, #16]
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800319e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	f107 0220 	add.w	r2, r7, #32
 80031aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	ee06 1a90 	vmov	s13, r1
 80031ba:	ee07 2a10 	vmov	s14, r2
 80031be:	ee07 3a90 	vmov	s15, r3
}
 80031c2:	eeb0 0a66 	vmov.f32	s0, s13
 80031c6:	eef0 0a47 	vmov.f32	s1, s14
 80031ca:	eeb0 1a67 	vmov.f32	s2, s15
 80031ce:	373c      	adds	r7, #60	; 0x3c
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80031d8:	b480      	push	{r7}
 80031da:	b091      	sub	sp, #68	; 0x44
 80031dc:	af00      	add	r7, sp, #0
 80031de:	eeb0 5a40 	vmov.f32	s10, s0
 80031e2:	eef0 5a60 	vmov.f32	s11, s1
 80031e6:	eeb0 6a41 	vmov.f32	s12, s2
 80031ea:	eef0 6a61 	vmov.f32	s13, s3
 80031ee:	eeb0 7a42 	vmov.f32	s14, s4
 80031f2:	eef0 7a62 	vmov.f32	s15, s5
 80031f6:	ed87 5a07 	vstr	s10, [r7, #28]
 80031fa:	edc7 5a08 	vstr	s11, [r7, #32]
 80031fe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003202:	edc7 6a04 	vstr	s13, [r7, #16]
 8003206:	ed87 7a05 	vstr	s14, [r7, #20]
 800320a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800320e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003212:	edd7 7a04 	vldr	s15, [r7, #16]
 8003216:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800321a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800321e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003222:	edd7 7a05 	vldr	s15, [r7, #20]
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800322a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800322e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003232:	edd7 7a06 	vldr	s15, [r7, #24]
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800323a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800323e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003246:	ca07      	ldmia	r2, {r0, r1, r2}
 8003248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800324c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800324e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003252:	ee06 1a90 	vmov	s13, r1
 8003256:	ee07 2a10 	vmov	s14, r2
 800325a:	ee07 3a90 	vmov	s15, r3
}
 800325e:	eeb0 0a66 	vmov.f32	s0, s13
 8003262:	eef0 0a47 	vmov.f32	s1, s14
 8003266:	eeb0 1a67 	vmov.f32	s2, s15
 800326a:	3744      	adds	r7, #68	; 0x44
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003274:	b480      	push	{r7}
 8003276:	b091      	sub	sp, #68	; 0x44
 8003278:	af00      	add	r7, sp, #0
 800327a:	eeb0 5a40 	vmov.f32	s10, s0
 800327e:	eef0 5a60 	vmov.f32	s11, s1
 8003282:	eeb0 6a41 	vmov.f32	s12, s2
 8003286:	eef0 6a61 	vmov.f32	s13, s3
 800328a:	eeb0 7a42 	vmov.f32	s14, s4
 800328e:	eef0 7a62 	vmov.f32	s15, s5
 8003292:	ed87 5a07 	vstr	s10, [r7, #28]
 8003296:	edc7 5a08 	vstr	s11, [r7, #32]
 800329a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800329e:	edc7 6a04 	vstr	s13, [r7, #16]
 80032a2:	ed87 7a05 	vstr	s14, [r7, #20]
 80032a6:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80032aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80032ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80032ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80032be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80032c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80032ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80032ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80032d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80032da:	edd7 7a06 	vldr	s15, [r7, #24]
 80032de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80032e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80032ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f6:	edd7 6a08 	vldr	s13, [r7, #32]
 80032fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80032fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003302:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003306:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800330a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800330e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003312:	ca07      	ldmia	r2, {r0, r1, r2}
 8003314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003318:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800331a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331e:	ee06 1a90 	vmov	s13, r1
 8003322:	ee07 2a10 	vmov	s14, r2
 8003326:	ee07 3a90 	vmov	s15, r3
}
 800332a:	eeb0 0a66 	vmov.f32	s0, s13
 800332e:	eef0 0a47 	vmov.f32	s1, s14
 8003332:	eeb0 1a67 	vmov.f32	s2, s15
 8003336:	3744      	adds	r7, #68	; 0x44
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	eef0 6a40 	vmov.f32	s13, s0
 800334a:	eeb0 7a60 	vmov.f32	s14, s1
 800334e:	eef0 7a41 	vmov.f32	s15, s2
 8003352:	edc7 6a01 	vstr	s13, [r7, #4]
 8003356:	ed87 7a02 	vstr	s14, [r7, #8]
 800335a:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800335e:	ed97 5a01 	vldr	s10, [r7, #4]
 8003362:	edd7 5a02 	vldr	s11, [r7, #8]
 8003366:	ed97 6a03 	vldr	s12, [r7, #12]
 800336a:	edd7 6a01 	vldr	s13, [r7, #4]
 800336e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003372:	edd7 7a03 	vldr	s15, [r7, #12]
 8003376:	eef0 1a45 	vmov.f32	s3, s10
 800337a:	eeb0 2a65 	vmov.f32	s4, s11
 800337e:	eef0 2a46 	vmov.f32	s5, s12
 8003382:	eeb0 0a66 	vmov.f32	s0, s13
 8003386:	eef0 0a47 	vmov.f32	s1, s14
 800338a:	eeb0 1a67 	vmov.f32	s2, s15
 800338e:	f7ff ff23 	bl	80031d8 <FusionVectorHadamardProduct>
 8003392:	eef0 6a40 	vmov.f32	s13, s0
 8003396:	eeb0 7a60 	vmov.f32	s14, s1
 800339a:	eef0 7a41 	vmov.f32	s15, s2
 800339e:	edc7 6a05 	vstr	s13, [r7, #20]
 80033a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80033a6:	edc7 7a07 	vstr	s15, [r7, #28]
 80033aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80033ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80033b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80033b6:	eeb0 0a66 	vmov.f32	s0, s13
 80033ba:	eef0 0a47 	vmov.f32	s1, s14
 80033be:	eeb0 1a67 	vmov.f32	s2, s15
 80033c2:	f7ff fea5 	bl	8003110 <FusionVectorSum>
 80033c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80033ca:	eeb0 0a67 	vmov.f32	s0, s15
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	eef0 6a40 	vmov.f32	s13, s0
 80033de:	eeb0 7a60 	vmov.f32	s14, s1
 80033e2:	eef0 7a41 	vmov.f32	s15, s2
 80033e6:	edc7 6a05 	vstr	s13, [r7, #20]
 80033ea:	ed87 7a06 	vstr	s14, [r7, #24]
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80033f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80033f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80033fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80033fe:	eeb0 0a66 	vmov.f32	s0, s13
 8003402:	eef0 0a47 	vmov.f32	s1, s14
 8003406:	eeb0 1a67 	vmov.f32	s2, s15
 800340a:	f7ff ff99 	bl	8003340 <FusionVectorMagnitudeSquared>
 800340e:	eef0 7a40 	vmov.f32	s15, s0
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	f7ff fe4b 	bl	80030b0 <FusionFastInverseSqrt>
 800341a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800341e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003422:	ed97 7a06 	vldr	s14, [r7, #24]
 8003426:	edd7 7a07 	vldr	s15, [r7, #28]
 800342a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800342e:	eeb0 0a66 	vmov.f32	s0, s13
 8003432:	eef0 0a47 	vmov.f32	s1, s14
 8003436:	eeb0 1a67 	vmov.f32	s2, s15
 800343a:	f7ff fe89 	bl	8003150 <FusionVectorMultiplyScalar>
 800343e:	eef0 6a40 	vmov.f32	s13, s0
 8003442:	eeb0 7a60 	vmov.f32	s14, s1
 8003446:	eef0 7a41 	vmov.f32	s15, s2
 800344a:	edc7 6a08 	vstr	s13, [r7, #32]
 800344e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003452:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8003456:	6a39      	ldr	r1, [r7, #32]
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	ee06 1a90 	vmov	s13, r1
 8003460:	ee07 2a10 	vmov	s14, r2
 8003464:	ee07 3a90 	vmov	s15, r3
}
 8003468:	eeb0 0a66 	vmov.f32	s0, s13
 800346c:	eef0 0a47 	vmov.f32	s1, s14
 8003470:	eeb0 1a67 	vmov.f32	s2, s15
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b0b2      	sub	sp, #200	; 0xc8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	eeb0 5a40 	vmov.f32	s10, s0
 8003488:	eef0 5a60 	vmov.f32	s11, s1
 800348c:	eeb0 6a41 	vmov.f32	s12, s2
 8003490:	eef0 6a61 	vmov.f32	s13, s3
 8003494:	eeb0 7a42 	vmov.f32	s14, s4
 8003498:	eef0 7a62 	vmov.f32	s15, s5
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	ed87 5a04 	vstr	s10, [r7, #16]
 80034a2:	edc7 5a05 	vstr	s11, [r7, #20]
 80034a6:	ed87 6a06 	vstr	s12, [r7, #24]
 80034aa:	edc7 6a01 	vstr	s13, [r7, #4]
 80034ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80034b2:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	f000 814b 	beq.w	8003754 <FusionCompassCalculateHeading+0x2d8>
 80034be:	2b02      	cmp	r3, #2
 80034c0:	f300 81f7 	bgt.w	80038b2 <FusionCompassCalculateHeading+0x436>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <FusionCompassCalculateHeading+0x54>
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f000 8094 	beq.w	80035f6 <FusionCompassCalculateHeading+0x17a>
 80034ce:	e1f0      	b.n	80038b2 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80034d0:	ed97 5a01 	vldr	s10, [r7, #4]
 80034d4:	edd7 5a02 	vldr	s11, [r7, #8]
 80034d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80034dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80034e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80034e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034e8:	eef0 1a45 	vmov.f32	s3, s10
 80034ec:	eeb0 2a65 	vmov.f32	s4, s11
 80034f0:	eef0 2a46 	vmov.f32	s5, s12
 80034f4:	eeb0 0a66 	vmov.f32	s0, s13
 80034f8:	eef0 0a47 	vmov.f32	s1, s14
 80034fc:	eeb0 1a67 	vmov.f32	s2, s15
 8003500:	f7ff feb8 	bl	8003274 <FusionVectorCrossProduct>
 8003504:	eef0 6a40 	vmov.f32	s13, s0
 8003508:	eeb0 7a60 	vmov.f32	s14, s1
 800350c:	eef0 7a41 	vmov.f32	s15, s2
 8003510:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003514:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003518:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800351c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003520:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003524:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003528:	eeb0 0a66 	vmov.f32	s0, s13
 800352c:	eef0 0a47 	vmov.f32	s1, s14
 8003530:	eeb0 1a67 	vmov.f32	s2, s15
 8003534:	f7ff ff4e 	bl	80033d4 <FusionVectorNormalise>
 8003538:	eef0 6a40 	vmov.f32	s13, s0
 800353c:	eeb0 7a60 	vmov.f32	s14, s1
 8003540:	eef0 7a41 	vmov.f32	s15, s2
 8003544:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8003548:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 800354c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003550:	ed97 5a04 	vldr	s10, [r7, #16]
 8003554:	edd7 5a05 	vldr	s11, [r7, #20]
 8003558:	ed97 6a06 	vldr	s12, [r7, #24]
 800355c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8003560:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003564:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003568:	eef0 1a45 	vmov.f32	s3, s10
 800356c:	eeb0 2a65 	vmov.f32	s4, s11
 8003570:	eef0 2a46 	vmov.f32	s5, s12
 8003574:	eeb0 0a66 	vmov.f32	s0, s13
 8003578:	eef0 0a47 	vmov.f32	s1, s14
 800357c:	eeb0 1a67 	vmov.f32	s2, s15
 8003580:	f7ff fe78 	bl	8003274 <FusionVectorCrossProduct>
 8003584:	eef0 6a40 	vmov.f32	s13, s0
 8003588:	eeb0 7a60 	vmov.f32	s14, s1
 800358c:	eef0 7a41 	vmov.f32	s15, s2
 8003590:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 8003594:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 8003598:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 800359c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80035a0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80035a4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80035a8:	eeb0 0a66 	vmov.f32	s0, s13
 80035ac:	eef0 0a47 	vmov.f32	s1, s14
 80035b0:	eeb0 1a67 	vmov.f32	s2, s15
 80035b4:	f7ff ff0e 	bl	80033d4 <FusionVectorNormalise>
 80035b8:	eef0 6a40 	vmov.f32	s13, s0
 80035bc:	eeb0 7a60 	vmov.f32	s14, s1
 80035c0:	eef0 7a41 	vmov.f32	s15, s2
 80035c4:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 80035c8:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 80035cc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80035d0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80035d4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80035d8:	eef0 0a47 	vmov.f32	s1, s14
 80035dc:	eeb0 0a67 	vmov.f32	s0, s15
 80035e0:	f00b fd76 	bl	800f0d0 <atan2f>
 80035e4:	eef0 7a40 	vmov.f32	s15, s0
 80035e8:	eeb0 0a67 	vmov.f32	s0, s15
 80035ec:	f7ff fd4c 	bl	8003088 <FusionRadiansToDegrees>
 80035f0:	eef0 7a40 	vmov.f32	s15, s0
 80035f4:	e15f      	b.n	80038b6 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80035f6:	ed97 5a01 	vldr	s10, [r7, #4]
 80035fa:	edd7 5a02 	vldr	s11, [r7, #8]
 80035fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003602:	edd7 6a04 	vldr	s13, [r7, #16]
 8003606:	ed97 7a05 	vldr	s14, [r7, #20]
 800360a:	edd7 7a06 	vldr	s15, [r7, #24]
 800360e:	eef0 1a45 	vmov.f32	s3, s10
 8003612:	eeb0 2a65 	vmov.f32	s4, s11
 8003616:	eef0 2a46 	vmov.f32	s5, s12
 800361a:	eeb0 0a66 	vmov.f32	s0, s13
 800361e:	eef0 0a47 	vmov.f32	s1, s14
 8003622:	eeb0 1a67 	vmov.f32	s2, s15
 8003626:	f7ff fe25 	bl	8003274 <FusionVectorCrossProduct>
 800362a:	eef0 6a40 	vmov.f32	s13, s0
 800362e:	eeb0 7a60 	vmov.f32	s14, s1
 8003632:	eef0 7a41 	vmov.f32	s15, s2
 8003636:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800363a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800363e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8003642:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003646:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800364a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800364e:	eeb0 0a66 	vmov.f32	s0, s13
 8003652:	eef0 0a47 	vmov.f32	s1, s14
 8003656:	eeb0 1a67 	vmov.f32	s2, s15
 800365a:	f7ff febb 	bl	80033d4 <FusionVectorNormalise>
 800365e:	eef0 6a40 	vmov.f32	s13, s0
 8003662:	eeb0 7a60 	vmov.f32	s14, s1
 8003666:	eef0 7a41 	vmov.f32	s15, s2
 800366a:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800366e:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8003672:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003676:	ed97 5a04 	vldr	s10, [r7, #16]
 800367a:	edd7 5a05 	vldr	s11, [r7, #20]
 800367e:	ed97 6a06 	vldr	s12, [r7, #24]
 8003682:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003686:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800368a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800368e:	eef0 1a45 	vmov.f32	s3, s10
 8003692:	eeb0 2a65 	vmov.f32	s4, s11
 8003696:	eef0 2a46 	vmov.f32	s5, s12
 800369a:	eeb0 0a66 	vmov.f32	s0, s13
 800369e:	eef0 0a47 	vmov.f32	s1, s14
 80036a2:	eeb0 1a67 	vmov.f32	s2, s15
 80036a6:	f7ff fde5 	bl	8003274 <FusionVectorCrossProduct>
 80036aa:	eef0 6a40 	vmov.f32	s13, s0
 80036ae:	eeb0 7a60 	vmov.f32	s14, s1
 80036b2:	eef0 7a41 	vmov.f32	s15, s2
 80036b6:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 80036ba:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 80036be:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 80036c2:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80036c6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80036ca:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80036ce:	eeb0 0a66 	vmov.f32	s0, s13
 80036d2:	eef0 0a47 	vmov.f32	s1, s14
 80036d6:	eeb0 1a67 	vmov.f32	s2, s15
 80036da:	f7ff fe7b 	bl	80033d4 <FusionVectorNormalise>
 80036de:	eef0 6a40 	vmov.f32	s13, s0
 80036e2:	eeb0 7a60 	vmov.f32	s14, s1
 80036e6:	eef0 7a41 	vmov.f32	s15, s2
 80036ea:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 80036ee:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 80036f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 80036f6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80036fa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80036fe:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003702:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003706:	eeb0 0a66 	vmov.f32	s0, s13
 800370a:	eef0 0a47 	vmov.f32	s1, s14
 800370e:	eeb0 1a67 	vmov.f32	s2, s15
 8003712:	f7ff fd1d 	bl	8003150 <FusionVectorMultiplyScalar>
 8003716:	eef0 6a40 	vmov.f32	s13, s0
 800371a:	eeb0 7a60 	vmov.f32	s14, s1
 800371e:	eef0 7a41 	vmov.f32	s15, s2
 8003722:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003726:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800372a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800372e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003732:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003736:	eef0 0a47 	vmov.f32	s1, s14
 800373a:	eeb0 0a67 	vmov.f32	s0, s15
 800373e:	f00b fcc7 	bl	800f0d0 <atan2f>
 8003742:	eef0 7a40 	vmov.f32	s15, s0
 8003746:	eeb0 0a67 	vmov.f32	s0, s15
 800374a:	f7ff fc9d 	bl	8003088 <FusionRadiansToDegrees>
 800374e:	eef0 7a40 	vmov.f32	s15, s0
 8003752:	e0b0      	b.n	80038b6 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8003754:	edd7 6a04 	vldr	s13, [r7, #16]
 8003758:	ed97 7a05 	vldr	s14, [r7, #20]
 800375c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003760:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003764:	eeb0 0a66 	vmov.f32	s0, s13
 8003768:	eef0 0a47 	vmov.f32	s1, s14
 800376c:	eeb0 1a67 	vmov.f32	s2, s15
 8003770:	f7ff fcee 	bl	8003150 <FusionVectorMultiplyScalar>
 8003774:	eef0 6a40 	vmov.f32	s13, s0
 8003778:	eeb0 7a60 	vmov.f32	s14, s1
 800377c:	eef0 7a41 	vmov.f32	s15, s2
 8003780:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8003784:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8003788:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 800378c:	ed97 5a01 	vldr	s10, [r7, #4]
 8003790:	edd7 5a02 	vldr	s11, [r7, #8]
 8003794:	ed97 6a03 	vldr	s12, [r7, #12]
 8003798:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800379c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80037a4:	eef0 1a45 	vmov.f32	s3, s10
 80037a8:	eeb0 2a65 	vmov.f32	s4, s11
 80037ac:	eef0 2a46 	vmov.f32	s5, s12
 80037b0:	eeb0 0a66 	vmov.f32	s0, s13
 80037b4:	eef0 0a47 	vmov.f32	s1, s14
 80037b8:	eeb0 1a67 	vmov.f32	s2, s15
 80037bc:	f7ff fd5a 	bl	8003274 <FusionVectorCrossProduct>
 80037c0:	eef0 6a40 	vmov.f32	s13, s0
 80037c4:	eeb0 7a60 	vmov.f32	s14, s1
 80037c8:	eef0 7a41 	vmov.f32	s15, s2
 80037cc:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 80037d0:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 80037d4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 80037d8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80037dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80037e0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80037e4:	eeb0 0a66 	vmov.f32	s0, s13
 80037e8:	eef0 0a47 	vmov.f32	s1, s14
 80037ec:	eeb0 1a67 	vmov.f32	s2, s15
 80037f0:	f7ff fdf0 	bl	80033d4 <FusionVectorNormalise>
 80037f4:	eef0 6a40 	vmov.f32	s13, s0
 80037f8:	eeb0 7a60 	vmov.f32	s14, s1
 80037fc:	eef0 7a41 	vmov.f32	s15, s2
 8003800:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003804:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003808:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 800380c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003810:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003814:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8003818:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800381c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003820:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003824:	eef0 1a45 	vmov.f32	s3, s10
 8003828:	eeb0 2a65 	vmov.f32	s4, s11
 800382c:	eef0 2a46 	vmov.f32	s5, s12
 8003830:	eeb0 0a66 	vmov.f32	s0, s13
 8003834:	eef0 0a47 	vmov.f32	s1, s14
 8003838:	eeb0 1a67 	vmov.f32	s2, s15
 800383c:	f7ff fd1a 	bl	8003274 <FusionVectorCrossProduct>
 8003840:	eef0 6a40 	vmov.f32	s13, s0
 8003844:	eeb0 7a60 	vmov.f32	s14, s1
 8003848:	eef0 7a41 	vmov.f32	s15, s2
 800384c:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8003850:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8003854:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8003858:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800385c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003860:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003864:	eeb0 0a66 	vmov.f32	s0, s13
 8003868:	eef0 0a47 	vmov.f32	s1, s14
 800386c:	eeb0 1a67 	vmov.f32	s2, s15
 8003870:	f7ff fdb0 	bl	80033d4 <FusionVectorNormalise>
 8003874:	eef0 6a40 	vmov.f32	s13, s0
 8003878:	eeb0 7a60 	vmov.f32	s14, s1
 800387c:	eef0 7a41 	vmov.f32	s15, s2
 8003880:	edc7 6a08 	vstr	s13, [r7, #32]
 8003884:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003888:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 800388c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003890:	ed97 7a08 	vldr	s14, [r7, #32]
 8003894:	eef0 0a47 	vmov.f32	s1, s14
 8003898:	eeb0 0a67 	vmov.f32	s0, s15
 800389c:	f00b fc18 	bl	800f0d0 <atan2f>
 80038a0:	eef0 7a40 	vmov.f32	s15, s0
 80038a4:	eeb0 0a67 	vmov.f32	s0, s15
 80038a8:	f7ff fbee 	bl	8003088 <FusionRadiansToDegrees>
 80038ac:	eef0 7a40 	vmov.f32	s15, s0
 80038b0:	e001      	b.n	80038b6 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 80038b2:	eddf 7a03 	vldr	s15, [pc, #12]	; 80038c0 <FusionCompassCalculateHeading+0x444>
}
 80038b6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ba:	37c8      	adds	r7, #200	; 0xc8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00000000 	.word	0x00000000

080038c4 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 80038c4:	b480      	push	{r7}
 80038c6:	b091      	sub	sp, #68	; 0x44
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	eeb0 5a40 	vmov.f32	s10, s0
 80038ce:	eef0 5a60 	vmov.f32	s11, s1
 80038d2:	eeb0 6a41 	vmov.f32	s12, s2
 80038d6:	eef0 6a61 	vmov.f32	s13, s3
 80038da:	eeb0 7a42 	vmov.f32	s14, s4
 80038de:	eef0 7a62 	vmov.f32	s15, s5
 80038e2:	ed87 5a07 	vstr	s10, [r7, #28]
 80038e6:	edc7 5a08 	vstr	s11, [r7, #32]
 80038ea:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80038ee:	edc7 6a04 	vstr	s13, [r7, #16]
 80038f2:	ed87 7a05 	vstr	s14, [r7, #20]
 80038f6:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80038fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80038fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003902:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003906:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800390a:	ed97 7a08 	vldr	s14, [r7, #32]
 800390e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003912:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003916:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800391a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800391e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003922:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003926:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800392a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800392e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003932:	ca07      	ldmia	r2, {r0, r1, r2}
 8003934:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003938:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800393a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	ee06 1a90 	vmov	s13, r1
 8003942:	ee07 2a10 	vmov	s14, r2
 8003946:	ee07 3a90 	vmov	s15, r3
}
 800394a:	eeb0 0a66 	vmov.f32	s0, s13
 800394e:	eef0 0a47 	vmov.f32	s1, s14
 8003952:	eeb0 1a67 	vmov.f32	s2, s15
 8003956:	3744      	adds	r7, #68	; 0x44
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8003960:	b480      	push	{r7}
 8003962:	b091      	sub	sp, #68	; 0x44
 8003964:	af00      	add	r7, sp, #0
 8003966:	eeb0 5a40 	vmov.f32	s10, s0
 800396a:	eef0 5a60 	vmov.f32	s11, s1
 800396e:	eeb0 6a41 	vmov.f32	s12, s2
 8003972:	eef0 6a61 	vmov.f32	s13, s3
 8003976:	eeb0 7a42 	vmov.f32	s14, s4
 800397a:	eef0 7a62 	vmov.f32	s15, s5
 800397e:	ed87 5a07 	vstr	s10, [r7, #28]
 8003982:	edc7 5a08 	vstr	s11, [r7, #32]
 8003986:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800398a:	edc7 6a04 	vstr	s13, [r7, #16]
 800398e:	ed87 7a05 	vstr	s14, [r7, #20]
 8003992:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 8003996:	ed97 7a07 	vldr	s14, [r7, #28]
 800399a:	edd7 7a04 	vldr	s15, [r7, #16]
 800399e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 80039a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80039aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ae:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 80039b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80039ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80039be:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80039c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80039d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039da:	ee06 1a90 	vmov	s13, r1
 80039de:	ee07 2a10 	vmov	s14, r2
 80039e2:	ee07 3a90 	vmov	s15, r3
}
 80039e6:	eeb0 0a66 	vmov.f32	s0, s13
 80039ea:	eef0 0a47 	vmov.f32	s1, s14
 80039ee:	eeb0 1a67 	vmov.f32	s2, s15
 80039f2:	3744      	adds	r7, #68	; 0x44
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80039fc:	b480      	push	{r7}
 80039fe:	b08f      	sub	sp, #60	; 0x3c
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	eef0 6a40 	vmov.f32	s13, s0
 8003a06:	eeb0 7a60 	vmov.f32	s14, s1
 8003a0a:	eef0 7a41 	vmov.f32	s15, s2
 8003a0e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003a12:	edc7 6a05 	vstr	s13, [r7, #20]
 8003a16:	ed87 7a06 	vstr	s14, [r7, #24]
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8003a1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003a2a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8003a2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003a3a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8003a3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003a4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8003a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a52:	f107 0220 	add.w	r2, r7, #32
 8003a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	ee06 1a90 	vmov	s13, r1
 8003a66:	ee07 2a10 	vmov	s14, r2
 8003a6a:	ee07 3a90 	vmov	s15, r3
}
 8003a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a72:	eef0 0a47 	vmov.f32	s1, s14
 8003a76:	eeb0 1a67 	vmov.f32	s2, s15
 8003a7a:	373c      	adds	r7, #60	; 0x3c
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	ee07 3a90 	vmov	s15, r3
 8003a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003ae4 <FusionOffsetInitialise+0x60>
 8003aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	441a      	add	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	615a      	str	r2, [r3, #20]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	3e00adfd 	.word	0x3e00adfd

08003ae8 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b08f      	sub	sp, #60	; 0x3c
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	61f8      	str	r0, [r7, #28]
 8003af0:	eef0 6a40 	vmov.f32	s13, s0
 8003af4:	eeb0 7a60 	vmov.f32	s14, s1
 8003af8:	eef0 7a41 	vmov.f32	s15, s2
 8003afc:	edc7 6a04 	vstr	s13, [r7, #16]
 8003b00:	ed87 7a05 	vstr	s14, [r7, #20]
 8003b04:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	ed93 5a03 	vldr	s10, [r3, #12]
 8003b0e:	edd3 5a04 	vldr	s11, [r3, #16]
 8003b12:	ed93 6a05 	vldr	s12, [r3, #20]
 8003b16:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b22:	eef0 1a45 	vmov.f32	s3, s10
 8003b26:	eeb0 2a65 	vmov.f32	s4, s11
 8003b2a:	eef0 2a46 	vmov.f32	s5, s12
 8003b2e:	eeb0 0a66 	vmov.f32	s0, s13
 8003b32:	eef0 0a47 	vmov.f32	s1, s14
 8003b36:	eeb0 1a67 	vmov.f32	s2, s15
 8003b3a:	f7ff ff11 	bl	8003960 <FusionVectorSubtract>
 8003b3e:	eef0 6a40 	vmov.f32	s13, s0
 8003b42:	eeb0 7a60 	vmov.f32	s14, s1
 8003b46:	eef0 7a41 	vmov.f32	s15, s2
 8003b4a:	edc7 6a04 	vstr	s13, [r7, #16]
 8003b4e:	ed87 7a05 	vstr	s14, [r7, #20]
 8003b52:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8003b56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b5a:	eef0 7ae7 	vabs.f32	s15, s15
 8003b5e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	dc15      	bgt.n	8003b98 <FusionOffsetUpdate+0xb0>
 8003b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b70:	eef0 7ae7 	vabs.f32	s15, s15
 8003b74:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	dc0a      	bgt.n	8003b98 <FusionOffsetUpdate+0xb0>
 8003b82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b86:	eef0 7ae7 	vabs.f32	s15, s15
 8003b8a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	dd0a      	ble.n	8003bae <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003b9e:	f107 0320 	add.w	r3, r7, #32
 8003ba2:	f107 0210 	add.w	r2, r7, #16
 8003ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ba8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bac:	e060      	b.n	8003c70 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d20c      	bcs.n	8003bd4 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003bc4:	f107 0320 	add.w	r3, r7, #32
 8003bc8:	f107 0210 	add.w	r2, r7, #16
 8003bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bd2:	e04d      	b.n	8003c70 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	ed93 6a00 	vldr	s12, [r3]
 8003bda:	edd7 6a04 	vldr	s13, [r7, #16]
 8003bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8003be2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003be6:	eef0 1a46 	vmov.f32	s3, s12
 8003bea:	eeb0 0a66 	vmov.f32	s0, s13
 8003bee:	eef0 0a47 	vmov.f32	s1, s14
 8003bf2:	eeb0 1a67 	vmov.f32	s2, s15
 8003bf6:	f7ff ff01 	bl	80039fc <FusionVectorMultiplyScalar>
 8003bfa:	eef0 6a40 	vmov.f32	s13, s0
 8003bfe:	eeb0 7a60 	vmov.f32	s14, s1
 8003c02:	eef0 7a41 	vmov.f32	s15, s2
 8003c06:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003c0a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003c0e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003c12:	69fc      	ldr	r4, [r7, #28]
 8003c14:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8003c18:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8003c1c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	edd3 6a03 	vldr	s13, [r3, #12]
 8003c26:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c2e:	eef0 1a45 	vmov.f32	s3, s10
 8003c32:	eeb0 2a65 	vmov.f32	s4, s11
 8003c36:	eef0 2a46 	vmov.f32	s5, s12
 8003c3a:	eeb0 0a66 	vmov.f32	s0, s13
 8003c3e:	eef0 0a47 	vmov.f32	s1, s14
 8003c42:	eeb0 1a67 	vmov.f32	s2, s15
 8003c46:	f7ff fe3d 	bl	80038c4 <FusionVectorAdd>
 8003c4a:	eef0 6a40 	vmov.f32	s13, s0
 8003c4e:	eeb0 7a60 	vmov.f32	s14, s1
 8003c52:	eef0 7a41 	vmov.f32	s15, s2
 8003c56:	edc4 6a03 	vstr	s13, [r4, #12]
 8003c5a:	ed84 7a04 	vstr	s14, [r4, #16]
 8003c5e:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003c62:	f107 0320 	add.w	r3, r7, #32
 8003c66:	f107 0210 	add.w	r2, r7, #16
 8003c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003c70:	6a39      	ldr	r1, [r7, #32]
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	ee06 1a90 	vmov	s13, r1
 8003c7a:	ee07 2a10 	vmov	s14, r2
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eeb0 0a66 	vmov.f32	s0, s13
 8003c86:	eef0 0a47 	vmov.f32	s1, s14
 8003c8a:	eeb0 1a67 	vmov.f32	s2, s15
 8003c8e:	373c      	adds	r7, #60	; 0x3c
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}

08003c94 <tick_gyro>:
I2C_HandleTypeDef hi2c2;

static void debugPrintMEMS(mems_data_t *mems_data);


void tick_gyro(mems_data_t * mems_data){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8fb 	bl	8003e98 <gyro_read>
    lsm6_acc_read(mems_data);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9fe 	bl	80040a4 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa9d 	bl	80041e8 <lis3_magn_read>
    osDelay(5);
 8003cae:	2005      	movs	r0, #5
 8003cb0:	f005 fb16 	bl	80092e0 <osDelay>
    debugPrintMEMS(mems_data);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fb35 	bl	8004324 <debugPrintMEMS>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <lsm6_bus_init+0x78>)
 8003ccc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <lsm6_bus_init+0x7c>)
 8003cd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <lsm6_bus_init+0x74>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <lsm6_bus_init+0x74>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <lsm6_bus_init+0x74>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003cfe:	480e      	ldr	r0, [pc, #56]	; (8003d38 <lsm6_bus_init+0x74>)
 8003d00:	f001 fd65 	bl	80057ce <HAL_I2C_Init>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <lsm6_bus_init+0x4a>
  {
    return 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e012      	b.n	8003d34 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4809      	ldr	r0, [pc, #36]	; (8003d38 <lsm6_bus_init+0x74>)
 8003d12:	f002 fad9 	bl	80062c8 <HAL_I2CEx_ConfigAnalogFilter>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <lsm6_bus_init+0x5c>
  {
    return 2;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e009      	b.n	8003d34 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003d20:	2100      	movs	r1, #0
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <lsm6_bus_init+0x74>)
 8003d24:	f002 fb1b 	bl	800635e <HAL_I2CEx_ConfigDigitalFilter>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <lsm6_bus_init+0x6e>
  {
    return 3;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e000      	b.n	8003d34 <lsm6_bus_init+0x70>
  }
  return 0;
 8003d32:	2300      	movs	r3, #0

}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000280 	.word	0x20000280
 8003d3c:	40005800 	.word	0x40005800
 8003d40:	00b03fdb 	.word	0x00b03fdb

08003d44 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 8003d4a:	2350      	movs	r3, #80	; 0x50
 8003d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 8003d4e:	2344      	movs	r3, #68	; 0x44
 8003d50:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 8003d52:	2314      	movs	r3, #20
 8003d54:	9302      	str	r3, [sp, #8]
 8003d56:	2301      	movs	r3, #1
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	1dfb      	adds	r3, r7, #7
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	2211      	movs	r2, #17
 8003d62:	21d4      	movs	r1, #212	; 0xd4
 8003d64:	4809      	ldr	r0, [pc, #36]	; (8003d8c <gyro_init+0x48>)
 8003d66:	f001 fdc1 	bl	80058ec <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8003d6a:	2314      	movs	r3, #20
 8003d6c:	9302      	str	r3, [sp, #8]
 8003d6e:	2301      	movs	r3, #1
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	1dbb      	adds	r3, r7, #6
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2301      	movs	r3, #1
 8003d78:	2212      	movs	r2, #18
 8003d7a:	21d4      	movs	r1, #212	; 0xd4
 8003d7c:	4803      	ldr	r0, [pc, #12]	; (8003d8c <gyro_init+0x48>)
 8003d7e:	f001 fdb5 	bl	80058ec <HAL_I2C_Mem_Write>
 8003d82:	4603      	mov	r3, r0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000280 	.word	0x20000280

08003d90 <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8003d96:	2350      	movs	r3, #80	; 0x50
 8003d98:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8003d9e:	2314      	movs	r3, #20
 8003da0:	9302      	str	r3, [sp, #8]
 8003da2:	2301      	movs	r3, #1
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2301      	movs	r3, #1
 8003dac:	2210      	movs	r2, #16
 8003dae:	21d4      	movs	r1, #212	; 0xd4
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <lsm6_acc_init+0x48>)
 8003db2:	f001 fd9b 	bl	80058ec <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8003db6:	2314      	movs	r3, #20
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	1dbb      	adds	r3, r7, #6
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	2219      	movs	r2, #25
 8003dc6:	21d4      	movs	r1, #212	; 0xd4
 8003dc8:	4803      	ldr	r0, [pc, #12]	; (8003dd8 <lsm6_acc_init+0x48>)
 8003dca:	f001 fd8f 	bl	80058ec <HAL_I2C_Mem_Write>
 8003dce:	4603      	mov	r3, r0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000280 	.word	0x20000280

08003ddc <magn_init>:

HAL_StatusTypeDef magn_init(void){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8003de6:	2342      	movs	r3, #66	; 0x42
 8003de8:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 8003dea:	2300      	movs	r3, #0
 8003dec:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 8003dee:	2308      	movs	r3, #8
 8003df0:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8003df6:	2314      	movs	r3, #20
 8003df8:	9302      	str	r3, [sp, #8]
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	1dbb      	adds	r3, r7, #6
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2301      	movs	r3, #1
 8003e04:	2220      	movs	r2, #32
 8003e06:	213c      	movs	r1, #60	; 0x3c
 8003e08:	4821      	ldr	r0, [pc, #132]	; (8003e90 <magn_init+0xb4>)
 8003e0a:	f001 fd6f 	bl	80058ec <HAL_I2C_Mem_Write>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <magn_init+0x40>
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	e034      	b.n	8003e86 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8003e1c:	2314      	movs	r3, #20
 8003e1e:	9302      	str	r3, [sp, #8]
 8003e20:	2301      	movs	r3, #1
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	1d7b      	adds	r3, r7, #5
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2301      	movs	r3, #1
 8003e2a:	2222      	movs	r2, #34	; 0x22
 8003e2c:	213c      	movs	r1, #60	; 0x3c
 8003e2e:	4818      	ldr	r0, [pc, #96]	; (8003e90 <magn_init+0xb4>)
 8003e30:	f001 fd5c 	bl	80058ec <HAL_I2C_Mem_Write>
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <magn_init+0x66>
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	e021      	b.n	8003e86 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 20);
 8003e42:	2314      	movs	r3, #20
 8003e44:	9302      	str	r3, [sp, #8]
 8003e46:	2301      	movs	r3, #1
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2301      	movs	r3, #1
 8003e50:	2223      	movs	r2, #35	; 0x23
 8003e52:	213c      	movs	r1, #60	; 0x3c
 8003e54:	480e      	ldr	r0, [pc, #56]	; (8003e90 <magn_init+0xb4>)
 8003e56:	f001 fd49 	bl	80058ec <HAL_I2C_Mem_Write>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <magn_init+0x8c>
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	e00e      	b.n	8003e86 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 20);
 8003e68:	2314      	movs	r3, #20
 8003e6a:	9302      	str	r3, [sp, #8]
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	1cfb      	adds	r3, r7, #3
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2301      	movs	r3, #1
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	213c      	movs	r1, #60	; 0x3c
 8003e7a:	4805      	ldr	r0, [pc, #20]	; (8003e90 <magn_init+0xb4>)
 8003e7c:	f001 fd36 	bl	80058ec <HAL_I2C_Mem_Write>
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
    return res;
 8003e84:	79fb      	ldrb	r3, [r7, #7]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000280 	.word	0x20000280
 8003e94:	00000000 	.word	0x00000000

08003e98 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	6078      	str	r0, [r7, #4]
	uint8_t x_l, x_h = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	75bb      	strb	r3, [r7, #22]
	uint8_t y_l, y_h = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	753b      	strb	r3, [r7, #20]
	uint8_t z_l, z_h = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	74bb      	strb	r3, [r7, #18]
	uint8_t tm0,tm1,tm2,tm3;
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, 1, &x_l, 1, 30);
 8003eb0:	231e      	movs	r3, #30
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	f107 0317 	add.w	r3, r7, #23
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	2222      	movs	r2, #34	; 0x22
 8003ec2:	21d4      	movs	r1, #212	; 0xd4
 8003ec4:	4876      	ldr	r0, [pc, #472]	; (80040a0 <gyro_read+0x208>)
 8003ec6:	f001 fe25 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_H_G, 1, &x_h, 1, 30);
 8003eca:	231e      	movs	r3, #30
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	2301      	movs	r3, #1
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	f107 0316 	add.w	r3, r7, #22
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	2223      	movs	r2, #35	; 0x23
 8003edc:	21d4      	movs	r1, #212	; 0xd4
 8003ede:	4870      	ldr	r0, [pc, #448]	; (80040a0 <gyro_read+0x208>)
 8003ee0:	f001 fe18 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTY_L_G, 1, &y_l, 1, 30);
 8003ee4:	231e      	movs	r3, #30
 8003ee6:	9302      	str	r3, [sp, #8]
 8003ee8:	2301      	movs	r3, #1
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	f107 0315 	add.w	r3, r7, #21
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	2224      	movs	r2, #36	; 0x24
 8003ef6:	21d4      	movs	r1, #212	; 0xd4
 8003ef8:	4869      	ldr	r0, [pc, #420]	; (80040a0 <gyro_read+0x208>)
 8003efa:	f001 fe0b 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTY_H_G, 1, &y_h, 1, 30);
 8003efe:	231e      	movs	r3, #30
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	2301      	movs	r3, #1
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2225      	movs	r2, #37	; 0x25
 8003f10:	21d4      	movs	r1, #212	; 0xd4
 8003f12:	4863      	ldr	r0, [pc, #396]	; (80040a0 <gyro_read+0x208>)
 8003f14:	f001 fdfe 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTZ_L_G, 1, &z_l, 1, 30);
 8003f18:	231e      	movs	r3, #30
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f107 0313 	add.w	r3, r7, #19
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2301      	movs	r3, #1
 8003f28:	2226      	movs	r2, #38	; 0x26
 8003f2a:	21d4      	movs	r1, #212	; 0xd4
 8003f2c:	485c      	ldr	r0, [pc, #368]	; (80040a0 <gyro_read+0x208>)
 8003f2e:	f001 fdf1 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTZ_H_G, 1, &z_h, 1, 30);
 8003f32:	231e      	movs	r3, #30
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	2301      	movs	r3, #1
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	f107 0312 	add.w	r3, r7, #18
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2301      	movs	r3, #1
 8003f42:	2227      	movs	r2, #39	; 0x27
 8003f44:	21d4      	movs	r1, #212	; 0xd4
 8003f46:	4856      	ldr	r0, [pc, #344]	; (80040a0 <gyro_read+0x208>)
 8003f48:	f001 fde4 	bl	8005b14 <HAL_I2C_Mem_Read>
    /*Timestamp Read*/
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, 1, &tm0, 1, 30);
 8003f4c:	231e      	movs	r3, #30
 8003f4e:	9302      	str	r3, [sp, #8]
 8003f50:	2301      	movs	r3, #1
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f107 0311 	add.w	r3, r7, #17
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2240      	movs	r2, #64	; 0x40
 8003f5e:	21d4      	movs	r1, #212	; 0xd4
 8003f60:	484f      	ldr	r0, [pc, #316]	; (80040a0 <gyro_read+0x208>)
 8003f62:	f001 fdd7 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP1, 1, &tm1, 1, 30);
 8003f66:	231e      	movs	r3, #30
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	f107 0310 	add.w	r3, r7, #16
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2301      	movs	r3, #1
 8003f76:	2241      	movs	r2, #65	; 0x41
 8003f78:	21d4      	movs	r1, #212	; 0xd4
 8003f7a:	4849      	ldr	r0, [pc, #292]	; (80040a0 <gyro_read+0x208>)
 8003f7c:	f001 fdca 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP2, 1, &tm2, 1, 30);
 8003f80:	231e      	movs	r3, #30
 8003f82:	9302      	str	r3, [sp, #8]
 8003f84:	2301      	movs	r3, #1
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	f107 030f 	add.w	r3, r7, #15
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2301      	movs	r3, #1
 8003f90:	2242      	movs	r2, #66	; 0x42
 8003f92:	21d4      	movs	r1, #212	; 0xd4
 8003f94:	4842      	ldr	r0, [pc, #264]	; (80040a0 <gyro_read+0x208>)
 8003f96:	f001 fdbd 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP3, 1, &tm3, 1, 30);
 8003f9a:	231e      	movs	r3, #30
 8003f9c:	9302      	str	r3, [sp, #8]
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	f107 030e 	add.w	r3, r7, #14
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	2243      	movs	r2, #67	; 0x43
 8003fac:	21d4      	movs	r1, #212	; 0xd4
 8003fae:	483c      	ldr	r0, [pc, #240]	; (80040a0 <gyro_read+0x208>)
 8003fb0:	f001 fdb0 	bl	8005b14 <HAL_I2C_Mem_Read>

    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP3, 1, &tm3, 1, 30);
 8003fb4:	231e      	movs	r3, #30
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	2301      	movs	r3, #1
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	f107 030e 	add.w	r3, r7, #14
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	2243      	movs	r2, #67	; 0x43
 8003fc6:	21d4      	movs	r1, #212	; 0xd4
 8003fc8:	4835      	ldr	r0, [pc, #212]	; (80040a0 <gyro_read+0x208>)
 8003fca:	f001 fda3 	bl	8005b14 <HAL_I2C_Mem_Read>


    gyro_x = ((int16_t)((x_h << 8) | x_l));
 8003fce:	7dbb      	ldrb	r3, [r7, #22]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	b21a      	sxth	r2, r3
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	b21b      	sxth	r3, r3
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((y_h << 8) | y_l));
 8003fdc:	7d3b      	ldrb	r3, [r7, #20]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	b21a      	sxth	r2, r3
 8003fe2:	7d7b      	ldrb	r3, [r7, #21]
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((z_h << 8) | z_l));
 8003fea:	7cbb      	ldrb	r3, [r7, #18]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b21a      	sxth	r2, r3
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	b21b      	sxth	r3, r3
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	833b      	strh	r3, [r7, #24]
    mems_data->gyro_x = (gyro_x / 131.1);// * -1.0f;
 8003ff8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc faa9 	bl	8000554 <__aeabi_i2d>
 8004002:	a325      	add	r3, pc, #148	; (adr r3, 8004098 <gyro_read+0x200>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fc38 	bl	800087c <__aeabi_ddiv>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f7fc fde0 	bl	8000bd8 <__aeabi_d2f>
 8004018:	4602      	mov	r2, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    mems_data->gyro_y = (gyro_y / 131.1);// * -1.0f;
 800401e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa96 	bl	8000554 <__aeabi_i2d>
 8004028:	a31b      	add	r3, pc, #108	; (adr r3, 8004098 <gyro_read+0x200>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc fc25 	bl	800087c <__aeabi_ddiv>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	f7fc fdcd 	bl	8000bd8 <__aeabi_d2f>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]
    mems_data->gyro_z = (gyro_z / 131.1) * -1.0f;
 8004044:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fa83 	bl	8000554 <__aeabi_i2d>
 800404e:	a312      	add	r3, pc, #72	; (adr r3, 8004098 <gyro_read+0x200>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f7fc fc12 	bl	800087c <__aeabi_ddiv>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	f7fc fdba 	bl	8000bd8 <__aeabi_d2f>
 8004064:	4603      	mov	r3, r0
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef1 7a67 	vneg.f32	s15, s15
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((tm3<<24)|(tm2<<16)|(tm1<<8)|(tm0)));
 8004074:	7bbb      	ldrb	r3, [r7, #14]
 8004076:	061a      	lsls	r2, r3, #24
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	7c3b      	ldrb	r3, [r7, #16]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	7c7a      	ldrb	r2, [r7, #17]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 800408c:	7ffb      	ldrb	r3, [r7, #31]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	33333333 	.word	0x33333333
 800409c:	40606333 	.word	0x40606333
 80040a0:	20000280 	.word	0x20000280

080040a4 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	6078      	str	r0, [r7, #4]
	uint8_t x_l, x_h = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73bb      	strb	r3, [r7, #14]
	uint8_t y_l, y_h = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	733b      	strb	r3, [r7, #12]
	uint8_t z_l, z_h = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	72bb      	strb	r3, [r7, #10]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, 1, &x_l, 1, 30);
 80040bc:	231e      	movs	r3, #30
 80040be:	9302      	str	r3, [sp, #8]
 80040c0:	2301      	movs	r3, #1
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	f107 030f 	add.w	r3, r7, #15
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	2301      	movs	r3, #1
 80040cc:	2228      	movs	r2, #40	; 0x28
 80040ce:	21d4      	movs	r1, #212	; 0xd4
 80040d0:	4843      	ldr	r0, [pc, #268]	; (80041e0 <lsm6_acc_read+0x13c>)
 80040d2:	f001 fd1f 	bl	8005b14 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_H_A, 1, &x_h, 1, 30);
 80040d6:	231e      	movs	r3, #30
 80040d8:	9302      	str	r3, [sp, #8]
 80040da:	2301      	movs	r3, #1
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	f107 030e 	add.w	r3, r7, #14
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2301      	movs	r3, #1
 80040e6:	2229      	movs	r2, #41	; 0x29
 80040e8:	21d4      	movs	r1, #212	; 0xd4
 80040ea:	483d      	ldr	r0, [pc, #244]	; (80041e0 <lsm6_acc_read+0x13c>)
 80040ec:	f001 fd12 	bl	8005b14 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTY_L_A, 1, &y_l, 1, 30);
 80040f0:	231e      	movs	r3, #30
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	2301      	movs	r3, #1
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	f107 030d 	add.w	r3, r7, #13
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2301      	movs	r3, #1
 8004100:	222a      	movs	r2, #42	; 0x2a
 8004102:	21d4      	movs	r1, #212	; 0xd4
 8004104:	4836      	ldr	r0, [pc, #216]	; (80041e0 <lsm6_acc_read+0x13c>)
 8004106:	f001 fd05 	bl	8005b14 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTY_H_A, 1, &y_h, 1, 30);
 800410a:	231e      	movs	r3, #30
 800410c:	9302      	str	r3, [sp, #8]
 800410e:	2301      	movs	r3, #1
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2301      	movs	r3, #1
 800411a:	222b      	movs	r2, #43	; 0x2b
 800411c:	21d4      	movs	r1, #212	; 0xd4
 800411e:	4830      	ldr	r0, [pc, #192]	; (80041e0 <lsm6_acc_read+0x13c>)
 8004120:	f001 fcf8 	bl	8005b14 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTZ_L_A, 1, &z_l, 1, 30);
 8004124:	231e      	movs	r3, #30
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	2301      	movs	r3, #1
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	f107 030b 	add.w	r3, r7, #11
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	2301      	movs	r3, #1
 8004134:	222c      	movs	r2, #44	; 0x2c
 8004136:	21d4      	movs	r1, #212	; 0xd4
 8004138:	4829      	ldr	r0, [pc, #164]	; (80041e0 <lsm6_acc_read+0x13c>)
 800413a:	f001 fceb 	bl	8005b14 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTZ_H_A, 1, &z_h, 1, 30);
 800413e:	231e      	movs	r3, #30
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	2301      	movs	r3, #1
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	f107 030a 	add.w	r3, r7, #10
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	222d      	movs	r2, #45	; 0x2d
 8004150:	21d4      	movs	r1, #212	; 0xd4
 8004152:	4823      	ldr	r0, [pc, #140]	; (80041e0 <lsm6_acc_read+0x13c>)
 8004154:	f001 fcde 	bl	8005b14 <HAL_I2C_Mem_Read>
    acc_x = ((int16_t)((x_h << 8) | x_l));
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	b21a      	sxth	r2, r3
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((y_h << 8) | y_l));
 8004166:	7b3b      	ldrb	r3, [r7, #12]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	b21a      	sxth	r2, r3
 800416c:	7b7b      	ldrb	r3, [r7, #13]
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((z_h << 8) | z_l));
 8004174:	7abb      	ldrb	r3, [r7, #10]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b21a      	sxth	r2, r3
 800417a:	7afb      	ldrb	r3, [r7, #11]
 800417c:	b21b      	sxth	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	823b      	strh	r3, [r7, #16]
    mems_data->acc_x = (acc_x / 16384.0f);//  * -1.0f;
 8004182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800418e:	eddf 6a15 	vldr	s13, [pc, #84]	; 80041e4 <lsm6_acc_read+0x140>
 8004192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc_y = (acc_y / 16384.0f);// * -1.0f;
 800419c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80041e4 <lsm6_acc_read+0x140>
 80041ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc_z = (acc_z / 16384.0f) * -1.0f;
 80041b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80041e4 <lsm6_acc_read+0x140>
 80041c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ca:	eef1 7a67 	vneg.f32	s15, s15
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000280 	.word	0x20000280
 80041e4:	46800000 	.word	0x46800000

080041e8 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af04      	add	r7, sp, #16
 80041ee:	6078      	str	r0, [r7, #4]
    uint8_t x_l, x_h = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73bb      	strb	r3, [r7, #14]
    uint8_t y_l, y_h = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	733b      	strb	r3, [r7, #12]
    uint8_t z_l, z_h = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	72bb      	strb	r3, [r7, #10]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, 1, &x_l, 1, 30);
 8004200:	231e      	movs	r3, #30
 8004202:	9302      	str	r3, [sp, #8]
 8004204:	2301      	movs	r3, #1
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	f107 030f 	add.w	r3, r7, #15
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2301      	movs	r3, #1
 8004210:	2228      	movs	r2, #40	; 0x28
 8004212:	213c      	movs	r1, #60	; 0x3c
 8004214:	4842      	ldr	r0, [pc, #264]	; (8004320 <lis3_magn_read+0x138>)
 8004216:	f001 fc7d 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_H_MG, 1, &x_h, 1, 30);
 800421a:	231e      	movs	r3, #30
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	2301      	movs	r3, #1
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	f107 030e 	add.w	r3, r7, #14
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2301      	movs	r3, #1
 800422a:	2229      	movs	r2, #41	; 0x29
 800422c:	213c      	movs	r1, #60	; 0x3c
 800422e:	483c      	ldr	r0, [pc, #240]	; (8004320 <lis3_magn_read+0x138>)
 8004230:	f001 fc70 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_Y_L_MG, 1, &y_l, 1, 30);
 8004234:	231e      	movs	r3, #30
 8004236:	9302      	str	r3, [sp, #8]
 8004238:	2301      	movs	r3, #1
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	f107 030d 	add.w	r3, r7, #13
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2301      	movs	r3, #1
 8004244:	222a      	movs	r2, #42	; 0x2a
 8004246:	213c      	movs	r1, #60	; 0x3c
 8004248:	4835      	ldr	r0, [pc, #212]	; (8004320 <lis3_magn_read+0x138>)
 800424a:	f001 fc63 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_Y_H_MG, 1, &y_h, 1, 30);
 800424e:	231e      	movs	r3, #30
 8004250:	9302      	str	r3, [sp, #8]
 8004252:	2301      	movs	r3, #1
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2301      	movs	r3, #1
 800425e:	222b      	movs	r2, #43	; 0x2b
 8004260:	213c      	movs	r1, #60	; 0x3c
 8004262:	482f      	ldr	r0, [pc, #188]	; (8004320 <lis3_magn_read+0x138>)
 8004264:	f001 fc56 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_Z_L_MG, 1, &z_l, 1, 30);
 8004268:	231e      	movs	r3, #30
 800426a:	9302      	str	r3, [sp, #8]
 800426c:	2301      	movs	r3, #1
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	f107 030b 	add.w	r3, r7, #11
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2301      	movs	r3, #1
 8004278:	222c      	movs	r2, #44	; 0x2c
 800427a:	213c      	movs	r1, #60	; 0x3c
 800427c:	4828      	ldr	r0, [pc, #160]	; (8004320 <lis3_magn_read+0x138>)
 800427e:	f001 fc49 	bl	8005b14 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_Z_H_MG, 1, &z_h, 1, 30);
 8004282:	231e      	movs	r3, #30
 8004284:	9302      	str	r3, [sp, #8]
 8004286:	2301      	movs	r3, #1
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	f107 030a 	add.w	r3, r7, #10
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2301      	movs	r3, #1
 8004292:	222d      	movs	r2, #45	; 0x2d
 8004294:	213c      	movs	r1, #60	; 0x3c
 8004296:	4822      	ldr	r0, [pc, #136]	; (8004320 <lis3_magn_read+0x138>)
 8004298:	f001 fc3c 	bl	8005b14 <HAL_I2C_Mem_Read>
    magn_x = ((int16_t)((x_h << 8) | x_l));
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	b21a      	sxth	r2, r3
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	b21b      	sxth	r3, r3
 80042a6:	4313      	orrs	r3, r2
 80042a8:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((y_h << 8) | y_l));
 80042aa:	7b3b      	ldrb	r3, [r7, #12]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b21a      	sxth	r2, r3
 80042b0:	7b7b      	ldrb	r3, [r7, #13]
 80042b2:	b21b      	sxth	r3, r3
 80042b4:	4313      	orrs	r3, r2
 80042b6:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((z_h << 8) | z_l));
 80042b8:	7abb      	ldrb	r3, [r7, #10]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	b21a      	sxth	r2, r3
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	b21b      	sxth	r3, r3
 80042c2:	4313      	orrs	r3, r2
 80042c4:	823b      	strh	r3, [r7, #16]
    mems_data->magn_x = magn_x / 10.0f;
 80042c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn_y = magn_y / 10.0f;
 80042e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ec:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn_z = magn_z / 10.0f;
 80042fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004306:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800430a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000280 	.word	0x20000280

08004324 <debugPrintMEMS>:

void debugPrintMEMS(mems_data_t *mems_data){
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	uint8_t text[20] = {0};
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	f107 0310 	add.w	r3, r7, #16
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
//	uart_write_debug(text, 50);
//	memcpy(text,0,10);
//	sprintf(text, "%f,", mems_data->gyro_z);
//	uart_write_debug(text, 50);
//	memcpy(text,0,10);
	sprintf(text, "%f,", mems_data->magn_x);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fc f918 	bl	8000578 <__aeabi_f2d>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	f107 000c 	add.w	r0, r7, #12
 8004350:	4922      	ldr	r1, [pc, #136]	; (80043dc <debugPrintMEMS+0xb8>)
 8004352:	f008 fb9d 	bl	800ca90 <siprintf>
	uart_write_uart4(text, 50);
 8004356:	f107 030c 	add.w	r3, r7, #12
 800435a:	2132      	movs	r1, #50	; 0x32
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fecf 	bl	8005100 <uart_write_uart4>
	memcpy(text,0,10);
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	220a      	movs	r2, #10
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f007 ff10 	bl	800c190 <memcpy>
	sprintf(text, "%f,", mems_data->magn_y);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc f8ff 	bl	8000578 <__aeabi_f2d>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	f107 000c 	add.w	r0, r7, #12
 8004382:	4916      	ldr	r1, [pc, #88]	; (80043dc <debugPrintMEMS+0xb8>)
 8004384:	f008 fb84 	bl	800ca90 <siprintf>
	uart_write_uart4(text, 50);
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	2132      	movs	r1, #50	; 0x32
 800438e:	4618      	mov	r0, r3
 8004390:	f000 feb6 	bl	8005100 <uart_write_uart4>
	memcpy(text,0,10);
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	220a      	movs	r2, #10
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f007 fef7 	bl	800c190 <memcpy>
	sprintf(text, "%f\r\n", mems_data->magn_z);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f8e6 	bl	8000578 <__aeabi_f2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	f107 000c 	add.w	r0, r7, #12
 80043b4:	490a      	ldr	r1, [pc, #40]	; (80043e0 <debugPrintMEMS+0xbc>)
 80043b6:	f008 fb6b 	bl	800ca90 <siprintf>
	uart_write_uart4(text, 50);
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	2132      	movs	r1, #50	; 0x32
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fe9d 	bl	8005100 <uart_write_uart4>
	memcpy(text,0,10);
 80043c6:	f107 030c 	add.w	r3, r7, #12
 80043ca:	220a      	movs	r2, #10
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f007 fede 	bl	800c190 <memcpy>
}
 80043d4:	bf00      	nop
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	080106b0 	.word	0x080106b0
 80043e0:	080106b4 	.word	0x080106b4

080043e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b09c      	sub	sp, #112	; 0x70
 80043e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043ea:	f000 feca 	bl	8005182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ee:	f000 f90b 	bl	8004608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043f2:	f000 f95b 	bl	80046ac <MX_GPIO_Init>

  MX_USART1_UART_Init();
 80043f6:	f000 fdc3 	bl	8004f80 <MX_USART1_UART_Init>

  MX_UART4_UART_Init();
 80043fa:	f000 fe0d 	bl	8005018 <MX_UART4_UART_Init>


  if (lsm6_bus_init() != 0){
 80043fe:	f7ff fc61 	bl	8003cc4 <lsm6_bus_init>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d010      	beq.n	800442a <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8004408:	4b43      	ldr	r3, [pc, #268]	; (8004518 <main+0x134>)
 800440a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800440e:	461d      	mov	r5, r3
 8004410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004418:	c403      	stmia	r4!, {r0, r1}
 800441a:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 800441c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004420:	210a      	movs	r1, #10
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fe54 	bl	80050d0 <uart_write_debug>
 8004428:	e042      	b.n	80044b0 <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 800442a:	f7ff fcb1 	bl	8003d90 <lsm6_acc_init>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00f      	beq.n	8004454 <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004434:	4b39      	ldr	r3, [pc, #228]	; (800451c <main+0x138>)
 8004436:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800443a:	461d      	mov	r5, r3
 800443c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004444:	c403      	stmia	r4!, {r0, r1}
 8004446:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800444c:	210a      	movs	r1, #10
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fe3e 	bl	80050d0 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004454:	f7ff fc76 	bl	8003d44 <gyro_init>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d012      	beq.n	8004484 <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 800445e:	4b30      	ldr	r3, [pc, #192]	; (8004520 <main+0x13c>)
 8004460:	f107 041c 	add.w	r4, r7, #28
 8004464:	461d      	mov	r5, r3
 8004466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800446a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800446e:	c403      	stmia	r4!, {r0, r1}
 8004470:	8022      	strh	r2, [r4, #0]
 8004472:	3402      	adds	r4, #2
 8004474:	0c13      	lsrs	r3, r2, #16
 8004476:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	210a      	movs	r1, #10
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fe26 	bl	80050d0 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004484:	f7ff fcaa 	bl	8003ddc <magn_init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d010      	beq.n	80044b0 <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <main+0x140>)
 8004490:	463c      	mov	r4, r7
 8004492:	461d      	mov	r5, r3
 8004494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800449c:	c403      	stmia	r4!, {r0, r1}
 800449e:	8022      	strh	r2, [r4, #0]
 80044a0:	3402      	adds	r4, #2
 80044a2:	0c13      	lsrs	r3, r2, #16
 80044a4:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 80044a6:	463b      	mov	r3, r7
 80044a8:	210a      	movs	r1, #10
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fe10 	bl	80050d0 <uart_write_debug>
		  }
  }

  /* Init scheduler */
  osKernelInitialize();
 80044b0:	f004 fe3a 	bl	8009128 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80044b4:	481c      	ldr	r0, [pc, #112]	; (8004528 <main+0x144>)
 80044b6:	f004 ff2e 	bl	8009316 <osMutexNew>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a1b      	ldr	r2, [pc, #108]	; (800452c <main+0x148>)
 80044be:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  memsQueueHandle = osMessageQueueNew (4, sizeof(mems_data_t), &memsQueue_attributes);
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <main+0x14c>)
 80044c2:	2128      	movs	r1, #40	; 0x28
 80044c4:	2004      	movs	r0, #4
 80044c6:	f004 ffac 	bl	8009422 <osMessageQueueNew>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a19      	ldr	r2, [pc, #100]	; (8004534 <main+0x150>)
 80044ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <main+0x154>)
 80044d2:	210c      	movs	r1, #12
 80044d4:	2004      	movs	r0, #4
 80044d6:	f004 ffa4 	bl	8009422 <osMessageQueueNew>
 80044da:	4603      	mov	r3, r0
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <main+0x158>)
 80044de:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80044e0:	4a17      	ldr	r2, [pc, #92]	; (8004540 <main+0x15c>)
 80044e2:	2100      	movs	r1, #0
 80044e4:	4817      	ldr	r0, [pc, #92]	; (8004544 <main+0x160>)
 80044e6:	f004 fe69 	bl	80091bc <osThreadNew>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <main+0x164>)
 80044ee:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 80044f0:	4a16      	ldr	r2, [pc, #88]	; (800454c <main+0x168>)
 80044f2:	2100      	movs	r1, #0
 80044f4:	4816      	ldr	r0, [pc, #88]	; (8004550 <main+0x16c>)
 80044f6:	f004 fe61 	bl	80091bc <osThreadNew>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <main+0x170>)
 80044fe:	6013      	str	r3, [r2, #0]

  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <main+0x174>)
 8004502:	2100      	movs	r1, #0
 8004504:	4815      	ldr	r0, [pc, #84]	; (800455c <main+0x178>)
 8004506:	f004 fe59 	bl	80091bc <osThreadNew>
 800450a:	4603      	mov	r3, r0
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <main+0x17c>)
 800450e:	6013      	str	r3, [r2, #0]

//  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);

  /* Start scheduler */
  osKernelStart();
 8004510:	f004 fe2e 	bl	8009170 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004514:	e7fe      	b.n	8004514 <main+0x130>
 8004516:	bf00      	nop
 8004518:	0801071c 	.word	0x0801071c
 800451c:	08010738 	.word	0x08010738
 8004520:	08010754 	.word	0x08010754
 8004524:	08010770 	.word	0x08010770
 8004528:	080108ec 	.word	0x080108ec
 800452c:	200002e0 	.word	0x200002e0
 8004530:	080108fc 	.word	0x080108fc
 8004534:	200002e4 	.word	0x200002e4
 8004538:	08010914 	.word	0x08010914
 800453c:	200002e8 	.word	0x200002e8
 8004540:	08010880 	.word	0x08010880
 8004544:	08004565 	.word	0x08004565
 8004548:	200002d4 	.word	0x200002d4
 800454c:	080108c8 	.word	0x080108c8
 8004550:	080045d9 	.word	0x080045d9
 8004554:	200002dc 	.word	0x200002dc
 8004558:	080108a4 	.word	0x080108a4
 800455c:	08004585 	.word	0x08004585
 8004560:	200002d8 	.word	0x200002d8

08004564 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 800456c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004570:	4803      	ldr	r0, [pc, #12]	; (8004580 <StartDefaultTask+0x1c>)
 8004572:	f001 f8ef 	bl	8005754 <HAL_GPIO_TogglePin>
    osDelay(500);
 8004576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800457a:	f004 feb1 	bl	80092e0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 800457e:	e7f5      	b.n	800456c <StartDefaultTask+0x8>
 8004580:	48000400 	.word	0x48000400

08004584 <calcHeadingTask>:
  /* USER CODE END 5 */
}


void calcHeadingTask(void *argument)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b090      	sub	sp, #64	; 0x40
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	osStatus_t status;
	FusionInit();
 800458c:	f7fd f81c 	bl	80015c8 <FusionInit>

	for(;;)
	{
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 0U);   // wait for message
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <calcHeadingTask+0x4c>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	f107 0114 	add.w	r1, r7, #20
 8004598:	2300      	movs	r3, #0
 800459a:	2200      	movs	r2, #0
 800459c:	f005 f814 	bl	80095c8 <osMessageQueueGet>
 80045a0:	63f8      	str	r0, [r7, #60]	; 0x3c
	    if (status == osOK) {
 80045a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10f      	bne.n	80045c8 <calcHeadingTask+0x44>
	    	FusionCalcHeading(&mems_data, &euler);
 80045a8:	f107 0208 	add.w	r2, r7, #8
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd f828 	bl	8001608 <FusionCalcHeading>
	    	osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <calcHeadingTask+0x50>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	f107 0108 	add.w	r1, r7, #8
 80045c0:	2300      	movs	r3, #0
 80045c2:	2200      	movs	r2, #0
 80045c4:	f004 ffa0 	bl	8009508 <osMessageQueuePut>
	    }
		osDelay(10);
 80045c8:	200a      	movs	r0, #10
 80045ca:	f004 fe89 	bl	80092e0 <osDelay>
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 0U);   // wait for message
 80045ce:	e7df      	b.n	8004590 <calcHeadingTask+0xc>
 80045d0:	200002e4 	.word	0x200002e4
 80045d4:	200002e8 	.word	0x200002e8

080045d8 <readMemsTask>:
	}
}

void readMemsTask(void *argument)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08c      	sub	sp, #48	; 0x30
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	for(;;)
	{
		tick_gyro(&mems_data);
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fb55 	bl	8003c94 <tick_gyro>
		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 0U);
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <readMemsTask+0x2c>)
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f107 0108 	add.w	r1, r7, #8
 80045f2:	2300      	movs	r3, #0
 80045f4:	2200      	movs	r2, #0
 80045f6:	f004 ff87 	bl	8009508 <osMessageQueuePut>
		osDelay(100);
 80045fa:	2064      	movs	r0, #100	; 0x64
 80045fc:	f004 fe70 	bl	80092e0 <osDelay>
		tick_gyro(&mems_data);
 8004600:	e7ee      	b.n	80045e0 <readMemsTask+0x8>
 8004602:	bf00      	nop
 8004604:	200002e4 	.word	0x200002e4

08004608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b096      	sub	sp, #88	; 0x58
 800460c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800460e:	f107 0314 	add.w	r3, r7, #20
 8004612:	2244      	movs	r2, #68	; 0x44
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f007 fdc8 	bl	800c1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800461c:	463b      	mov	r3, r7
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	609a      	str	r2, [r3, #8]
 8004626:	60da      	str	r2, [r3, #12]
 8004628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800462a:	2000      	movs	r0, #0
 800462c:	f001 ff04 	bl	8006438 <HAL_PWREx_ControlVoltageScaling>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004636:	f000 fa09 	bl	8004a4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800463a:	2310      	movs	r3, #16
 800463c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800463e:	2301      	movs	r3, #1
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004646:	2360      	movs	r3, #96	; 0x60
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800464a:	2302      	movs	r3, #2
 800464c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800464e:	2301      	movs	r3, #1
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004656:	233c      	movs	r3, #60	; 0x3c
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800465a:	2302      	movs	r3, #2
 800465c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800465e:	2302      	movs	r3, #2
 8004660:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004662:	2302      	movs	r3, #2
 8004664:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	4618      	mov	r0, r3
 800466c:	f001 ff88 	bl	8006580 <HAL_RCC_OscConfig>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004676:	f000 f9e9 	bl	8004a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800467a:	230f      	movs	r3, #15
 800467c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800467e:	2303      	movs	r3, #3
 8004680:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800468e:	463b      	mov	r3, r7
 8004690:	2105      	movs	r1, #5
 8004692:	4618      	mov	r0, r3
 8004694:	f002 fb8e 	bl	8006db4 <HAL_RCC_ClockConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800469e:	f000 f9d5 	bl	8004a4c <Error_Handler>
  }
}
 80046a2:	bf00      	nop
 80046a4:	3758      	adds	r7, #88	; 0x58
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b2:	f107 0314 	add.w	r3, r7, #20
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	609a      	str	r2, [r3, #8]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046c2:	4bbb      	ldr	r3, [pc, #748]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	4aba      	ldr	r2, [pc, #744]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046c8:	f043 0310 	orr.w	r3, r3, #16
 80046cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ce:	4bb8      	ldr	r3, [pc, #736]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046da:	4bb5      	ldr	r3, [pc, #724]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	4ab4      	ldr	r2, [pc, #720]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046e6:	4bb2      	ldr	r3, [pc, #712]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f2:	4baf      	ldr	r3, [pc, #700]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	4aae      	ldr	r2, [pc, #696]	; (80049b0 <MX_GPIO_Init+0x304>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046fe:	4bac      	ldr	r3, [pc, #688]	; (80049b0 <MX_GPIO_Init+0x304>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800470a:	4ba9      	ldr	r3, [pc, #676]	; (80049b0 <MX_GPIO_Init+0x304>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	4aa8      	ldr	r2, [pc, #672]	; (80049b0 <MX_GPIO_Init+0x304>)
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004716:	4ba6      	ldr	r3, [pc, #664]	; (80049b0 <MX_GPIO_Init+0x304>)
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004722:	4ba3      	ldr	r3, [pc, #652]	; (80049b0 <MX_GPIO_Init+0x304>)
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	4aa2      	ldr	r2, [pc, #648]	; (80049b0 <MX_GPIO_Init+0x304>)
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800472e:	4ba0      	ldr	r3, [pc, #640]	; (80049b0 <MX_GPIO_Init+0x304>)
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	f240 1105 	movw	r1, #261	; 0x105
 8004740:	489c      	ldr	r0, [pc, #624]	; (80049b4 <MX_GPIO_Init+0x308>)
 8004742:	f000 ffef 	bl	8005724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004746:	2200      	movs	r2, #0
 8004748:	f248 111c 	movw	r1, #33052	; 0x811c
 800474c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004750:	f000 ffe8 	bl	8005724 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004754:	2200      	movs	r2, #0
 8004756:	f24f 0134 	movw	r1, #61492	; 0xf034
 800475a:	4897      	ldr	r0, [pc, #604]	; (80049b8 <MX_GPIO_Init+0x30c>)
 800475c:	f000 ffe2 	bl	8005724 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004760:	2200      	movs	r2, #0
 8004762:	f242 0183 	movw	r1, #8323	; 0x2083
 8004766:	4895      	ldr	r0, [pc, #596]	; (80049bc <MX_GPIO_Init+0x310>)
 8004768:	f000 ffdc 	bl	8005724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800476c:	2200      	movs	r2, #0
 800476e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004772:	4893      	ldr	r0, [pc, #588]	; (80049c0 <MX_GPIO_Init+0x314>)
 8004774:	f000 ffd6 	bl	8005724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004778:	f240 1305 	movw	r3, #261	; 0x105
 800477c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	4619      	mov	r1, r3
 8004790:	4888      	ldr	r0, [pc, #544]	; (80049b4 <MX_GPIO_Init+0x308>)
 8004792:	f000 fe35 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8004796:	237a      	movs	r3, #122	; 0x7a
 8004798:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800479a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800479e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	4619      	mov	r1, r3
 80047aa:	4882      	ldr	r0, [pc, #520]	; (80049b4 <MX_GPIO_Init+0x308>)
 80047ac:	f000 fe28 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80047b0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80047b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80047ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4619      	mov	r1, r3
 80047c6:	487e      	ldr	r0, [pc, #504]	; (80049c0 <MX_GPIO_Init+0x314>)
 80047c8:	f000 fe1a 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80047cc:	233f      	movs	r3, #63	; 0x3f
 80047ce:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80047d0:	230b      	movs	r3, #11
 80047d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	4619      	mov	r1, r3
 80047de:	4878      	ldr	r0, [pc, #480]	; (80049c0 <MX_GPIO_Init+0x314>)
 80047e0:	f000 fe0e 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80047e4:	2303      	movs	r3, #3
 80047e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e8:	2302      	movs	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f0:	2303      	movs	r3, #3
 80047f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80047f4:	2308      	movs	r3, #8
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4619      	mov	r1, r3
 80047fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004802:	f000 fdfd 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004806:	f248 131c 	movw	r3, #33052	; 0x811c
 800480a:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480c:	2301      	movs	r3, #1
 800480e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2300      	movs	r3, #0
 8004816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4619      	mov	r1, r3
 800481e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004822:	f000 fded 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004826:	23e0      	movs	r3, #224	; 0xe0
 8004828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482a:	2302      	movs	r3, #2
 800482c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004832:	2303      	movs	r3, #3
 8004834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004836:	2305      	movs	r3, #5
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	4619      	mov	r1, r3
 8004840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004844:	f000 fddc 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004848:	2301      	movs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800484c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004856:	f107 0314 	add.w	r3, r7, #20
 800485a:	4619      	mov	r1, r3
 800485c:	4856      	ldr	r0, [pc, #344]	; (80049b8 <MX_GPIO_Init+0x30c>)
 800485e:	f000 fdcf 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004862:	2302      	movs	r3, #2
 8004864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004872:	2302      	movs	r3, #2
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004876:	f107 0314 	add.w	r3, r7, #20
 800487a:	4619      	mov	r1, r3
 800487c:	484e      	ldr	r0, [pc, #312]	; (80049b8 <MX_GPIO_Init+0x30c>)
 800487e:	f000 fdbf 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004882:	f24f 0334 	movw	r3, #61492	; 0xf034
 8004886:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004888:	2301      	movs	r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	4619      	mov	r1, r3
 800489a:	4847      	ldr	r0, [pc, #284]	; (80049b8 <MX_GPIO_Init+0x30c>)
 800489c:	f000 fdb0 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80048a0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80048a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	2302      	movs	r3, #2
 80048a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80048b2:	2306      	movs	r3, #6
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	4619      	mov	r1, r3
 80048bc:	483d      	ldr	r0, [pc, #244]	; (80049b4 <MX_GPIO_Init+0x308>)
 80048be:	f000 fd9f 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80048c2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80048c6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d0:	2303      	movs	r3, #3
 80048d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80048d4:	230a      	movs	r3, #10
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4619      	mov	r1, r3
 80048de:	4835      	ldr	r0, [pc, #212]	; (80049b4 <MX_GPIO_Init+0x308>)
 80048e0:	f000 fd8e 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80048e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f2:	2303      	movs	r3, #3
 80048f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048f6:	2307      	movs	r3, #7
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4619      	mov	r1, r3
 8004900:	482e      	ldr	r0, [pc, #184]	; (80049bc <MX_GPIO_Init+0x310>)
 8004902:	f000 fd7d 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8004906:	f64d 4304 	movw	r3, #56324	; 0xdc04
 800490a:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800490c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	4619      	mov	r1, r3
 800491c:	4827      	ldr	r0, [pc, #156]	; (80049bc <MX_GPIO_Init+0x310>)
 800491e:	f000 fd6f 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8004922:	f242 0383 	movw	r3, #8323	; 0x2083
 8004926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004928:	2301      	movs	r3, #1
 800492a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004930:	2300      	movs	r3, #0
 8004932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	4619      	mov	r1, r3
 800493a:	4820      	ldr	r0, [pc, #128]	; (80049bc <MX_GPIO_Init+0x310>)
 800493c:	f000 fd60 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004940:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004946:	2301      	movs	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494e:	2300      	movs	r3, #0
 8004950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	4619      	mov	r1, r3
 8004958:	4819      	ldr	r0, [pc, #100]	; (80049c0 <MX_GPIO_Init+0x314>)
 800495a:	f000 fd51 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800495e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	4619      	mov	r1, r3
 8004972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004976:	f000 fd43 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800497a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800497e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	2302      	movs	r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004988:	2303      	movs	r3, #3
 800498a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800498c:	2306      	movs	r3, #6
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	4619      	mov	r1, r3
 8004996:	480a      	ldr	r0, [pc, #40]	; (80049c0 <MX_GPIO_Init+0x314>)
 8004998:	f000 fd32 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800499c:	2378      	movs	r3, #120	; 0x78
 800499e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a0:	2302      	movs	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a8:	2303      	movs	r3, #3
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	e00a      	b.n	80049c4 <MX_GPIO_Init+0x318>
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	48001000 	.word	0x48001000
 80049b8:	48000400 	.word	0x48000400
 80049bc:	48000c00 	.word	0x48000c00
 80049c0:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049c4:	2307      	movs	r3, #7
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4619      	mov	r1, r3
 80049ce:	4814      	ldr	r0, [pc, #80]	; (8004a20 <MX_GPIO_Init+0x374>)
 80049d0:	f000 fd16 	bl	8005400 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80049d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049da:	2312      	movs	r3, #18
 80049dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e2:	2303      	movs	r3, #3
 80049e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049e6:	2304      	movs	r3, #4
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	4619      	mov	r1, r3
 80049f0:	480c      	ldr	r0, [pc, #48]	; (8004a24 <MX_GPIO_Init+0x378>)
 80049f2:	f000 fd05 	bl	8005400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80049f6:	2200      	movs	r2, #0
 80049f8:	2105      	movs	r1, #5
 80049fa:	2017      	movs	r0, #23
 80049fc:	f000 fcd6 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a00:	2017      	movs	r0, #23
 8004a02:	f000 fcef 	bl	80053e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004a06:	2200      	movs	r2, #0
 8004a08:	2105      	movs	r1, #5
 8004a0a:	2028      	movs	r0, #40	; 0x28
 8004a0c:	f000 fcce 	bl	80053ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a10:	2028      	movs	r0, #40	; 0x28
 8004a12:	f000 fce7 	bl	80053e4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004a16:	bf00      	nop
 8004a18:	3728      	adds	r7, #40	; 0x28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	48000c00 	.word	0x48000c00
 8004a24:	48000400 	.word	0x48000400

08004a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a3a:	f000 fbbb 	bl	80051b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40012c00 	.word	0x40012c00

08004a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a50:	b672      	cpsid	i
}
 8004a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <Error_Handler+0x1c>)
 8004a5a:	f000 fe7b 	bl	8005754 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8004a5e:	2064      	movs	r0, #100	; 0x64
 8004a60:	f000 fbc8 	bl	80051f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004a64:	e7f6      	b.n	8004a54 <Error_Handler+0x8>
 8004a66:	bf00      	nop
 8004a68:	48000400 	.word	0x48000400

08004a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_MspInit+0x4c>)
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <HAL_MspInit+0x4c>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_MspInit+0x4c>)
 8004a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_MspInit+0x4c>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <HAL_MspInit+0x4c>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6593      	str	r3, [r2, #88]	; 0x58
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_MspInit+0x4c>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	210f      	movs	r1, #15
 8004aa6:	f06f 0001 	mvn.w	r0, #1
 8004aaa:	f000 fc7f 	bl	80053ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000

08004abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b0ae      	sub	sp, #184	; 0xb8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ad4:	f107 0310 	add.w	r3, r7, #16
 8004ad8:	2294      	movs	r2, #148	; 0x94
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f007 fb65 	bl	800c1ac <memset>
  if(hi2c->Instance==I2C2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <HAL_I2C_MspInit+0xc0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d143      	bne.n	8004b74 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004af0:	2300      	movs	r3, #0
 8004af2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004af4:	f107 0310 	add.w	r3, r7, #16
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fc4b 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004b04:	f7ff ffa2 	bl	8004a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_I2C_MspInit+0xc4>)
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_I2C_MspInit+0xc4>)
 8004b0e:	f043 0302 	orr.w	r3, r3, #2
 8004b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_I2C_MspInit+0xc4>)
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8004b20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b28:	2312      	movs	r3, #18
 8004b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b34:	2303      	movs	r3, #3
 8004b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b3a:	2304      	movs	r3, #4
 8004b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004b44:	4619      	mov	r1, r3
 8004b46:	480f      	ldr	r0, [pc, #60]	; (8004b84 <HAL_I2C_MspInit+0xc8>)
 8004b48:	f000 fc5a 	bl	8005400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <HAL_I2C_MspInit+0xc4>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	4a0b      	ldr	r2, [pc, #44]	; (8004b80 <HAL_I2C_MspInit+0xc4>)
 8004b52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b56:	6593      	str	r3, [r2, #88]	; 0x58
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_I2C_MspInit+0xc4>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8004b64:	2200      	movs	r2, #0
 8004b66:	2105      	movs	r1, #5
 8004b68:	2021      	movs	r0, #33	; 0x21
 8004b6a:	f000 fc1f 	bl	80053ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004b6e:	2021      	movs	r0, #33	; 0x21
 8004b70:	f000 fc38 	bl	80053e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b74:	bf00      	nop
 8004b76:	37b8      	adds	r7, #184	; 0xb8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40005800 	.word	0x40005800
 8004b80:	40021000 	.word	0x40021000
 8004b84:	48000400 	.word	0x48000400

08004b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b0ae      	sub	sp, #184	; 0xb8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ba0:	f107 0310 	add.w	r3, r7, #16
 8004ba4:	2294      	movs	r2, #148	; 0x94
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f007 faff 	bl	800c1ac <memset>
  if(huart->Instance==USART1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <HAL_UART_MspInit+0xb0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d13a      	bne.n	8004c2e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bc0:	f107 0310 	add.w	r3, r7, #16
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f002 fbe5 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004bd0:	f7ff ff3c 	bl	8004a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_UART_MspInit+0xb4>)
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_UART_MspInit+0xb4>)
 8004bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bde:	6613      	str	r3, [r2, #96]	; 0x60
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_UART_MspInit+0xb4>)
 8004be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <HAL_UART_MspInit+0xb4>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf0:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <HAL_UART_MspInit+0xb4>)
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bf8:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <HAL_UART_MspInit+0xb4>)
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8004c04:	23c0      	movs	r3, #192	; 0xc0
 8004c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c16:	2303      	movs	r3, #3
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c1c:	2307      	movs	r3, #7
 8004c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004c26:	4619      	mov	r1, r3
 8004c28:	4805      	ldr	r0, [pc, #20]	; (8004c40 <HAL_UART_MspInit+0xb8>)
 8004c2a:	f000 fbe9 	bl	8005400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c2e:	bf00      	nop
 8004c30:	37b8      	adds	r7, #184	; 0xb8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	48000400 	.word	0x48000400

08004c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08c      	sub	sp, #48	; 0x30
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004c52:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <HAL_InitTick+0xc8>)
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	4a2d      	ldr	r2, [pc, #180]	; (8004d0c <HAL_InitTick+0xc8>)
 8004c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c5e:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_InitTick+0xc8>)
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c6a:	f107 020c 	add.w	r2, r7, #12
 8004c6e:	f107 0310 	add.w	r3, r7, #16
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 fa9b 	bl	80071b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004c7a:	f002 fa83 	bl	8007184 <HAL_RCC_GetPCLK2Freq>
 8004c7e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_InitTick+0xcc>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	0c9b      	lsrs	r3, r3, #18
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004c8e:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <HAL_InitTick+0xd0>)
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_InitTick+0xd4>)
 8004c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <HAL_InitTick+0xd0>)
 8004c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_InitTick+0xd0>)
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <HAL_InitTick+0xd0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <HAL_InitTick+0xd0>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cae:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <HAL_InitTick+0xd0>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004cb4:	4817      	ldr	r0, [pc, #92]	; (8004d14 <HAL_InitTick+0xd0>)
 8004cb6:	f003 f885 	bl	8007dc4 <HAL_TIM_Base_Init>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11b      	bne.n	8004d00 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004cc8:	4812      	ldr	r0, [pc, #72]	; (8004d14 <HAL_InitTick+0xd0>)
 8004cca:	f003 f8dd 	bl	8007e88 <HAL_TIM_Base_Start_IT>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d111      	bne.n	8004d00 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004cdc:	2019      	movs	r0, #25
 8004cde:	f000 fb81 	bl	80053e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b0f      	cmp	r3, #15
 8004ce6:	d808      	bhi.n	8004cfa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	2019      	movs	r0, #25
 8004cee:	f000 fb5d 	bl	80053ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_InitTick+0xd8>)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e002      	b.n	8004d00 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3730      	adds	r7, #48	; 0x30
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	200002ec 	.word	0x200002ec
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	20000004 	.word	0x20000004

08004d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d24:	e7fe      	b.n	8004d24 <NMI_Handler+0x4>

08004d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d26:	b480      	push	{r7}
 8004d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d2a:	e7fe      	b.n	8004d2a <HardFault_Handler+0x4>

08004d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d30:	e7fe      	b.n	8004d30 <MemManage_Handler+0x4>

08004d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d36:	e7fe      	b.n	8004d36 <BusFault_Handler+0x4>

08004d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d3c:	e7fe      	b.n	8004d3c <UsageFault_Handler+0x4>

08004d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8004d50:	2020      	movs	r0, #32
 8004d52:	f000 fd19 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8004d56:	2040      	movs	r0, #64	; 0x40
 8004d58:	f000 fd16 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8004d5c:	2080      	movs	r0, #128	; 0x80
 8004d5e:	f000 fd13 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8004d62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d66:	f000 fd0f 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d74:	4802      	ldr	r0, [pc, #8]	; (8004d80 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004d76:	f003 f8f7 	bl	8007f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200002ec 	.word	0x200002ec

08004d84 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004d88:	4802      	ldr	r0, [pc, #8]	; (8004d94 <I2C2_EV_IRQHandler+0x10>)
 8004d8a:	f000 ffdd 	bl	8005d48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000280 	.word	0x20000280

08004d98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8004d9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004da0:	f000 fcf2 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8004da4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004da8:	f000 fcee 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8004dac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004db0:	f000 fcea 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8004db4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004db8:	f000 fce6 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8004dbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004dc0:	f000 fce2 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8004dc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004dc8:	f000 fcde 	bl	8005788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return 1;
 8004dd4:	2301      	movs	r3, #1
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <_kill>:

int _kill(int pid, int sig)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004dea:	f007 f9a7 	bl	800c13c <__errno>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2216      	movs	r2, #22
 8004df2:	601a      	str	r2, [r3, #0]
  return -1;
 8004df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_exit>:

void _exit (int status)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e08:	f04f 31ff 	mov.w	r1, #4294967295
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ffe7 	bl	8004de0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e12:	e7fe      	b.n	8004e12 <_exit+0x12>

08004e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e00a      	b.n	8004e3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e26:	f3af 8000 	nop.w
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	60ba      	str	r2, [r7, #8]
 8004e32:	b2ca      	uxtb	r2, r1
 8004e34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	dbf0      	blt.n	8004e26 <_read+0x12>
  }

  return len;
 8004e44:	687b      	ldr	r3, [r7, #4]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e009      	b.n	8004e74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	60ba      	str	r2, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	dbf1      	blt.n	8004e60 <_write+0x12>
  }
  return len;
 8004e7c:	687b      	ldr	r3, [r7, #4]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <_close>:

int _close(int file)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eae:	605a      	str	r2, [r3, #4]
  return 0;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_isatty>:

int _isatty(int file)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ec6:	2301      	movs	r3, #1
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ef8:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <_sbrk+0x5c>)
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <_sbrk+0x60>)
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f04:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <_sbrk+0x64>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <_sbrk+0x64>)
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <_sbrk+0x68>)
 8004f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <_sbrk+0x64>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d207      	bcs.n	8004f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f20:	f007 f90c 	bl	800c13c <__errno>
 8004f24:	4603      	mov	r3, r0
 8004f26:	220c      	movs	r2, #12
 8004f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	e009      	b.n	8004f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f30:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <_sbrk+0x64>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f36:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <_sbrk+0x64>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	4a05      	ldr	r2, [pc, #20]	; (8004f54 <_sbrk+0x64>)
 8004f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200a0000 	.word	0x200a0000
 8004f50:	00000400 	.word	0x00000400
 8004f54:	20000338 	.word	0x20000338
 8004f58:	200061c0 	.word	0x200061c0

08004f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <SystemInit+0x20>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	4a05      	ldr	r2, [pc, #20]	; (8004f7c <SystemInit+0x20>)
 8004f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004f86:	4a23      	ldr	r2, [pc, #140]	; (8005014 <MX_USART1_UART_Init+0x94>)
 8004f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8004f8a:	4b21      	ldr	r3, [pc, #132]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004f8c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f92:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fa6:	220c      	movs	r2, #12
 8004fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fc8:	4811      	ldr	r0, [pc, #68]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fca:	f003 f9cd 	bl	8008368 <HAL_UART_Init>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004fd4:	f000 f872 	bl	80050bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fd8:	2100      	movs	r1, #0
 8004fda:	480d      	ldr	r0, [pc, #52]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fdc:	f003 ff96 	bl	8008f0c <HAL_UARTEx_SetTxFifoThreshold>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004fe6:	f000 f869 	bl	80050bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fea:	2100      	movs	r1, #0
 8004fec:	4808      	ldr	r0, [pc, #32]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004fee:	f003 ffcb 	bl	8008f88 <HAL_UARTEx_SetRxFifoThreshold>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ff8:	f000 f860 	bl	80050bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ffc:	4804      	ldr	r0, [pc, #16]	; (8005010 <MX_USART1_UART_Init+0x90>)
 8004ffe:	f003 ff4c 	bl	8008e9a <HAL_UARTEx_DisableFifoMode>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005008:	f000 f858 	bl	80050bc <Error_Handler>
  }

}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2000033c 	.word	0x2000033c
 8005014:	40013800 	.word	0x40013800

08005018 <MX_UART4_UART_Init>:

void MX_UART4_UART_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 800501e:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <MX_UART4_UART_Init+0x9c>)
 8005020:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8005022:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005024:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005028:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800502a:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 800502c:	2200      	movs	r2, #0
 800502e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005030:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005032:	2200      	movs	r2, #0
 8005034:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 800503e:	220c      	movs	r2, #12
 8005040:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005044:	2200      	movs	r2, #0
 8005046:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 800504a:	2200      	movs	r2, #0
 800504c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005050:	2200      	movs	r2, #0
 8005052:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005056:	2200      	movs	r2, #0
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 800505c:	2200      	movs	r2, #0
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005060:	4813      	ldr	r0, [pc, #76]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005062:	f003 f981 	bl	8008368 <HAL_UART_Init>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <MX_UART4_UART_Init+0x58>
  {
    Error_Handler();
 800506c:	f000 f826 	bl	80050bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005070:	2100      	movs	r1, #0
 8005072:	480f      	ldr	r0, [pc, #60]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005074:	f003 ff4a 	bl	8008f0c <HAL_UARTEx_SetTxFifoThreshold>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <MX_UART4_UART_Init+0x6a>
  {
    Error_Handler();
 800507e:	f000 f81d 	bl	80050bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005082:	2100      	movs	r1, #0
 8005084:	480a      	ldr	r0, [pc, #40]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005086:	f003 ff7f 	bl	8008f88 <HAL_UARTEx_SetRxFifoThreshold>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <MX_UART4_UART_Init+0x7c>
  {
    Error_Handler();
 8005090:	f000 f814 	bl	80050bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005094:	4806      	ldr	r0, [pc, #24]	; (80050b0 <MX_UART4_UART_Init+0x98>)
 8005096:	f003 ff00 	bl	8008e9a <HAL_UARTEx_DisableFifoMode>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_UART4_UART_Init+0x8c>
  {
    Error_Handler();
 80050a0:	f000 f80c 	bl	80050bc <Error_Handler>
  }
  uart_write_debug("UART4 initialized\r\n", 10);
 80050a4:	210a      	movs	r1, #10
 80050a6:	4804      	ldr	r0, [pc, #16]	; (80050b8 <MX_UART4_UART_Init+0xa0>)
 80050a8:	f000 f812 	bl	80050d0 <uart_write_debug>

}
 80050ac:	bf00      	nop
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	200003cc 	.word	0x200003cc
 80050b4:	40004c00 	.word	0x40004c00
 80050b8:	08010794 	.word	0x08010794

080050bc <Error_Handler>:

void Error_Handler(void){
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 80050c0:	210a      	movs	r1, #10
 80050c2:	4802      	ldr	r0, [pc, #8]	; (80050cc <Error_Handler+0x10>)
 80050c4:	f000 f804 	bl	80050d0 <uart_write_debug>
}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	080107a8 	.word	0x080107a8

080050d0 <uart_write_debug>:





HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	uint8_t i=0;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
	uint8_t *temp;
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb f88e 	bl	8000200 <strlen>
 80050e4:	4603      	mov	r3, r0
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4803      	ldr	r0, [pc, #12]	; (80050fc <uart_write_debug+0x2c>)
 80050ee:	f003 f98b 	bl	8008408 <HAL_UART_Transmit>
 80050f2:	4603      	mov	r3, r0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2000033c 	.word	0x2000033c

08005100 <uart_write_uart4>:

HAL_StatusTypeDef uart_write_uart4(uint8_t *pData, uint32_t Timeout){
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	uint8_t i=0;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
	uint8_t *temp;
	return HAL_UART_Transmit(&huart4,pData,strlen(pData),Timeout);// Sending in normal mode
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fb f876 	bl	8000200 <strlen>
 8005114:	4603      	mov	r3, r0
 8005116:	b29a      	uxth	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4803      	ldr	r0, [pc, #12]	; (800512c <uart_write_uart4+0x2c>)
 800511e:	f003 f973 	bl	8008408 <HAL_UART_Transmit>
 8005122:	4603      	mov	r3, r0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	200003cc 	.word	0x200003cc

08005130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005168 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005134:	f7ff ff12 	bl	8004f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <LoopForever+0x6>)
  ldr r1, =_edata
 800513a:	490d      	ldr	r1, [pc, #52]	; (8005170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <LoopForever+0xe>)
  movs r3, #0
 800513e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005140:	e002      	b.n	8005148 <LoopCopyDataInit>

08005142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005146:	3304      	adds	r3, #4

08005148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800514a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800514c:	d3f9      	bcc.n	8005142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005150:	4c0a      	ldr	r4, [pc, #40]	; (800517c <LoopForever+0x16>)
  movs r3, #0
 8005152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005154:	e001      	b.n	800515a <LoopFillZerobss>

08005156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005158:	3204      	adds	r2, #4

0800515a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800515a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800515c:	d3fb      	bcc.n	8005156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800515e:	f006 fff3 	bl	800c148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005162:	f7ff f93f 	bl	80043e4 <main>

08005166 <LoopForever>:

LoopForever:
    b LoopForever
 8005166:	e7fe      	b.n	8005166 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005168:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800516c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005170:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005174:	080111a4 	.word	0x080111a4
  ldr r2, =_sbss
 8005178:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800517c:	200061c0 	.word	0x200061c0

08005180 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005180:	e7fe      	b.n	8005180 <ADC1_IRQHandler>

08005182 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800518c:	2003      	movs	r0, #3
 800518e:	f000 f902 	bl	8005396 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005192:	200f      	movs	r0, #15
 8005194:	f7ff fd56 	bl	8004c44 <HAL_InitTick>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	71fb      	strb	r3, [r7, #7]
 80051a2:	e001      	b.n	80051a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051a4:	f7ff fc62 	bl	8004a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051a8:	79fb      	ldrb	r3, [r7, #7]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_IncTick+0x20>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <HAL_IncTick+0x24>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4413      	add	r3, r2
 80051c4:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <HAL_IncTick+0x24>)
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000008 	.word	0x20000008
 80051d8:	2000045c 	.word	0x2000045c

080051dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return uwTick;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <HAL_GetTick+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	2000045c 	.word	0x2000045c

080051f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051fc:	f7ff ffee 	bl	80051dc <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d005      	beq.n	800521a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_Delay+0x44>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800521a:	bf00      	nop
 800521c:	f7ff ffde 	bl	80051dc <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	429a      	cmp	r2, r3
 800522a:	d8f7      	bhi.n	800521c <HAL_Delay+0x28>
  {
  }
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000008 	.word	0x20000008

0800523c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <__NVIC_SetPriorityGrouping+0x44>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005258:	4013      	ands	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800526e:	4a04      	ldr	r2, [pc, #16]	; (8005280 <__NVIC_SetPriorityGrouping+0x44>)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	60d3      	str	r3, [r2, #12]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <__NVIC_GetPriorityGrouping+0x18>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	f003 0307 	and.w	r3, r3, #7
}
 8005292:	4618      	mov	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	db0b      	blt.n	80052ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	f003 021f 	and.w	r2, r3, #31
 80052b8:	4907      	ldr	r1, [pc, #28]	; (80052d8 <__NVIC_EnableIRQ+0x38>)
 80052ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2001      	movs	r0, #1
 80052c2:	fa00 f202 	lsl.w	r2, r0, r2
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	e000e100 	.word	0xe000e100

080052dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	6039      	str	r1, [r7, #0]
 80052e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db0a      	blt.n	8005306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	490c      	ldr	r1, [pc, #48]	; (8005328 <__NVIC_SetPriority+0x4c>)
 80052f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fa:	0112      	lsls	r2, r2, #4
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	440b      	add	r3, r1
 8005300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005304:	e00a      	b.n	800531c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4908      	ldr	r1, [pc, #32]	; (800532c <__NVIC_SetPriority+0x50>)
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	3b04      	subs	r3, #4
 8005314:	0112      	lsls	r2, r2, #4
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	440b      	add	r3, r1
 800531a:	761a      	strb	r2, [r3, #24]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	e000e100 	.word	0xe000e100
 800532c:	e000ed00 	.word	0xe000ed00

08005330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005330:	b480      	push	{r7}
 8005332:	b089      	sub	sp, #36	; 0x24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f1c3 0307 	rsb	r3, r3, #7
 800534a:	2b04      	cmp	r3, #4
 800534c:	bf28      	it	cs
 800534e:	2304      	movcs	r3, #4
 8005350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3304      	adds	r3, #4
 8005356:	2b06      	cmp	r3, #6
 8005358:	d902      	bls.n	8005360 <NVIC_EncodePriority+0x30>
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3b03      	subs	r3, #3
 800535e:	e000      	b.n	8005362 <NVIC_EncodePriority+0x32>
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005364:	f04f 32ff 	mov.w	r2, #4294967295
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	401a      	ands	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005378:	f04f 31ff 	mov.w	r1, #4294967295
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa01 f303 	lsl.w	r3, r1, r3
 8005382:	43d9      	mvns	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005388:	4313      	orrs	r3, r2
         );
}
 800538a:	4618      	mov	r0, r3
 800538c:	3724      	adds	r7, #36	; 0x24
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff4c 	bl	800523c <__NVIC_SetPriorityGrouping>
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053be:	f7ff ff61 	bl	8005284 <__NVIC_GetPriorityGrouping>
 80053c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f7ff ffb1 	bl	8005330 <NVIC_EncodePriority>
 80053ce:	4602      	mov	r2, r0
 80053d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff ff80 	bl	80052dc <__NVIC_SetPriority>
}
 80053dc:	bf00      	nop
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff54 	bl	80052a0 <__NVIC_EnableIRQ>
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540e:	e166      	b.n	80056de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2101      	movs	r1, #1
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8158 	beq.w	80056d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d005      	beq.n	8005440 <HAL_GPIO_Init+0x40>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d130      	bne.n	80054a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	2203      	movs	r2, #3
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005476:	2201      	movs	r2, #1
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f003 0201 	and.w	r2, r3, #1
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d017      	beq.n	80054de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2203      	movs	r2, #3
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d123      	bne.n	8005532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	08da      	lsrs	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3208      	adds	r2, #8
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	220f      	movs	r2, #15
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	08da      	lsrs	r2, r3, #3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3208      	adds	r2, #8
 800552c:	6939      	ldr	r1, [r7, #16]
 800552e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	2203      	movs	r2, #3
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4013      	ands	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 0203 	and.w	r2, r3, #3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80b2 	beq.w	80056d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005574:	4b61      	ldr	r3, [pc, #388]	; (80056fc <HAL_GPIO_Init+0x2fc>)
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	4a60      	ldr	r2, [pc, #384]	; (80056fc <HAL_GPIO_Init+0x2fc>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6613      	str	r3, [r2, #96]	; 0x60
 8005580:	4b5e      	ldr	r3, [pc, #376]	; (80056fc <HAL_GPIO_Init+0x2fc>)
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800558c:	4a5c      	ldr	r2, [pc, #368]	; (8005700 <HAL_GPIO_Init+0x300>)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	089b      	lsrs	r3, r3, #2
 8005592:	3302      	adds	r3, #2
 8005594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	220f      	movs	r2, #15
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4013      	ands	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055b6:	d02b      	beq.n	8005610 <HAL_GPIO_Init+0x210>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a52      	ldr	r2, [pc, #328]	; (8005704 <HAL_GPIO_Init+0x304>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d025      	beq.n	800560c <HAL_GPIO_Init+0x20c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a51      	ldr	r2, [pc, #324]	; (8005708 <HAL_GPIO_Init+0x308>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01f      	beq.n	8005608 <HAL_GPIO_Init+0x208>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a50      	ldr	r2, [pc, #320]	; (800570c <HAL_GPIO_Init+0x30c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d019      	beq.n	8005604 <HAL_GPIO_Init+0x204>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a4f      	ldr	r2, [pc, #316]	; (8005710 <HAL_GPIO_Init+0x310>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <HAL_GPIO_Init+0x200>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a4e      	ldr	r2, [pc, #312]	; (8005714 <HAL_GPIO_Init+0x314>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00d      	beq.n	80055fc <HAL_GPIO_Init+0x1fc>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a4d      	ldr	r2, [pc, #308]	; (8005718 <HAL_GPIO_Init+0x318>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <HAL_GPIO_Init+0x1f8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a4c      	ldr	r2, [pc, #304]	; (800571c <HAL_GPIO_Init+0x31c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_GPIO_Init+0x1f4>
 80055f0:	2307      	movs	r3, #7
 80055f2:	e00e      	b.n	8005612 <HAL_GPIO_Init+0x212>
 80055f4:	2308      	movs	r3, #8
 80055f6:	e00c      	b.n	8005612 <HAL_GPIO_Init+0x212>
 80055f8:	2306      	movs	r3, #6
 80055fa:	e00a      	b.n	8005612 <HAL_GPIO_Init+0x212>
 80055fc:	2305      	movs	r3, #5
 80055fe:	e008      	b.n	8005612 <HAL_GPIO_Init+0x212>
 8005600:	2304      	movs	r3, #4
 8005602:	e006      	b.n	8005612 <HAL_GPIO_Init+0x212>
 8005604:	2303      	movs	r3, #3
 8005606:	e004      	b.n	8005612 <HAL_GPIO_Init+0x212>
 8005608:	2302      	movs	r3, #2
 800560a:	e002      	b.n	8005612 <HAL_GPIO_Init+0x212>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_GPIO_Init+0x212>
 8005610:	2300      	movs	r3, #0
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	f002 0203 	and.w	r2, r2, #3
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	4093      	lsls	r3, r2
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005622:	4937      	ldr	r1, [pc, #220]	; (8005700 <HAL_GPIO_Init+0x300>)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005630:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_GPIO_Init+0x320>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	43db      	mvns	r3, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4013      	ands	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005654:	4a32      	ldr	r2, [pc, #200]	; (8005720 <HAL_GPIO_Init+0x320>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800565a:	4b31      	ldr	r3, [pc, #196]	; (8005720 <HAL_GPIO_Init+0x320>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800567e:	4a28      	ldr	r2, [pc, #160]	; (8005720 <HAL_GPIO_Init+0x320>)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005684:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_GPIO_Init+0x320>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	43db      	mvns	r3, r3
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4013      	ands	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056a8:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <HAL_GPIO_Init+0x320>)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056ae:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <HAL_GPIO_Init+0x320>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4013      	ands	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <HAL_GPIO_Init+0x320>)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3301      	adds	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f47f ae91 	bne.w	8005410 <HAL_GPIO_Init+0x10>
  }
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40021000 	.word	0x40021000
 8005700:	40010000 	.word	0x40010000
 8005704:	48000400 	.word	0x48000400
 8005708:	48000800 	.word	0x48000800
 800570c:	48000c00 	.word	0x48000c00
 8005710:	48001000 	.word	0x48001000
 8005714:	48001400 	.word	0x48001400
 8005718:	48001800 	.word	0x48001800
 800571c:	48001c00 	.word	0x48001c00
 8005720:	40010400 	.word	0x40010400

08005724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	807b      	strh	r3, [r7, #2]
 8005730:	4613      	mov	r3, r2
 8005732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005734:	787b      	ldrb	r3, [r7, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005740:	e002      	b.n	8005748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005766:	887a      	ldrh	r2, [r7, #2]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4013      	ands	r3, r2
 800576c:	041a      	lsls	r2, r3, #16
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	43d9      	mvns	r1, r3
 8005772:	887b      	ldrh	r3, [r7, #2]
 8005774:	400b      	ands	r3, r1
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	619a      	str	r2, [r3, #24]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800579e:	4a05      	ldr	r2, [pc, #20]	; (80057b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f806 	bl	80057b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40010400 	.word	0x40010400

080057b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e081      	b.n	80058e4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff f961 	bl	8004abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2224      	movs	r2, #36	; 0x24
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800581e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005844:	609a      	str	r2, [r3, #8]
 8005846:	e006      	b.n	8005856 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005854:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d104      	bne.n	8005868 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005866:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800588a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69d9      	ldr	r1, [r3, #28]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	f040 80f9 	bne.w	8005b06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_I2C_Mem_Write+0x34>
 800591a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0ed      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_I2C_Mem_Write+0x4e>
 8005936:	2302      	movs	r3, #2
 8005938:	e0e6      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005942:	f7ff fc4b 	bl	80051dc <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2319      	movs	r3, #25
 800594e:	2201      	movs	r2, #1
 8005950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fadd 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0d1      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2221      	movs	r2, #33	; 0x21
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2240      	movs	r2, #64	; 0x40
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800598c:	88f8      	ldrh	r0, [r7, #6]
 800598e:	893a      	ldrh	r2, [r7, #8]
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f9ed 	bl	8005d7c <I2C_RequestMemoryWrite>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0a9      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2bff      	cmp	r3, #255	; 0xff
 80059bc:	d90e      	bls.n	80059dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	22ff      	movs	r2, #255	; 0xff
 80059c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	8979      	ldrh	r1, [r7, #10]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fc45 	bl	8006264 <I2C_TransferConfig>
 80059da:	e00f      	b.n	80059fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	8979      	ldrh	r1, [r7, #10]
 80059ee:	2300      	movs	r3, #0
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fc34 	bl	8006264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fac7 	bl	8005f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e07b      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d034      	beq.n	8005ab4 <HAL_I2C_Mem_Write+0x1c8>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d130      	bne.n	8005ab4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fa59 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e04d      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2bff      	cmp	r3, #255	; 0xff
 8005a74:	d90e      	bls.n	8005a94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	22ff      	movs	r2, #255	; 0xff
 8005a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	8979      	ldrh	r1, [r7, #10]
 8005a84:	2300      	movs	r3, #0
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fbe9 	bl	8006264 <I2C_TransferConfig>
 8005a92:	e00f      	b.n	8005ab4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	8979      	ldrh	r1, [r7, #10]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fbd8 	bl	8006264 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d19e      	bne.n	80059fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 faa6 	bl	8006014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e01a      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <HAL_I2C_Mem_Write+0x224>)
 8005ae6:	400b      	ands	r3, r1
 8005ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	fe00e800 	.word	0xfe00e800

08005b14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	817b      	strh	r3, [r7, #10]
 8005b26:	460b      	mov	r3, r1
 8005b28:	813b      	strh	r3, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	f040 80fd 	bne.w	8005d36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_I2C_Mem_Read+0x34>
 8005b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0f1      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2C_Mem_Read+0x4e>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e0ea      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b6a:	f7ff fb37 	bl	80051dc <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2319      	movs	r3, #25
 8005b76:	2201      	movs	r2, #1
 8005b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f9c9 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0d5      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2222      	movs	r2, #34	; 0x22
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2240      	movs	r2, #64	; 0x40
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bb4:	88f8      	ldrh	r0, [r7, #6]
 8005bb6:	893a      	ldrh	r2, [r7, #8]
 8005bb8:	8979      	ldrh	r1, [r7, #10]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f92d 	bl	8005e24 <I2C_RequestMemoryRead>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0ad      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2bff      	cmp	r3, #255	; 0xff
 8005be4:	d90e      	bls.n	8005c04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	8979      	ldrh	r1, [r7, #10]
 8005bf4:	4b52      	ldr	r3, [pc, #328]	; (8005d40 <HAL_I2C_Mem_Read+0x22c>)
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fb31 	bl	8006264 <I2C_TransferConfig>
 8005c02:	e00f      	b.n	8005c24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	8979      	ldrh	r1, [r7, #10]
 8005c16:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_I2C_Mem_Read+0x22c>)
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fb20 	bl	8006264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f970 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e07c      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d034      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x1d0>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d130      	bne.n	8005ce4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f941 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e04d      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2bff      	cmp	r3, #255	; 0xff
 8005ca4:	d90e      	bls.n	8005cc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	8979      	ldrh	r1, [r7, #10]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fad1 	bl	8006264 <I2C_TransferConfig>
 8005cc2:	e00f      	b.n	8005ce4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	8979      	ldrh	r1, [r7, #10]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fac0 	bl	8006264 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d19a      	bne.n	8005c24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f98e 	bl	8006014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e01a      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2220      	movs	r2, #32
 8005d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_I2C_Mem_Read+0x230>)
 8005d16:	400b      	ands	r3, r1
 8005d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	80002400 	.word	0x80002400
 8005d44:	fe00e800 	.word	0xfe00e800

08005d48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
  }
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	8979      	ldrh	r1, [r7, #10]
 8005d9c:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <I2C_RequestMemoryWrite+0xa4>)
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 fa5d 	bl	8006264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f8f0 	bl	8005f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e02c      	b.n	8005e18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc4:	893b      	ldrh	r3, [r7, #8]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8005dce:	e015      	b.n	8005dfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f8d6 	bl	8005f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e012      	b.n	8005e18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005df2:	893b      	ldrh	r3, [r7, #8]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2200      	movs	r2, #0
 8005e04:	2180      	movs	r1, #128	; 0x80
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f884 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	80002000 	.word	0x80002000

08005e24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	8979      	ldrh	r1, [r7, #10]
 8005e44:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <I2C_RequestMemoryRead+0xa4>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fa0a 	bl	8006264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f89d 	bl	8005f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e02c      	b.n	8005ebe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d105      	bne.n	8005e76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e6a:	893b      	ldrh	r3, [r7, #8]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
 8005e74:	e015      	b.n	8005ea2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e76:	893b      	ldrh	r3, [r7, #8]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f883 	bl	8005f94 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e012      	b.n	8005ebe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e98:	893b      	ldrh	r3, [r7, #8]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2140      	movs	r1, #64	; 0x40
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f831 	bl	8005f14 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	80002000 	.word	0x80002000

08005ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d103      	bne.n	8005eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d007      	beq.n	8005f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	619a      	str	r2, [r3, #24]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f24:	e022      	b.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d01e      	beq.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7ff f955 	bl	80051dc <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d113      	bne.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f48:	f043 0220 	orr.w	r2, r3, #32
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e00f      	b.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4013      	ands	r3, r2
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d0cd      	beq.n	8005f26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fa0:	e02c      	b.n	8005ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f870 	bl	800608c <I2C_IsErrorOccurred>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e02a      	b.n	800600c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d01e      	beq.n	8005ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7ff f90d 	bl	80051dc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d113      	bne.n	8005ffc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e007      	b.n	800600c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d1cb      	bne.n	8005fa2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006020:	e028      	b.n	8006074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f830 	bl	800608c <I2C_IsErrorOccurred>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e026      	b.n	8006084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006036:	f7ff f8d1 	bl	80051dc <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d113      	bne.n	8006074 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e007      	b.n	8006084 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d1cf      	bne.n	8006022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d075      	beq.n	80061a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2210      	movs	r2, #16
 80060be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060c0:	e056      	b.n	8006170 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d052      	beq.n	8006170 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7ff f887 	bl	80051dc <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <I2C_IsErrorOccurred+0x54>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d147      	bne.n	8006170 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006102:	d12e      	bne.n	8006162 <I2C_IsErrorOccurred+0xd6>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610a:	d02a      	beq.n	8006162 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800610c:	7cfb      	ldrb	r3, [r7, #19]
 800610e:	2b20      	cmp	r3, #32
 8006110:	d027      	beq.n	8006162 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006120:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006122:	f7ff f85b 	bl	80051dc <HAL_GetTick>
 8006126:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006128:	e01b      	b.n	8006162 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800612a:	f7ff f857 	bl	80051dc <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b19      	cmp	r3, #25
 8006136:	d914      	bls.n	8006162 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b20      	cmp	r3, #32
 800616e:	d1dc      	bne.n	800612a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b20      	cmp	r3, #32
 800617c:	d003      	beq.n	8006186 <I2C_IsErrorOccurred+0xfa>
 800617e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006182:	2b00      	cmp	r3, #0
 8006184:	d09d      	beq.n	80060c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2220      	movs	r2, #32
 8006194:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f043 0304 	orr.w	r3, r3, #4
 800619c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00b      	beq.n	80061ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f043 0302 	orr.w	r3, r3, #2
 8006200:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01c      	beq.n	8006254 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff fe56 	bl	8005ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <I2C_IsErrorOccurred+0x1d4>)
 800622c:	400b      	ands	r3, r1
 800622e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	431a      	orrs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006258:	4618      	mov	r0, r3
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	fe00e800 	.word	0xfe00e800

08006264 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	4613      	mov	r3, r2
 8006274:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006276:	897b      	ldrh	r3, [r7, #10]
 8006278:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800627c:	7a7b      	ldrb	r3, [r7, #9]
 800627e:	041b      	lsls	r3, r3, #16
 8006280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006284:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	4313      	orrs	r3, r2
 800628e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006292:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	0d5b      	lsrs	r3, r3, #21
 800629e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80062a2:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <I2C_TransferConfig+0x60>)
 80062a4:	430b      	orrs	r3, r1
 80062a6:	43db      	mvns	r3, r3
 80062a8:	ea02 0103 	and.w	r1, r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	03ff63ff 	.word	0x03ff63ff

080062c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d138      	bne.n	8006350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e032      	b.n	8006352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800631a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	d139      	bne.n	80063e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800637e:	2302      	movs	r3, #2
 8006380:	e033      	b.n	80063ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2224      	movs	r2, #36	; 0x24
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <HAL_PWREx_GetVoltageRange+0x3c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006408:	d102      	bne.n	8006410 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800640a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800640e:	e00b      	b.n	8006428 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006410:	4b08      	ldr	r3, [pc, #32]	; (8006434 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641e:	d102      	bne.n	8006426 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006424:	e000      	b.n	8006428 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006426:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006428:	4618      	mov	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40007000 	.word	0x40007000

08006438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d141      	bne.n	80064ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006446:	4b4b      	ldr	r3, [pc, #300]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d131      	bne.n	80064b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006454:	4b47      	ldr	r3, [pc, #284]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	4a46      	ldr	r2, [pc, #280]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006464:	4b43      	ldr	r3, [pc, #268]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800646c:	4a41      	ldr	r2, [pc, #260]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006474:	4b40      	ldr	r3, [pc, #256]	; (8006578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2232      	movs	r2, #50	; 0x32
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	4a3f      	ldr	r2, [pc, #252]	; (800657c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	0c9b      	lsrs	r3, r3, #18
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800648a:	e002      	b.n	8006492 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3b01      	subs	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006492:	4b38      	ldr	r3, [pc, #224]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649e:	d102      	bne.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f2      	bne.n	800648c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064a6:	4b33      	ldr	r3, [pc, #204]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b2:	d158      	bne.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e057      	b.n	8006568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064b8:	4b2e      	ldr	r3, [pc, #184]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064be:	4a2d      	ldr	r2, [pc, #180]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80064c8:	e04d      	b.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d141      	bne.n	8006556 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064d2:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064de:	d131      	bne.n	8006544 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064e0:	4b24      	ldr	r3, [pc, #144]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e6:	4a23      	ldr	r2, [pc, #140]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064f0:	4b20      	ldr	r3, [pc, #128]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006500:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2232      	movs	r2, #50	; 0x32
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	0c9b      	lsrs	r3, r3, #18
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006516:	e002      	b.n	800651e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652a:	d102      	bne.n	8006532 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f2      	bne.n	8006518 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653e:	d112      	bne.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e011      	b.n	8006568 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800654c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006554:	e007      	b.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006556:	4b07      	ldr	r3, [pc, #28]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800655e:	4a05      	ldr	r2, [pc, #20]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006564:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40007000 	.word	0x40007000
 8006578:	20000000 	.word	0x20000000
 800657c:	431bde83 	.word	0x431bde83

08006580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f000 bc08 	b.w	8006da4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006594:	4b96      	ldr	r3, [pc, #600]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800659e:	4b94      	ldr	r3, [pc, #592]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80e4 	beq.w	800677e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <HAL_RCC_OscConfig+0x4c>
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	f040 808b 	bne.w	80066da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	f040 8087 	bne.w	80066da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065cc:	4b88      	ldr	r3, [pc, #544]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <HAL_RCC_OscConfig+0x64>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e3df      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	4b81      	ldr	r3, [pc, #516]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <HAL_RCC_OscConfig+0x7e>
 80065f4:	4b7e      	ldr	r3, [pc, #504]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065fc:	e005      	b.n	800660a <HAL_RCC_OscConfig+0x8a>
 80065fe:	4b7c      	ldr	r3, [pc, #496]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006604:	091b      	lsrs	r3, r3, #4
 8006606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660a:	4293      	cmp	r3, r2
 800660c:	d223      	bcs.n	8006656 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fdfe 	bl	8007214 <RCC_SetFlashLatencyFromMSIRange>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e3c0      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006622:	4b73      	ldr	r3, [pc, #460]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a72      	ldr	r2, [pc, #456]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4b70      	ldr	r3, [pc, #448]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	496d      	ldr	r1, [pc, #436]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800663c:	4313      	orrs	r3, r2
 800663e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006640:	4b6b      	ldr	r3, [pc, #428]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	4968      	ldr	r1, [pc, #416]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006650:	4313      	orrs	r3, r2
 8006652:	604b      	str	r3, [r1, #4]
 8006654:	e025      	b.n	80066a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006656:	4b66      	ldr	r3, [pc, #408]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a65      	ldr	r2, [pc, #404]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800665c:	f043 0308 	orr.w	r3, r3, #8
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4b63      	ldr	r3, [pc, #396]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	4960      	ldr	r1, [pc, #384]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006670:	4313      	orrs	r3, r2
 8006672:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006674:	4b5e      	ldr	r3, [pc, #376]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	495b      	ldr	r1, [pc, #364]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fdbe 	bl	8007214 <RCC_SetFlashLatencyFromMSIRange>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e380      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066a2:	f000 fcc1 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 80066a6:	4602      	mov	r2, r0
 80066a8:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	4950      	ldr	r1, [pc, #320]	; (80067f4 <HAL_RCC_OscConfig+0x274>)
 80066b4:	5ccb      	ldrb	r3, [r1, r3]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	4a4e      	ldr	r2, [pc, #312]	; (80067f8 <HAL_RCC_OscConfig+0x278>)
 80066c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066c2:	4b4e      	ldr	r3, [pc, #312]	; (80067fc <HAL_RCC_OscConfig+0x27c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fabc 	bl	8004c44 <HAL_InitTick>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d052      	beq.n	800677c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	e364      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d032      	beq.n	8006748 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066e2:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066ee:	f7fe fd75 	bl	80051dc <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066f6:	f7fe fd71 	bl	80051dc <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e34d      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006708:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f0      	beq.n	80066f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006714:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a35      	ldr	r2, [pc, #212]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800671a:	f043 0308 	orr.w	r3, r3, #8
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	4930      	ldr	r1, [pc, #192]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800672e:	4313      	orrs	r3, r2
 8006730:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006732:	4b2f      	ldr	r3, [pc, #188]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	492b      	ldr	r1, [pc, #172]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006742:	4313      	orrs	r3, r2
 8006744:	604b      	str	r3, [r1, #4]
 8006746:	e01a      	b.n	800677e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a28      	ldr	r2, [pc, #160]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006754:	f7fe fd42 	bl	80051dc <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800675c:	f7fe fd3e 	bl	80051dc <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e31a      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0x1dc>
 800677a:	e000      	b.n	800677e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800677c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d073      	beq.n	8006872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d005      	beq.n	800679c <HAL_RCC_OscConfig+0x21c>
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b0c      	cmp	r3, #12
 8006794:	d10e      	bne.n	80067b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d10b      	bne.n	80067b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800679c:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d063      	beq.n	8006870 <HAL_RCC_OscConfig+0x2f0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d15f      	bne.n	8006870 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e2f7      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d106      	bne.n	80067cc <HAL_RCC_OscConfig+0x24c>
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a0b      	ldr	r2, [pc, #44]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80067c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e025      	b.n	8006818 <HAL_RCC_OscConfig+0x298>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d4:	d114      	bne.n	8006800 <HAL_RCC_OscConfig+0x280>
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a05      	ldr	r2, [pc, #20]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80067dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a02      	ldr	r2, [pc, #8]	; (80067f0 <HAL_RCC_OscConfig+0x270>)
 80067e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e013      	b.n	8006818 <HAL_RCC_OscConfig+0x298>
 80067f0:	40021000 	.word	0x40021000
 80067f4:	0801092c 	.word	0x0801092c
 80067f8:	20000000 	.word	0x20000000
 80067fc:	20000004 	.word	0x20000004
 8006800:	4ba0      	ldr	r3, [pc, #640]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a9f      	ldr	r2, [pc, #636]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	4b9d      	ldr	r3, [pc, #628]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a9c      	ldr	r2, [pc, #624]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fe fcdc 	bl	80051dc <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006828:	f7fe fcd8 	bl	80051dc <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	; 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e2b4      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683a:	4b92      	ldr	r3, [pc, #584]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0x2a8>
 8006846:	e014      	b.n	8006872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006848:	f7fe fcc8 	bl	80051dc <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006850:	f7fe fcc4 	bl	80051dc <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b64      	cmp	r3, #100	; 0x64
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e2a0      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006862:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x2d0>
 800686e:	e000      	b.n	8006872 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d060      	beq.n	8006940 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b04      	cmp	r3, #4
 8006882:	d005      	beq.n	8006890 <HAL_RCC_OscConfig+0x310>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b0c      	cmp	r3, #12
 8006888:	d119      	bne.n	80068be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d116      	bne.n	80068be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006890:	4b7c      	ldr	r3, [pc, #496]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_OscConfig+0x328>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e27d      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a8:	4b76      	ldr	r3, [pc, #472]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	061b      	lsls	r3, r3, #24
 80068b6:	4973      	ldr	r1, [pc, #460]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068bc:	e040      	b.n	8006940 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d023      	beq.n	800690e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c6:	4b6f      	ldr	r3, [pc, #444]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a6e      	ldr	r2, [pc, #440]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80068cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d2:	f7fe fc83 	bl	80051dc <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068da:	f7fe fc7f 	bl	80051dc <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e25b      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ec:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f8:	4b62      	ldr	r3, [pc, #392]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	061b      	lsls	r3, r3, #24
 8006906:	495f      	ldr	r1, [pc, #380]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006908:	4313      	orrs	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
 800690c:	e018      	b.n	8006940 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800690e:	4b5d      	ldr	r3, [pc, #372]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a5c      	ldr	r2, [pc, #368]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691a:	f7fe fc5f 	bl	80051dc <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006922:	f7fe fc5b 	bl	80051dc <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e237      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006934:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f0      	bne.n	8006922 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d03c      	beq.n	80069c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01c      	beq.n	800698e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006954:	4b4b      	ldr	r3, [pc, #300]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800695a:	4a4a      	ldr	r2, [pc, #296]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006964:	f7fe fc3a 	bl	80051dc <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696c:	f7fe fc36 	bl	80051dc <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e212      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800697e:	4b41      	ldr	r3, [pc, #260]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0ef      	beq.n	800696c <HAL_RCC_OscConfig+0x3ec>
 800698c:	e01b      	b.n	80069c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800698e:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006994:	4a3b      	ldr	r2, [pc, #236]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fe fc1d 	bl	80051dc <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a6:	f7fe fc19 	bl	80051dc <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e1f5      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069b8:	4b32      	ldr	r3, [pc, #200]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80069ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ef      	bne.n	80069a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 80a6 	beq.w	8006b20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069d4:	2300      	movs	r3, #0
 80069d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069d8:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e4:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	4a26      	ldr	r2, [pc, #152]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80069ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ee:	6593      	str	r3, [r2, #88]	; 0x58
 80069f0:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fc:	2301      	movs	r3, #1
 80069fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a00:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <HAL_RCC_OscConfig+0x508>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d118      	bne.n	8006a3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <HAL_RCC_OscConfig+0x508>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <HAL_RCC_OscConfig+0x508>)
 8006a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a18:	f7fe fbe0 	bl	80051dc <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a20:	f7fe fbdc 	bl	80051dc <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e1b8      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a32:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <HAL_RCC_OscConfig+0x508>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d108      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4d8>
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4c:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a56:	e029      	b.n	8006aac <HAL_RCC_OscConfig+0x52c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d115      	bne.n	8006a8c <HAL_RCC_OscConfig+0x50c>
 8006a60:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006a68:	f043 0304 	orr.w	r3, r3, #4
 8006a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	4a03      	ldr	r2, [pc, #12]	; (8006a84 <HAL_RCC_OscConfig+0x504>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a80:	e014      	b.n	8006aac <HAL_RCC_OscConfig+0x52c>
 8006a82:	bf00      	nop
 8006a84:	40021000 	.word	0x40021000
 8006a88:	40007000 	.word	0x40007000
 8006a8c:	4b9d      	ldr	r3, [pc, #628]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	4a9c      	ldr	r2, [pc, #624]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a9c:	4b99      	ldr	r3, [pc, #612]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	4a98      	ldr	r2, [pc, #608]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d016      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fe fb92 	bl	80051dc <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006abc:	f7fe fb8e 	bl	80051dc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e168      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ad2:	4b8c      	ldr	r3, [pc, #560]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0ed      	beq.n	8006abc <HAL_RCC_OscConfig+0x53c>
 8006ae0:	e015      	b.n	8006b0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae2:	f7fe fb7b 	bl	80051dc <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aea:	f7fe fb77 	bl	80051dc <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e151      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b00:	4b80      	ldr	r3, [pc, #512]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1ed      	bne.n	8006aea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b0e:	7ffb      	ldrb	r3, [r7, #31]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d105      	bne.n	8006b20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b14:	4b7b      	ldr	r3, [pc, #492]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	4a7a      	ldr	r2, [pc, #488]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d03c      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01c      	beq.n	8006b6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b3a:	4a72      	ldr	r2, [pc, #456]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fe fb4a 	bl	80051dc <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b4c:	f7fe fb46 	bl	80051dc <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e122      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b5e:	4b69      	ldr	r3, [pc, #420]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0ef      	beq.n	8006b4c <HAL_RCC_OscConfig+0x5cc>
 8006b6c:	e01b      	b.n	8006ba6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b6e:	4b65      	ldr	r3, [pc, #404]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b74:	4a63      	ldr	r2, [pc, #396]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fe fb2d 	bl	80051dc <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b86:	f7fe fb29 	bl	80051dc <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e105      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b98:	4b5a      	ldr	r3, [pc, #360]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1ef      	bne.n	8006b86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80f9 	beq.w	8006da2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f040 80cf 	bne.w	8006d58 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006bba:	4b52      	ldr	r3, [pc, #328]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f003 0203 	and.w	r2, r3, #3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d12c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d123      	bne.n	8006c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d11b      	bne.n	8006c28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d113      	bne.n	8006c28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d109      	bne.n	8006c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	3b01      	subs	r3, #1
 8006c22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d071      	beq.n	8006d0c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d068      	beq.n	8006d00 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c2e:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d105      	bne.n	8006c46 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006c3a:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e0ac      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c4a:	4b2e      	ldr	r3, [pc, #184]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c56:	f7fe fac1 	bl	80051dc <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5e:	f7fe fabd 	bl	80051dc <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e099      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c70:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f0      	bne.n	8006c5e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c7c:	4b21      	ldr	r3, [pc, #132]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <HAL_RCC_OscConfig+0x788>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c8c:	3a01      	subs	r2, #1
 8006c8e:	0112      	lsls	r2, r2, #4
 8006c90:	4311      	orrs	r1, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c96:	0212      	lsls	r2, r2, #8
 8006c98:	4311      	orrs	r1, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c9e:	0852      	lsrs	r2, r2, #1
 8006ca0:	3a01      	subs	r2, #1
 8006ca2:	0552      	lsls	r2, r2, #21
 8006ca4:	4311      	orrs	r1, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006caa:	0852      	lsrs	r2, r2, #1
 8006cac:	3a01      	subs	r2, #1
 8006cae:	0652      	lsls	r2, r2, #25
 8006cb0:	4311      	orrs	r1, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cb6:	06d2      	lsls	r2, r2, #27
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	4912      	ldr	r1, [pc, #72]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cc0:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a0f      	ldr	r2, [pc, #60]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cd8:	f7fe fa80 	bl	80051dc <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce0:	f7fe fa7c 	bl	80051dc <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e058      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf2:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <HAL_RCC_OscConfig+0x784>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cfe:	e050      	b.n	8006da2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e04f      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
 8006d04:	40021000 	.word	0x40021000
 8006d08:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d0c:	4b27      	ldr	r3, [pc, #156]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d144      	bne.n	8006da2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d18:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a23      	ldr	r2, [pc, #140]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d24:	4b21      	ldr	r3, [pc, #132]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4a20      	ldr	r2, [pc, #128]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d30:	f7fe fa54 	bl	80051dc <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d38:	f7fe fa50 	bl	80051dc <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e02c      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d4a:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x7b8>
 8006d56:	e024      	b.n	8006da2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d01f      	beq.n	8006d9e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a12      	ldr	r2, [pc, #72]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6a:	f7fe fa37 	bl	80051dc <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d72:	f7fe fa33 	bl	80051dc <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e00f      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f0      	bne.n	8006d72 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	4905      	ldr	r1, [pc, #20]	; (8006dac <HAL_RCC_OscConfig+0x82c>)
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <HAL_RCC_OscConfig+0x830>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60cb      	str	r3, [r1, #12]
 8006d9c:	e001      	b.n	8006da2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40021000 	.word	0x40021000
 8006db0:	feeefffc 	.word	0xfeeefffc

08006db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e11d      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dcc:	4b90      	ldr	r3, [pc, #576]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d910      	bls.n	8006dfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dda:	4b8d      	ldr	r3, [pc, #564]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 020f 	bic.w	r2, r3, #15
 8006de2:	498b      	ldr	r1, [pc, #556]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dea:	4b89      	ldr	r3, [pc, #548]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d001      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e105      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	4b81      	ldr	r3, [pc, #516]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d908      	bls.n	8006e2a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e18:	4b7e      	ldr	r3, [pc, #504]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	497b      	ldr	r1, [pc, #492]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d079      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d11e      	bne.n	8006e7c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e3e:	4b75      	ldr	r3, [pc, #468]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e0dc      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006e4e:	f000 fa3b 	bl	80072c8 <RCC_GetSysClockFreqFromPLLSource>
 8006e52:	4603      	mov	r3, r0
 8006e54:	4a70      	ldr	r2, [pc, #448]	; (8007018 <HAL_RCC_ClockConfig+0x264>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d946      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006e5a:	4b6e      	ldr	r3, [pc, #440]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d140      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e66:	4b6b      	ldr	r3, [pc, #428]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6e:	4a69      	ldr	r2, [pc, #420]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e035      	b.n	8006ee8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d107      	bne.n	8006e94 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e84:	4b63      	ldr	r3, [pc, #396]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d115      	bne.n	8006ebc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e0b9      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e9c:	4b5d      	ldr	r3, [pc, #372]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0ad      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eac:	4b59      	ldr	r3, [pc, #356]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0a5      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006ebc:	f000 f8b4 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	4a55      	ldr	r2, [pc, #340]	; (8007018 <HAL_RCC_ClockConfig+0x264>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d90f      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006ec8:	4b52      	ldr	r3, [pc, #328]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ed4:	4b4f      	ldr	r3, [pc, #316]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006edc:	4a4d      	ldr	r2, [pc, #308]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ee8:	4b4a      	ldr	r3, [pc, #296]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 0203 	bic.w	r2, r3, #3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4947      	ldr	r1, [pc, #284]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006efa:	f7fe f96f 	bl	80051dc <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f00:	e00a      	b.n	8006f18 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f02:	f7fe f96b 	bl	80051dc <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e077      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f18:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 020c 	and.w	r2, r3, #12
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d1eb      	bne.n	8006f02 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d105      	bne.n	8006f3c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f30:	4b38      	ldr	r3, [pc, #224]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4a37      	ldr	r2, [pc, #220]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d010      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	4b31      	ldr	r3, [pc, #196]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d208      	bcs.n	8006f6a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f58:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	492b      	ldr	r1, [pc, #172]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f6a:	4b29      	ldr	r3, [pc, #164]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d210      	bcs.n	8006f9a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f023 020f 	bic.w	r2, r3, #15
 8006f80:	4923      	ldr	r1, [pc, #140]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f88:	4b21      	ldr	r3, [pc, #132]	; (8007010 <HAL_RCC_ClockConfig+0x25c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d001      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e036      	b.n	8007008 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa6:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4918      	ldr	r1, [pc, #96]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fc4:	4b13      	ldr	r3, [pc, #76]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	4910      	ldr	r1, [pc, #64]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fd8:	f000 f826 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <HAL_RCC_ClockConfig+0x260>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	091b      	lsrs	r3, r3, #4
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	490c      	ldr	r1, [pc, #48]	; (800701c <HAL_RCC_ClockConfig+0x268>)
 8006fea:	5ccb      	ldrb	r3, [r1, r3]
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff4:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <HAL_RCC_ClockConfig+0x26c>)
 8006ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <HAL_RCC_ClockConfig+0x270>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd fe21 	bl	8004c44 <HAL_InitTick>
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]

  return status;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40022000 	.word	0x40022000
 8007014:	40021000 	.word	0x40021000
 8007018:	04c4b400 	.word	0x04c4b400
 800701c:	0801092c 	.word	0x0801092c
 8007020:	20000000 	.word	0x20000000
 8007024:	20000004 	.word	0x20000004

08007028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	; 0x24
 800702c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	2300      	movs	r3, #0
 8007034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007036:	4b3e      	ldr	r3, [pc, #248]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 030c 	and.w	r3, r3, #12
 800703e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007040:	4b3b      	ldr	r3, [pc, #236]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_RCC_GetSysClockFreq+0x34>
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b0c      	cmp	r3, #12
 8007054:	d121      	bne.n	800709a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d11e      	bne.n	800709a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800705c:	4b34      	ldr	r3, [pc, #208]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d107      	bne.n	8007078 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007068:	4b31      	ldr	r3, [pc, #196]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 800706a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800706e:	0a1b      	lsrs	r3, r3, #8
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	61fb      	str	r3, [r7, #28]
 8007076:	e005      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007078:	4b2d      	ldr	r3, [pc, #180]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007084:	4a2b      	ldr	r2, [pc, #172]	; (8007134 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800708c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10d      	bne.n	80070b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007098:	e00a      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d102      	bne.n	80070a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070a0:	4b25      	ldr	r3, [pc, #148]	; (8007138 <HAL_RCC_GetSysClockFreq+0x110>)
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e004      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d101      	bne.n	80070b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070ac:	4b23      	ldr	r3, [pc, #140]	; (800713c <HAL_RCC_GetSysClockFreq+0x114>)
 80070ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2b0c      	cmp	r3, #12
 80070b4:	d134      	bne.n	8007120 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070b6:	4b1e      	ldr	r3, [pc, #120]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d003      	beq.n	80070ce <HAL_RCC_GetSysClockFreq+0xa6>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d003      	beq.n	80070d4 <HAL_RCC_GetSysClockFreq+0xac>
 80070cc:	e005      	b.n	80070da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070ce:	4b1a      	ldr	r3, [pc, #104]	; (8007138 <HAL_RCC_GetSysClockFreq+0x110>)
 80070d0:	617b      	str	r3, [r7, #20]
      break;
 80070d2:	e005      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCC_GetSysClockFreq+0x114>)
 80070d6:	617b      	str	r3, [r7, #20]
      break;
 80070d8:	e002      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	617b      	str	r3, [r7, #20]
      break;
 80070de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070e0:	4b13      	ldr	r3, [pc, #76]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	3301      	adds	r3, #1
 80070ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070ee:	4b10      	ldr	r3, [pc, #64]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	fb03 f202 	mul.w	r2, r3, r2
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <HAL_RCC_GetSysClockFreq+0x108>)
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	0e5b      	lsrs	r3, r3, #25
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	3301      	adds	r3, #1
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007120:	69bb      	ldr	r3, [r7, #24]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3724      	adds	r7, #36	; 0x24
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	08010944 	.word	0x08010944
 8007138:	00f42400 	.word	0x00f42400
 800713c:	007a1200 	.word	0x007a1200

08007140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007144:	4b03      	ldr	r3, [pc, #12]	; (8007154 <HAL_RCC_GetHCLKFreq+0x14>)
 8007146:	681b      	ldr	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000000 	.word	0x20000000

08007158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800715c:	f7ff fff0 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 8007160:	4602      	mov	r2, r0
 8007162:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	4904      	ldr	r1, [pc, #16]	; (8007180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800716e:	5ccb      	ldrb	r3, [r1, r3]
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007178:	4618      	mov	r0, r3
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40021000 	.word	0x40021000
 8007180:	0801093c 	.word	0x0801093c

08007184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007188:	f7ff ffda 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 800718c:	4602      	mov	r2, r0
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	0adb      	lsrs	r3, r3, #11
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	4904      	ldr	r1, [pc, #16]	; (80071ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800719a:	5ccb      	ldrb	r3, [r1, r3]
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40021000 	.word	0x40021000
 80071ac:	0801093c 	.word	0x0801093c

080071b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	220f      	movs	r2, #15
 80071be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80071c0:	4b12      	ldr	r3, [pc, #72]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0203 	and.w	r2, r3, #3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80071cc:	4b0f      	ldr	r3, [pc, #60]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <HAL_RCC_GetClockConfig+0x60>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40021000 	.word	0x40021000
 8007210:	40022000 	.word	0x40022000

08007214 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007220:	4b27      	ldr	r3, [pc, #156]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800722c:	f7ff f8e4 	bl	80063f8 <HAL_PWREx_GetVoltageRange>
 8007230:	6178      	str	r0, [r7, #20]
 8007232:	e014      	b.n	800725e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007234:	4b22      	ldr	r3, [pc, #136]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007238:	4a21      	ldr	r2, [pc, #132]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800723a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723e:	6593      	str	r3, [r2, #88]	; 0x58
 8007240:	4b1f      	ldr	r3, [pc, #124]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800724c:	f7ff f8d4 	bl	80063f8 <HAL_PWREx_GetVoltageRange>
 8007250:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007252:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007256:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800725c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007264:	d10b      	bne.n	800727e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b80      	cmp	r3, #128	; 0x80
 800726a:	d913      	bls.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2ba0      	cmp	r3, #160	; 0xa0
 8007270:	d902      	bls.n	8007278 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007272:	2302      	movs	r3, #2
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	e00d      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007278:	2301      	movs	r3, #1
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	e00a      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b7f      	cmp	r3, #127	; 0x7f
 8007282:	d902      	bls.n	800728a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007284:	2302      	movs	r3, #2
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	e004      	b.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b70      	cmp	r3, #112	; 0x70
 800728e:	d101      	bne.n	8007294 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007290:	2301      	movs	r3, #1
 8007292:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f023 020f 	bic.w	r2, r3, #15
 800729c:	4909      	ldr	r1, [pc, #36]	; (80072c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d001      	beq.n	80072b6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40022000 	.word	0x40022000

080072c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ce:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d00b      	beq.n	80072f6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d825      	bhi.n	8007330 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d008      	beq.n	80072fc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d11f      	bne.n	8007330 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80072f2:	613b      	str	r3, [r7, #16]
    break;
 80072f4:	e01f      	b.n	8007336 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80072f6:	4b25      	ldr	r3, [pc, #148]	; (800738c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80072f8:	613b      	str	r3, [r7, #16]
    break;
 80072fa:	e01c      	b.n	8007336 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80072fc:	4b21      	ldr	r3, [pc, #132]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d107      	bne.n	8007318 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007308:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800730a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e005      	b.n	8007324 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007318:	4b1a      	ldr	r3, [pc, #104]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007324:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800732c:	613b      	str	r3, [r7, #16]
    break;
 800732e:	e002      	b.n	8007336 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
    break;
 8007334:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007336:	4b13      	ldr	r3, [pc, #76]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	091b      	lsrs	r3, r3, #4
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	3301      	adds	r3, #1
 8007342:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	0a1b      	lsrs	r3, r3, #8
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	fb03 f202 	mul.w	r2, r3, r2
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	0e5b      	lsrs	r3, r3, #25
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	3301      	adds	r3, #1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007376:	683b      	ldr	r3, [r7, #0]
}
 8007378:	4618      	mov	r0, r3
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40021000 	.word	0x40021000
 8007388:	00f42400 	.word	0x00f42400
 800738c:	007a1200 	.word	0x007a1200
 8007390:	08010944 	.word	0x08010944

08007394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800739c:	2300      	movs	r3, #0
 800739e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073a0:	2300      	movs	r3, #0
 80073a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d040      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b4:	2b80      	cmp	r3, #128	; 0x80
 80073b6:	d02a      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073b8:	2b80      	cmp	r3, #128	; 0x80
 80073ba:	d825      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80073bc:	2b60      	cmp	r3, #96	; 0x60
 80073be:	d026      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073c0:	2b60      	cmp	r3, #96	; 0x60
 80073c2:	d821      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d006      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d81d      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d010      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80073d4:	e018      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073d6:	4b89      	ldr	r3, [pc, #548]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	4a88      	ldr	r2, [pc, #544]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073e2:	e015      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3304      	adds	r3, #4
 80073e8:	2100      	movs	r1, #0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fb02 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073f4:	e00c      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3320      	adds	r3, #32
 80073fa:	2100      	movs	r1, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fbed 	bl	8007bdc <RCCEx_PLLSAI2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	74fb      	strb	r3, [r7, #19]
      break;
 800740c:	e000      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800740e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007410:	7cfb      	ldrb	r3, [r7, #19]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007416:	4b79      	ldr	r3, [pc, #484]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800741c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007424:	4975      	ldr	r1, [pc, #468]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800742c:	e001      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742e:	7cfb      	ldrb	r3, [r7, #19]
 8007430:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d047      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007446:	d030      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744c:	d82a      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800744e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007452:	d02a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007458:	d824      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800745a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800745e:	d008      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007464:	d81e      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800746a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746e:	d010      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007470:	e018      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007472:	4b62      	ldr	r3, [pc, #392]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4a61      	ldr	r2, [pc, #388]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800747e:	e015      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	2100      	movs	r1, #0
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fab4 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007490:	e00c      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3320      	adds	r3, #32
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fb9f 	bl	8007bdc <RCCEx_PLLSAI2_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074a2:	e003      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	74fb      	strb	r3, [r7, #19]
      break;
 80074a8:	e000      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80074aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ac:	7cfb      	ldrb	r3, [r7, #19]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074b2:	4b52      	ldr	r3, [pc, #328]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	494e      	ldr	r1, [pc, #312]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80074c8:	e001      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	7cfb      	ldrb	r3, [r7, #19]
 80074cc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 809f 	beq.w	800761a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074dc:	2300      	movs	r3, #0
 80074de:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074e0:	4b46      	ldr	r3, [pc, #280]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074f6:	4b41      	ldr	r3, [pc, #260]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	4a40      	ldr	r2, [pc, #256]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007500:	6593      	str	r3, [r2, #88]	; 0x58
 8007502:	4b3e      	ldr	r3, [pc, #248]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800750a:	60bb      	str	r3, [r7, #8]
 800750c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800750e:	2301      	movs	r3, #1
 8007510:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007512:	4b3b      	ldr	r3, [pc, #236]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a3a      	ldr	r2, [pc, #232]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800751e:	f7fd fe5d 	bl	80051dc <HAL_GetTick>
 8007522:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007524:	e009      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007526:	f7fd fe59 	bl	80051dc <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d902      	bls.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	74fb      	strb	r3, [r7, #19]
        break;
 8007538:	e005      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800753a:	4b31      	ldr	r3, [pc, #196]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0ef      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007546:	7cfb      	ldrb	r3, [r7, #19]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d15b      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800754c:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800754e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007556:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01f      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	429a      	cmp	r2, r3
 8007568:	d019      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800756a:	4b24      	ldr	r3, [pc, #144]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007574:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007576:	4b21      	ldr	r3, [pc, #132]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757c:	4a1f      	ldr	r2, [pc, #124]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800757e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007586:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800758e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007596:	4a19      	ldr	r2, [pc, #100]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d016      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fd fe18 	bl	80051dc <HAL_GetTick>
 80075ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ae:	e00b      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b0:	f7fd fe14 	bl	80051dc <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80075be:	4293      	cmp	r3, r2
 80075c0:	d902      	bls.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	74fb      	strb	r3, [r7, #19]
            break;
 80075c6:	e006      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0ec      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80075d6:	7cfb      	ldrb	r3, [r7, #19]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10c      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075dc:	4b07      	ldr	r3, [pc, #28]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	4903      	ldr	r1, [pc, #12]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075f4:	e008      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075f6:	7cfb      	ldrb	r3, [r7, #19]
 80075f8:	74bb      	strb	r3, [r7, #18]
 80075fa:	e005      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80075fc:	40021000 	.word	0x40021000
 8007600:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007604:	7cfb      	ldrb	r3, [r7, #19]
 8007606:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007608:	7c7b      	ldrb	r3, [r7, #17]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d105      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800760e:	4ba0      	ldr	r3, [pc, #640]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	4a9f      	ldr	r2, [pc, #636]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007618:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007626:	4b9a      	ldr	r3, [pc, #616]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	f023 0203 	bic.w	r2, r3, #3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007634:	4996      	ldr	r1, [pc, #600]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007648:	4b91      	ldr	r3, [pc, #580]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764e:	f023 020c 	bic.w	r2, r3, #12
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	498e      	ldr	r1, [pc, #568]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800766a:	4b89      	ldr	r3, [pc, #548]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	4985      	ldr	r1, [pc, #532]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800768c:	4b80      	ldr	r3, [pc, #512]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769a:	497d      	ldr	r1, [pc, #500]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0310 	and.w	r3, r3, #16
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076ae:	4b78      	ldr	r3, [pc, #480]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076bc:	4974      	ldr	r1, [pc, #464]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076d0:	4b6f      	ldr	r3, [pc, #444]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	496c      	ldr	r1, [pc, #432]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076f2:	4b67      	ldr	r3, [pc, #412]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007700:	4963      	ldr	r1, [pc, #396]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007714:	4b5e      	ldr	r3, [pc, #376]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007722:	495b      	ldr	r1, [pc, #364]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007736:	4b56      	ldr	r3, [pc, #344]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	4952      	ldr	r1, [pc, #328]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007758:	4b4d      	ldr	r3, [pc, #308]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	494a      	ldr	r1, [pc, #296]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800777a:	4b45      	ldr	r3, [pc, #276]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007788:	4941      	ldr	r1, [pc, #260]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800779c:	4b3c      	ldr	r3, [pc, #240]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800779e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077a2:	f023 0203 	bic.w	r2, r3, #3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077aa:	4939      	ldr	r1, [pc, #228]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d028      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077be:	4b34      	ldr	r3, [pc, #208]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077cc:	4930      	ldr	r1, [pc, #192]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077dc:	d106      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077de:	4b2c      	ldr	r3, [pc, #176]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	4a2b      	ldr	r2, [pc, #172]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e8:	60d3      	str	r3, [r2, #12]
 80077ea:	e011      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077f4:	d10c      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3304      	adds	r3, #4
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f8f9 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007806:	7cfb      	ldrb	r3, [r7, #19]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d04d      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007824:	d108      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800782c:	4a18      	ldr	r2, [pc, #96]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800782e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007832:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007836:	e012      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800783a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007844:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007848:	4b11      	ldr	r3, [pc, #68]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	490e      	ldr	r1, [pc, #56]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007858:	4313      	orrs	r3, r2
 800785a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007866:	d106      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007868:	4b09      	ldr	r3, [pc, #36]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	4a08      	ldr	r2, [pc, #32]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800786e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007872:	60d3      	str	r3, [r2, #12]
 8007874:	e020      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800787e:	d109      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007880:	4b03      	ldr	r3, [pc, #12]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	4a02      	ldr	r2, [pc, #8]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788a:	60d3      	str	r3, [r2, #12]
 800788c:	e014      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800788e:	bf00      	nop
 8007890:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3304      	adds	r3, #4
 80078a2:	2101      	movs	r1, #1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 f8a5 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078ae:	7cfb      	ldrb	r3, [r7, #19]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80078b4:	7cfb      	ldrb	r3, [r7, #19]
 80078b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d028      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078c4:	4b4a      	ldr	r3, [pc, #296]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078d2:	4947      	ldr	r1, [pc, #284]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e2:	d106      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ee:	60d3      	str	r3, [r2, #12]
 80078f0:	e011      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078fa:	d10c      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2101      	movs	r1, #1
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f876 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800790c:	7cfb      	ldrb	r3, [r7, #19]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007912:	7cfb      	ldrb	r3, [r7, #19]
 8007914:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01e      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007922:	4b33      	ldr	r3, [pc, #204]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007928:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007932:	492f      	ldr	r1, [pc, #188]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007934:	4313      	orrs	r3, r2
 8007936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007944:	d10c      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	2102      	movs	r1, #2
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f851 	bl	80079f4 <RCCEx_PLLSAI1_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800795c:	7cfb      	ldrb	r3, [r7, #19]
 800795e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800796c:	4b20      	ldr	r3, [pc, #128]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800796e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007972:	f023 0204 	bic.w	r2, r3, #4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797c:	491c      	ldr	r1, [pc, #112]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007990:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007996:	f023 0218 	bic.w	r2, r3, #24
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a0:	4913      	ldr	r1, [pc, #76]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80079b4:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c4:	490a      	ldr	r1, [pc, #40]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079d6:	d105      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40021000 	.word	0x40021000

080079f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a02:	4b72      	ldr	r3, [pc, #456]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00e      	beq.n	8007a2c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a0e:	4b6f      	ldr	r3, [pc, #444]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f003 0203 	and.w	r2, r3, #3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d103      	bne.n	8007a26 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
       ||
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d142      	bne.n	8007aac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
 8007a2a:	e03f      	b.n	8007aac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d018      	beq.n	8007a66 <RCCEx_PLLSAI1_Config+0x72>
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d825      	bhi.n	8007a84 <RCCEx_PLLSAI1_Config+0x90>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d002      	beq.n	8007a42 <RCCEx_PLLSAI1_Config+0x4e>
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d009      	beq.n	8007a54 <RCCEx_PLLSAI1_Config+0x60>
 8007a40:	e020      	b.n	8007a84 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a42:	4b62      	ldr	r3, [pc, #392]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d11d      	bne.n	8007a8a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a52:	e01a      	b.n	8007a8a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a54:	4b5d      	ldr	r3, [pc, #372]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d116      	bne.n	8007a8e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a64:	e013      	b.n	8007a8e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a66:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10f      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a72:	4b56      	ldr	r3, [pc, #344]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a82:	e006      	b.n	8007a92 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	e004      	b.n	8007a94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007a8a:	bf00      	nop
 8007a8c:	e002      	b.n	8007a94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d108      	bne.n	8007aac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007a9a:	4b4c      	ldr	r3, [pc, #304]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f023 0203 	bic.w	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4949      	ldr	r1, [pc, #292]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 8086 	bne.w	8007bc0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ab4:	4b45      	ldr	r3, [pc, #276]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a44      	ldr	r2, [pc, #272]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac0:	f7fd fb8c 	bl	80051dc <HAL_GetTick>
 8007ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ac6:	e009      	b.n	8007adc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ac8:	f7fd fb88 	bl	80051dc <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d902      	bls.n	8007adc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8007ada:	e005      	b.n	8007ae8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007adc:	4b3b      	ldr	r3, [pc, #236]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1ef      	bne.n	8007ac8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d168      	bne.n	8007bc0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d113      	bne.n	8007b1c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007af4:	4b35      	ldr	r3, [pc, #212]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6892      	ldr	r2, [r2, #8]
 8007b00:	0211      	lsls	r1, r2, #8
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68d2      	ldr	r2, [r2, #12]
 8007b06:	06d2      	lsls	r2, r2, #27
 8007b08:	4311      	orrs	r1, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6852      	ldr	r2, [r2, #4]
 8007b0e:	3a01      	subs	r2, #1
 8007b10:	0112      	lsls	r2, r2, #4
 8007b12:	430a      	orrs	r2, r1
 8007b14:	492d      	ldr	r1, [pc, #180]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	610b      	str	r3, [r1, #16]
 8007b1a:	e02d      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d115      	bne.n	8007b4e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b22:	4b2a      	ldr	r3, [pc, #168]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6892      	ldr	r2, [r2, #8]
 8007b2e:	0211      	lsls	r1, r2, #8
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6912      	ldr	r2, [r2, #16]
 8007b34:	0852      	lsrs	r2, r2, #1
 8007b36:	3a01      	subs	r2, #1
 8007b38:	0552      	lsls	r2, r2, #21
 8007b3a:	4311      	orrs	r1, r2
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6852      	ldr	r2, [r2, #4]
 8007b40:	3a01      	subs	r2, #1
 8007b42:	0112      	lsls	r2, r2, #4
 8007b44:	430a      	orrs	r2, r1
 8007b46:	4921      	ldr	r1, [pc, #132]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	610b      	str	r3, [r1, #16]
 8007b4c:	e014      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b4e:	4b1f      	ldr	r3, [pc, #124]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6892      	ldr	r2, [r2, #8]
 8007b5a:	0211      	lsls	r1, r2, #8
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6952      	ldr	r2, [r2, #20]
 8007b60:	0852      	lsrs	r2, r2, #1
 8007b62:	3a01      	subs	r2, #1
 8007b64:	0652      	lsls	r2, r2, #25
 8007b66:	4311      	orrs	r1, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6852      	ldr	r2, [r2, #4]
 8007b6c:	3a01      	subs	r2, #1
 8007b6e:	0112      	lsls	r2, r2, #4
 8007b70:	430a      	orrs	r2, r1
 8007b72:	4916      	ldr	r1, [pc, #88]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b78:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b84:	f7fd fb2a 	bl	80051dc <HAL_GetTick>
 8007b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b8a:	e009      	b.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b8c:	f7fd fb26 	bl	80051dc <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d902      	bls.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8007b9e:	e005      	b.n	8007bac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0ef      	beq.n	8007b8c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007bb2:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	4904      	ldr	r1, [pc, #16]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	07ff800f 	.word	0x07ff800f
 8007bd4:	ff9f800f 	.word	0xff9f800f
 8007bd8:	f9ff800f 	.word	0xf9ff800f

08007bdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bea:	4b72      	ldr	r3, [pc, #456]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00e      	beq.n	8007c14 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007bf6:	4b6f      	ldr	r3, [pc, #444]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f003 0203 	and.w	r2, r3, #3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d103      	bne.n	8007c0e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
       ||
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d142      	bne.n	8007c94 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
 8007c12:	e03f      	b.n	8007c94 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d018      	beq.n	8007c4e <RCCEx_PLLSAI2_Config+0x72>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d825      	bhi.n	8007c6c <RCCEx_PLLSAI2_Config+0x90>
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d002      	beq.n	8007c2a <RCCEx_PLLSAI2_Config+0x4e>
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d009      	beq.n	8007c3c <RCCEx_PLLSAI2_Config+0x60>
 8007c28:	e020      	b.n	8007c6c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c2a:	4b62      	ldr	r3, [pc, #392]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d11d      	bne.n	8007c72 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c3a:	e01a      	b.n	8007c72 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c3c:	4b5d      	ldr	r3, [pc, #372]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d116      	bne.n	8007c76 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c4c:	e013      	b.n	8007c76 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c4e:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10f      	bne.n	8007c7a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c5a:	4b56      	ldr	r3, [pc, #344]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c6a:	e006      	b.n	8007c7a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c70:	e004      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d108      	bne.n	8007c94 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007c82:	4b4c      	ldr	r3, [pc, #304]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f023 0203 	bic.w	r2, r3, #3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4949      	ldr	r1, [pc, #292]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f040 8086 	bne.w	8007da8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007c9c:	4b45      	ldr	r3, [pc, #276]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a44      	ldr	r2, [pc, #272]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca8:	f7fd fa98 	bl	80051dc <HAL_GetTick>
 8007cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cae:	e009      	b.n	8007cc4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cb0:	f7fd fa94 	bl	80051dc <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d902      	bls.n	8007cc4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	73fb      	strb	r3, [r7, #15]
        break;
 8007cc2:	e005      	b.n	8007cd0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cc4:	4b3b      	ldr	r3, [pc, #236]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1ef      	bne.n	8007cb0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d168      	bne.n	8007da8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d113      	bne.n	8007d04 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cdc:	4b35      	ldr	r3, [pc, #212]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cde:	695a      	ldr	r2, [r3, #20]
 8007ce0:	4b35      	ldr	r3, [pc, #212]	; (8007db8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6892      	ldr	r2, [r2, #8]
 8007ce8:	0211      	lsls	r1, r2, #8
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68d2      	ldr	r2, [r2, #12]
 8007cee:	06d2      	lsls	r2, r2, #27
 8007cf0:	4311      	orrs	r1, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	3a01      	subs	r2, #1
 8007cf8:	0112      	lsls	r2, r2, #4
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	492d      	ldr	r1, [pc, #180]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	614b      	str	r3, [r1, #20]
 8007d02:	e02d      	b.n	8007d60 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d115      	bne.n	8007d36 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d0a:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d0c:	695a      	ldr	r2, [r3, #20]
 8007d0e:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1e0>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6892      	ldr	r2, [r2, #8]
 8007d16:	0211      	lsls	r1, r2, #8
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6912      	ldr	r2, [r2, #16]
 8007d1c:	0852      	lsrs	r2, r2, #1
 8007d1e:	3a01      	subs	r2, #1
 8007d20:	0552      	lsls	r2, r2, #21
 8007d22:	4311      	orrs	r1, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6852      	ldr	r2, [r2, #4]
 8007d28:	3a01      	subs	r2, #1
 8007d2a:	0112      	lsls	r2, r2, #4
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	4921      	ldr	r1, [pc, #132]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	614b      	str	r3, [r1, #20]
 8007d34:	e014      	b.n	8007d60 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6892      	ldr	r2, [r2, #8]
 8007d42:	0211      	lsls	r1, r2, #8
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6952      	ldr	r2, [r2, #20]
 8007d48:	0852      	lsrs	r2, r2, #1
 8007d4a:	3a01      	subs	r2, #1
 8007d4c:	0652      	lsls	r2, r2, #25
 8007d4e:	4311      	orrs	r1, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6852      	ldr	r2, [r2, #4]
 8007d54:	3a01      	subs	r2, #1
 8007d56:	0112      	lsls	r2, r2, #4
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	4916      	ldr	r1, [pc, #88]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d60:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6c:	f7fd fa36 	bl	80051dc <HAL_GetTick>
 8007d70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d72:	e009      	b.n	8007d88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d74:	f7fd fa32 	bl	80051dc <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d902      	bls.n	8007d88 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
          break;
 8007d86:	e005      	b.n	8007d94 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0ef      	beq.n	8007d74 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	4904      	ldr	r1, [pc, #16]	; (8007db4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40021000 	.word	0x40021000
 8007db8:	07ff800f 	.word	0x07ff800f
 8007dbc:	ff9f800f 	.word	0xff9f800f
 8007dc0:	f9ff800f 	.word	0xf9ff800f

08007dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e049      	b.n	8007e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f841 	bl	8007e72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f000 f9f8 	bl	80081f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d001      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e04f      	b.n	8007f40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a23      	ldr	r2, [pc, #140]	; (8007f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d01d      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0x76>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eca:	d018      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0x76>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d013      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0x76>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1e      	ldr	r2, [pc, #120]	; (8007f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00e      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0x76>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1c      	ldr	r2, [pc, #112]	; (8007f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d009      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0x76>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1b      	ldr	r2, [pc, #108]	; (8007f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d004      	beq.n	8007efe <HAL_TIM_Base_Start_IT+0x76>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d115      	bne.n	8007f2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	4b17      	ldr	r3, [pc, #92]	; (8007f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b06      	cmp	r3, #6
 8007f0e:	d015      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0xb4>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f16:	d011      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f28:	e008      	b.n	8007f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e000      	b.n	8007f3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	40012c00 	.word	0x40012c00
 8007f50:	40000400 	.word	0x40000400
 8007f54:	40000800 	.word	0x40000800
 8007f58:	40000c00 	.word	0x40000c00
 8007f5c:	40013400 	.word	0x40013400
 8007f60:	40014000 	.word	0x40014000
 8007f64:	00010007 	.word	0x00010007

08007f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d122      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d11b      	bne.n	8007fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0202 	mvn.w	r2, #2
 8007f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f905 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f8f7 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f908 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d122      	bne.n	8008018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d11b      	bne.n	8008018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f06f 0204 	mvn.w	r2, #4
 8007fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f8db 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8008004:	e005      	b.n	8008012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f8cd 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f8de 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	2b08      	cmp	r3, #8
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b08      	cmp	r3, #8
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0208 	mvn.w	r2, #8
 800803c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2204      	movs	r2, #4
 8008042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f8b1 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8a3 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8b4 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2b10      	cmp	r3, #16
 8008078:	d122      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b10      	cmp	r3, #16
 8008086:	d11b      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0210 	mvn.w	r2, #16
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2208      	movs	r2, #8
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f887 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f879 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f88a 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d10e      	bne.n	80080ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d107      	bne.n	80080ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0201 	mvn.w	r2, #1
 80080e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fc fc9e 	bl	8004a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f6:	2b80      	cmp	r3, #128	; 0x80
 80080f8:	d10e      	bne.n	8008118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008104:	2b80      	cmp	r3, #128	; 0x80
 8008106:	d107      	bne.n	8008118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f914 	bl	8008340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008126:	d10e      	bne.n	8008146 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d107      	bne.n	8008146 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800813e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f907 	bl	8008354 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d10e      	bne.n	8008172 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d107      	bne.n	8008172 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800816a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f838 	bl	80081e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b20      	cmp	r3, #32
 800817e:	d10e      	bne.n	800819e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b20      	cmp	r3, #32
 800818c:	d107      	bne.n	800819e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f06f 0220 	mvn.w	r2, #32
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8c7 	bl	800832c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
	...

080081f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a40      	ldr	r2, [pc, #256]	; (800830c <TIM_Base_SetConfig+0x114>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d013      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008216:	d00f      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a3d      	ldr	r2, [pc, #244]	; (8008310 <TIM_Base_SetConfig+0x118>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00b      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a3c      	ldr	r2, [pc, #240]	; (8008314 <TIM_Base_SetConfig+0x11c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d007      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a3b      	ldr	r2, [pc, #236]	; (8008318 <TIM_Base_SetConfig+0x120>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d003      	beq.n	8008238 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a3a      	ldr	r2, [pc, #232]	; (800831c <TIM_Base_SetConfig+0x124>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d108      	bne.n	800824a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2f      	ldr	r2, [pc, #188]	; (800830c <TIM_Base_SetConfig+0x114>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d01f      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008258:	d01b      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2c      	ldr	r2, [pc, #176]	; (8008310 <TIM_Base_SetConfig+0x118>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d017      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2b      	ldr	r2, [pc, #172]	; (8008314 <TIM_Base_SetConfig+0x11c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2a      	ldr	r2, [pc, #168]	; (8008318 <TIM_Base_SetConfig+0x120>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00f      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a29      	ldr	r2, [pc, #164]	; (800831c <TIM_Base_SetConfig+0x124>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00b      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a28      	ldr	r2, [pc, #160]	; (8008320 <TIM_Base_SetConfig+0x128>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d007      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a27      	ldr	r2, [pc, #156]	; (8008324 <TIM_Base_SetConfig+0x12c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_Base_SetConfig+0x9a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a26      	ldr	r2, [pc, #152]	; (8008328 <TIM_Base_SetConfig+0x130>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d108      	bne.n	80082a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a10      	ldr	r2, [pc, #64]	; (800830c <TIM_Base_SetConfig+0x114>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00f      	beq.n	80082f0 <TIM_Base_SetConfig+0xf8>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a12      	ldr	r2, [pc, #72]	; (800831c <TIM_Base_SetConfig+0x124>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00b      	beq.n	80082f0 <TIM_Base_SetConfig+0xf8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a11      	ldr	r2, [pc, #68]	; (8008320 <TIM_Base_SetConfig+0x128>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d007      	beq.n	80082f0 <TIM_Base_SetConfig+0xf8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a10      	ldr	r2, [pc, #64]	; (8008324 <TIM_Base_SetConfig+0x12c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_Base_SetConfig+0xf8>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <TIM_Base_SetConfig+0x130>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d103      	bne.n	80082f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	615a      	str	r2, [r3, #20]
}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40012c00 	.word	0x40012c00
 8008310:	40000400 	.word	0x40000400
 8008314:	40000800 	.word	0x40000800
 8008318:	40000c00 	.word	0x40000c00
 800831c:	40013400 	.word	0x40013400
 8008320:	40014000 	.word	0x40014000
 8008324:	40014400 	.word	0x40014400
 8008328:	40014800 	.word	0x40014800

0800832c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e042      	b.n	8008400 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7fc fbfb 	bl	8004b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2224      	movs	r2, #36	; 0x24
 8008396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0201 	bic.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8c4 	bl	8008538 <UART_SetConfig>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e022      	b.n	8008400 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fbb4 	bl	8008b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0201 	orr.w	r2, r2, #1
 80083f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fc3b 	bl	8008c74 <UART_CheckIdleState>
 80083fe:	4603      	mov	r3, r0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af02      	add	r7, sp, #8
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	4613      	mov	r3, r2
 8008416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841e:	2b20      	cmp	r3, #32
 8008420:	f040 8084 	bne.w	800852c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <HAL_UART_Transmit+0x28>
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e07c      	b.n	800852e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_UART_Transmit+0x3a>
 800843e:	2302      	movs	r3, #2
 8008440:	e075      	b.n	800852e <HAL_UART_Transmit+0x126>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2221      	movs	r2, #33	; 0x21
 8008456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800845a:	f7fc febf 	bl	80051dc <HAL_GetTick>
 800845e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008478:	d108      	bne.n	800848c <HAL_UART_Transmit+0x84>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	e003      	b.n	8008494 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008490:	2300      	movs	r3, #0
 8008492:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800849c:	e02d      	b.n	80084fa <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2200      	movs	r2, #0
 80084a6:	2180      	movs	r1, #128	; 0x80
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fc2e 	bl	8008d0a <UART_WaitOnFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e03a      	b.n	800852e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	881a      	ldrh	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ca:	b292      	uxth	r2, r2
 80084cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	3302      	adds	r3, #2
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	e008      	b.n	80084e8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	b292      	uxth	r2, r2
 80084e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	3301      	adds	r3, #1
 80084e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1cb      	bne.n	800849e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	2140      	movs	r1, #64	; 0x40
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 fbfa 	bl	8008d0a <UART_WaitOnFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e006      	b.n	800852e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2220      	movs	r2, #32
 8008524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	e000      	b.n	800852e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800853c:	b08c      	sub	sp, #48	; 0x30
 800853e:	af00      	add	r7, sp, #0
 8008540:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	431a      	orrs	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	431a      	orrs	r2, r3
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	4313      	orrs	r3, r2
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4baa      	ldr	r3, [pc, #680]	; (8008810 <UART_SetConfig+0x2d8>)
 8008568:	4013      	ands	r3, r2
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008570:	430b      	orrs	r3, r1
 8008572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a9f      	ldr	r2, [pc, #636]	; (8008814 <UART_SetConfig+0x2dc>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a0:	4313      	orrs	r3, r2
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	f023 010f 	bic.w	r1, r3, #15
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a90      	ldr	r2, [pc, #576]	; (8008818 <UART_SetConfig+0x2e0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d125      	bne.n	8008628 <UART_SetConfig+0xf0>
 80085dc:	4b8f      	ldr	r3, [pc, #572]	; (800881c <UART_SetConfig+0x2e4>)
 80085de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d81a      	bhi.n	8008620 <UART_SetConfig+0xe8>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0xb8>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008611 	.word	0x08008611
 80085f8:	08008609 	.word	0x08008609
 80085fc:	08008619 	.word	0x08008619
 8008600:	2301      	movs	r3, #1
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e116      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008608:	2302      	movs	r3, #2
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e112      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008610:	2304      	movs	r3, #4
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e10e      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008618:	2308      	movs	r3, #8
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e10a      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008620:	2310      	movs	r3, #16
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008626:	e106      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a7c      	ldr	r2, [pc, #496]	; (8008820 <UART_SetConfig+0x2e8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d138      	bne.n	80086a4 <UART_SetConfig+0x16c>
 8008632:	4b7a      	ldr	r3, [pc, #488]	; (800881c <UART_SetConfig+0x2e4>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008638:	f003 030c 	and.w	r3, r3, #12
 800863c:	2b0c      	cmp	r3, #12
 800863e:	d82d      	bhi.n	800869c <UART_SetConfig+0x164>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x110>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	0800867d 	.word	0x0800867d
 800864c:	0800869d 	.word	0x0800869d
 8008650:	0800869d 	.word	0x0800869d
 8008654:	0800869d 	.word	0x0800869d
 8008658:	0800868d 	.word	0x0800868d
 800865c:	0800869d 	.word	0x0800869d
 8008660:	0800869d 	.word	0x0800869d
 8008664:	0800869d 	.word	0x0800869d
 8008668:	08008685 	.word	0x08008685
 800866c:	0800869d 	.word	0x0800869d
 8008670:	0800869d 	.word	0x0800869d
 8008674:	0800869d 	.word	0x0800869d
 8008678:	08008695 	.word	0x08008695
 800867c:	2300      	movs	r3, #0
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e0d8      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008684:	2302      	movs	r3, #2
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868a:	e0d4      	b.n	8008836 <UART_SetConfig+0x2fe>
 800868c:	2304      	movs	r3, #4
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008692:	e0d0      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008694:	2308      	movs	r3, #8
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800869a:	e0cc      	b.n	8008836 <UART_SetConfig+0x2fe>
 800869c:	2310      	movs	r3, #16
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a2:	e0c8      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a5e      	ldr	r2, [pc, #376]	; (8008824 <UART_SetConfig+0x2ec>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d125      	bne.n	80086fa <UART_SetConfig+0x1c2>
 80086ae:	4b5b      	ldr	r3, [pc, #364]	; (800881c <UART_SetConfig+0x2e4>)
 80086b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086b8:	2b30      	cmp	r3, #48	; 0x30
 80086ba:	d016      	beq.n	80086ea <UART_SetConfig+0x1b2>
 80086bc:	2b30      	cmp	r3, #48	; 0x30
 80086be:	d818      	bhi.n	80086f2 <UART_SetConfig+0x1ba>
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d00a      	beq.n	80086da <UART_SetConfig+0x1a2>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d814      	bhi.n	80086f2 <UART_SetConfig+0x1ba>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <UART_SetConfig+0x19a>
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d008      	beq.n	80086e2 <UART_SetConfig+0x1aa>
 80086d0:	e00f      	b.n	80086f2 <UART_SetConfig+0x1ba>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d8:	e0ad      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086da:	2302      	movs	r3, #2
 80086dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e0:	e0a9      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086e2:	2304      	movs	r3, #4
 80086e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e8:	e0a5      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086ea:	2308      	movs	r3, #8
 80086ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f0:	e0a1      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086f2:	2310      	movs	r3, #16
 80086f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f8:	e09d      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a4a      	ldr	r2, [pc, #296]	; (8008828 <UART_SetConfig+0x2f0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d125      	bne.n	8008750 <UART_SetConfig+0x218>
 8008704:	4b45      	ldr	r3, [pc, #276]	; (800881c <UART_SetConfig+0x2e4>)
 8008706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800870a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800870e:	2bc0      	cmp	r3, #192	; 0xc0
 8008710:	d016      	beq.n	8008740 <UART_SetConfig+0x208>
 8008712:	2bc0      	cmp	r3, #192	; 0xc0
 8008714:	d818      	bhi.n	8008748 <UART_SetConfig+0x210>
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d00a      	beq.n	8008730 <UART_SetConfig+0x1f8>
 800871a:	2b80      	cmp	r3, #128	; 0x80
 800871c:	d814      	bhi.n	8008748 <UART_SetConfig+0x210>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <UART_SetConfig+0x1f0>
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d008      	beq.n	8008738 <UART_SetConfig+0x200>
 8008726:	e00f      	b.n	8008748 <UART_SetConfig+0x210>
 8008728:	2300      	movs	r3, #0
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872e:	e082      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008730:	2302      	movs	r3, #2
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008736:	e07e      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873e:	e07a      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008746:	e076      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874e:	e072      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a35      	ldr	r2, [pc, #212]	; (800882c <UART_SetConfig+0x2f4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d12a      	bne.n	80087b0 <UART_SetConfig+0x278>
 800875a:	4b30      	ldr	r3, [pc, #192]	; (800881c <UART_SetConfig+0x2e4>)
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008768:	d01a      	beq.n	80087a0 <UART_SetConfig+0x268>
 800876a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800876e:	d81b      	bhi.n	80087a8 <UART_SetConfig+0x270>
 8008770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008774:	d00c      	beq.n	8008790 <UART_SetConfig+0x258>
 8008776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877a:	d815      	bhi.n	80087a8 <UART_SetConfig+0x270>
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <UART_SetConfig+0x250>
 8008780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008784:	d008      	beq.n	8008798 <UART_SetConfig+0x260>
 8008786:	e00f      	b.n	80087a8 <UART_SetConfig+0x270>
 8008788:	2300      	movs	r3, #0
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878e:	e052      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008790:	2302      	movs	r3, #2
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008796:	e04e      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008798:	2304      	movs	r3, #4
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879e:	e04a      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087a0:	2308      	movs	r3, #8
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a6:	e046      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087a8:	2310      	movs	r3, #16
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ae:	e042      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a17      	ldr	r2, [pc, #92]	; (8008814 <UART_SetConfig+0x2dc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d13a      	bne.n	8008830 <UART_SetConfig+0x2f8>
 80087ba:	4b18      	ldr	r3, [pc, #96]	; (800881c <UART_SetConfig+0x2e4>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087c8:	d01a      	beq.n	8008800 <UART_SetConfig+0x2c8>
 80087ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ce:	d81b      	bhi.n	8008808 <UART_SetConfig+0x2d0>
 80087d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d4:	d00c      	beq.n	80087f0 <UART_SetConfig+0x2b8>
 80087d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087da:	d815      	bhi.n	8008808 <UART_SetConfig+0x2d0>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <UART_SetConfig+0x2b0>
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e4:	d008      	beq.n	80087f8 <UART_SetConfig+0x2c0>
 80087e6:	e00f      	b.n	8008808 <UART_SetConfig+0x2d0>
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e022      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087f0:	2302      	movs	r3, #2
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e01e      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087f8:	2304      	movs	r3, #4
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e01a      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008800:	2308      	movs	r3, #8
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e016      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008808:	2310      	movs	r3, #16
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e012      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008810:	cfff69f3 	.word	0xcfff69f3
 8008814:	40008000 	.word	0x40008000
 8008818:	40013800 	.word	0x40013800
 800881c:	40021000 	.word	0x40021000
 8008820:	40004400 	.word	0x40004400
 8008824:	40004800 	.word	0x40004800
 8008828:	40004c00 	.word	0x40004c00
 800882c:	40005000 	.word	0x40005000
 8008830:	2310      	movs	r3, #16
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4aae      	ldr	r2, [pc, #696]	; (8008af4 <UART_SetConfig+0x5bc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	f040 8097 	bne.w	8008970 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008846:	2b08      	cmp	r3, #8
 8008848:	d823      	bhi.n	8008892 <UART_SetConfig+0x35a>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0x318>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008875 	.word	0x08008875
 8008854:	08008893 	.word	0x08008893
 8008858:	0800887d 	.word	0x0800887d
 800885c:	08008893 	.word	0x08008893
 8008860:	08008883 	.word	0x08008883
 8008864:	08008893 	.word	0x08008893
 8008868:	08008893 	.word	0x08008893
 800886c:	08008893 	.word	0x08008893
 8008870:	0800888b 	.word	0x0800888b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008874:	f7fe fc70 	bl	8007158 <HAL_RCC_GetPCLK1Freq>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800887a:	e010      	b.n	800889e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800887c:	4b9e      	ldr	r3, [pc, #632]	; (8008af8 <UART_SetConfig+0x5c0>)
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008880:	e00d      	b.n	800889e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008882:	f7fe fbd1 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8008886:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008888:	e009      	b.n	800889e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008890:	e005      	b.n	800889e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800889c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8130 	beq.w	8008b06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	4a94      	ldr	r2, [pc, #592]	; (8008afc <UART_SetConfig+0x5c4>)
 80088ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4413      	add	r3, r2
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d305      	bcc.n	80088d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088dc:	e113      	b.n	8008b06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	2200      	movs	r2, #0
 80088e2:	60bb      	str	r3, [r7, #8]
 80088e4:	60fa      	str	r2, [r7, #12]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	4a84      	ldr	r2, [pc, #528]	; (8008afc <UART_SetConfig+0x5c4>)
 80088ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2200      	movs	r2, #0
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008900:	f7f8 f9ba 	bl	8000c78 <__aeabi_uldivmod>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	020b      	lsls	r3, r1, #8
 8008916:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800891a:	0202      	lsls	r2, r0, #8
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	6849      	ldr	r1, [r1, #4]
 8008920:	0849      	lsrs	r1, r1, #1
 8008922:	2000      	movs	r0, #0
 8008924:	460c      	mov	r4, r1
 8008926:	4605      	mov	r5, r0
 8008928:	eb12 0804 	adds.w	r8, r2, r4
 800892c:	eb43 0905 	adc.w	r9, r3, r5
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	469a      	mov	sl, r3
 8008938:	4693      	mov	fp, r2
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	4640      	mov	r0, r8
 8008940:	4649      	mov	r1, r9
 8008942:	f7f8 f999 	bl	8000c78 <__aeabi_uldivmod>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4613      	mov	r3, r2
 800894c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008954:	d308      	bcc.n	8008968 <UART_SetConfig+0x430>
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800895c:	d204      	bcs.n	8008968 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	e0ce      	b.n	8008b06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800896e:	e0ca      	b.n	8008b06 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008978:	d166      	bne.n	8008a48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800897a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800897e:	2b08      	cmp	r3, #8
 8008980:	d827      	bhi.n	80089d2 <UART_SetConfig+0x49a>
 8008982:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <UART_SetConfig+0x450>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089ad 	.word	0x080089ad
 800898c:	080089b5 	.word	0x080089b5
 8008990:	080089bd 	.word	0x080089bd
 8008994:	080089d3 	.word	0x080089d3
 8008998:	080089c3 	.word	0x080089c3
 800899c:	080089d3 	.word	0x080089d3
 80089a0:	080089d3 	.word	0x080089d3
 80089a4:	080089d3 	.word	0x080089d3
 80089a8:	080089cb 	.word	0x080089cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ac:	f7fe fbd4 	bl	8007158 <HAL_RCC_GetPCLK1Freq>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089b2:	e014      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089b4:	f7fe fbe6 	bl	8007184 <HAL_RCC_GetPCLK2Freq>
 80089b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089ba:	e010      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089bc:	4b4e      	ldr	r3, [pc, #312]	; (8008af8 <UART_SetConfig+0x5c0>)
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089c0:	e00d      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089c2:	f7fe fb31 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 80089c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089c8:	e009      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089d0:	e005      	b.n	80089de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8090 	beq.w	8008b06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	4a44      	ldr	r2, [pc, #272]	; (8008afc <UART_SetConfig+0x5c4>)
 80089ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f8:	005a      	lsls	r2, r3, #1
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	441a      	add	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	2b0f      	cmp	r3, #15
 8008a10:	d916      	bls.n	8008a40 <UART_SetConfig+0x508>
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a18:	d212      	bcs.n	8008a40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f023 030f 	bic.w	r3, r3, #15
 8008a22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	8bfb      	ldrh	r3, [r7, #30]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	8bfa      	ldrh	r2, [r7, #30]
 8008a3c:	60da      	str	r2, [r3, #12]
 8008a3e:	e062      	b.n	8008b06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a46:	e05e      	b.n	8008b06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d828      	bhi.n	8008aa2 <UART_SetConfig+0x56a>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <UART_SetConfig+0x520>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008a85 	.word	0x08008a85
 8008a60:	08008a8d 	.word	0x08008a8d
 8008a64:	08008aa3 	.word	0x08008aa3
 8008a68:	08008a93 	.word	0x08008a93
 8008a6c:	08008aa3 	.word	0x08008aa3
 8008a70:	08008aa3 	.word	0x08008aa3
 8008a74:	08008aa3 	.word	0x08008aa3
 8008a78:	08008a9b 	.word	0x08008a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a7c:	f7fe fb6c 	bl	8007158 <HAL_RCC_GetPCLK1Freq>
 8008a80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a82:	e014      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a84:	f7fe fb7e 	bl	8007184 <HAL_RCC_GetPCLK2Freq>
 8008a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a8a:	e010      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <UART_SetConfig+0x5c0>)
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a90:	e00d      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a92:	f7fe fac9 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8008a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a98:	e009      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008aa0:	e005      	b.n	8008aae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008aac:	bf00      	nop
    }

    if (pclk != 0U)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d028      	beq.n	8008b06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	4a10      	ldr	r2, [pc, #64]	; (8008afc <UART_SetConfig+0x5c4>)
 8008aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	441a      	add	r2, r3
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	2b0f      	cmp	r3, #15
 8008adc:	d910      	bls.n	8008b00 <UART_SetConfig+0x5c8>
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae4:	d20c      	bcs.n	8008b00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60da      	str	r2, [r3, #12]
 8008af0:	e009      	b.n	8008b06 <UART_SetConfig+0x5ce>
 8008af2:	bf00      	nop
 8008af4:	40008000 	.word	0x40008000
 8008af8:	00f42400 	.word	0x00f42400
 8008afc:	08010974 	.word	0x08010974
      }
      else
      {
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3730      	adds	r7, #48	; 0x30
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01a      	beq.n	8008c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2e:	d10a      	bne.n	8008c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	605a      	str	r2, [r3, #4]
  }
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c84:	f7fc faaa 	bl	80051dc <HAL_GetTick>
 8008c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d10e      	bne.n	8008cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f82f 	bl	8008d0a <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e025      	b.n	8008d02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d10e      	bne.n	8008ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f819 	bl	8008d0a <UART_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e00f      	b.n	8008d02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b09c      	sub	sp, #112	; 0x70
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	603b      	str	r3, [r7, #0]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1a:	e0a9      	b.n	8008e70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	f000 80a5 	beq.w	8008e70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d26:	f7fc fa59 	bl	80051dc <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d302      	bcc.n	8008d3c <UART_WaitOnFlagUntilTimeout+0x32>
 8008d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d140      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d50:	667b      	str	r3, [r7, #100]	; 0x64
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e6      	bne.n	8008d3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	663b      	str	r3, [r7, #96]	; 0x60
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e069      	b.n	8008e92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0304 	and.w	r3, r3, #4
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d051      	beq.n	8008e70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dda:	d149      	bne.n	8008e70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008de4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
 8008e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e6      	bne.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3308      	adds	r3, #8
 8008e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e38:	623a      	str	r2, [r7, #32]
 8008e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e010      	b.n	8008e92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69da      	ldr	r2, [r3, #28]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	bf0c      	ite	eq
 8008e80:	2301      	moveq	r3, #1
 8008e82:	2300      	movne	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	461a      	mov	r2, r3
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	f43f af46 	beq.w	8008d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3770      	adds	r7, #112	; 0x70
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e027      	b.n	8008f00 <HAL_UARTEx_DisableFifoMode+0x66>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2224      	movs	r2, #36	; 0x24
 8008ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0201 	bic.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ede:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e02d      	b.n	8008f80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2224      	movs	r2, #36	; 0x24
 8008f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0201 	bic.w	r2, r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f84f 	bl	8009004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e02d      	b.n	8008ffc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2224      	movs	r2, #36	; 0x24
 8008fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0201 	bic.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f811 	bl	8009004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009010:	2b00      	cmp	r3, #0
 8009012:	d108      	bne.n	8009026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009024:	e031      	b.n	800908a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009026:	2308      	movs	r3, #8
 8009028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800902a:	2308      	movs	r3, #8
 800902c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	0e5b      	lsrs	r3, r3, #25
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	0f5b      	lsrs	r3, r3, #29
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	7b3a      	ldrb	r2, [r7, #12]
 8009052:	4911      	ldr	r1, [pc, #68]	; (8009098 <UARTEx_SetNbDataToProcess+0x94>)
 8009054:	5c8a      	ldrb	r2, [r1, r2]
 8009056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800905a:	7b3a      	ldrb	r2, [r7, #12]
 800905c:	490f      	ldr	r1, [pc, #60]	; (800909c <UARTEx_SetNbDataToProcess+0x98>)
 800905e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009060:	fb93 f3f2 	sdiv	r3, r3, r2
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	7b7a      	ldrb	r2, [r7, #13]
 8009070:	4909      	ldr	r1, [pc, #36]	; (8009098 <UARTEx_SetNbDataToProcess+0x94>)
 8009072:	5c8a      	ldrb	r2, [r1, r2]
 8009074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009078:	7b7a      	ldrb	r2, [r7, #13]
 800907a:	4908      	ldr	r1, [pc, #32]	; (800909c <UARTEx_SetNbDataToProcess+0x98>)
 800907c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800907e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	0801098c 	.word	0x0801098c
 800909c:	08010994 	.word	0x08010994

080090a0 <__NVIC_SetPriority>:
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	db0a      	blt.n	80090ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	490c      	ldr	r1, [pc, #48]	; (80090ec <__NVIC_SetPriority+0x4c>)
 80090ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090be:	0112      	lsls	r2, r2, #4
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	440b      	add	r3, r1
 80090c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090c8:	e00a      	b.n	80090e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	4908      	ldr	r1, [pc, #32]	; (80090f0 <__NVIC_SetPriority+0x50>)
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	3b04      	subs	r3, #4
 80090d8:	0112      	lsls	r2, r2, #4
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	440b      	add	r3, r1
 80090de:	761a      	strb	r2, [r3, #24]
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	e000e100 	.word	0xe000e100
 80090f0:	e000ed00 	.word	0xe000ed00

080090f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <SysTick_Handler+0x1c>)
 80090fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090fc:	f001 ffba 	bl	800b074 <xTaskGetSchedulerState>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d001      	beq.n	800910a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009106:	f002 fd9f 	bl	800bc48 <xPortSysTickHandler>
  }
}
 800910a:	bf00      	nop
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	e000e010 	.word	0xe000e010

08009114 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009118:	2100      	movs	r1, #0
 800911a:	f06f 0004 	mvn.w	r0, #4
 800911e:	f7ff ffbf 	bl	80090a0 <__NVIC_SetPriority>
#endif
}
 8009122:	bf00      	nop
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800912e:	f3ef 8305 	mrs	r3, IPSR
 8009132:	603b      	str	r3, [r7, #0]
  return(result);
 8009134:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800913a:	f06f 0305 	mvn.w	r3, #5
 800913e:	607b      	str	r3, [r7, #4]
 8009140:	e00c      	b.n	800915c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <osKernelInitialize+0x44>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d105      	bne.n	8009156 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800914a:	4b08      	ldr	r3, [pc, #32]	; (800916c <osKernelInitialize+0x44>)
 800914c:	2201      	movs	r2, #1
 800914e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009150:	2300      	movs	r3, #0
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	e002      	b.n	800915c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009156:	f04f 33ff 	mov.w	r3, #4294967295
 800915a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800915c:	687b      	ldr	r3, [r7, #4]
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	20000460 	.word	0x20000460

08009170 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009176:	f3ef 8305 	mrs	r3, IPSR
 800917a:	603b      	str	r3, [r7, #0]
  return(result);
 800917c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009182:	f06f 0305 	mvn.w	r3, #5
 8009186:	607b      	str	r3, [r7, #4]
 8009188:	e010      	b.n	80091ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800918a:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <osKernelStart+0x48>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d109      	bne.n	80091a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009192:	f7ff ffbf 	bl	8009114 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <osKernelStart+0x48>)
 8009198:	2202      	movs	r2, #2
 800919a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800919c:	f001 fb22 	bl	800a7e4 <vTaskStartScheduler>
      stat = osOK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	e002      	b.n	80091ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091a6:	f04f 33ff 	mov.w	r3, #4294967295
 80091aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091ac:	687b      	ldr	r3, [r7, #4]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000460 	.word	0x20000460

080091bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08e      	sub	sp, #56	; 0x38
 80091c0:	af04      	add	r7, sp, #16
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091cc:	f3ef 8305 	mrs	r3, IPSR
 80091d0:	617b      	str	r3, [r7, #20]
  return(result);
 80091d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d17e      	bne.n	80092d6 <osThreadNew+0x11a>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d07b      	beq.n	80092d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091de:	2380      	movs	r3, #128	; 0x80
 80091e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091e2:	2318      	movs	r3, #24
 80091e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091ea:	f04f 33ff 	mov.w	r3, #4294967295
 80091ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d045      	beq.n	8009282 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <osThreadNew+0x48>
        name = attr->name;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d008      	beq.n	800922a <osThreadNew+0x6e>
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b38      	cmp	r3, #56	; 0x38
 800921c:	d805      	bhi.n	800922a <osThreadNew+0x6e>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <osThreadNew+0x72>
        return (NULL);
 800922a:	2300      	movs	r3, #0
 800922c:	e054      	b.n	80092d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	089b      	lsrs	r3, r3, #2
 800923c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00e      	beq.n	8009264 <osThreadNew+0xa8>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b5b      	cmp	r3, #91	; 0x5b
 800924c:	d90a      	bls.n	8009264 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009252:	2b00      	cmp	r3, #0
 8009254:	d006      	beq.n	8009264 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <osThreadNew+0xa8>
        mem = 1;
 800925e:	2301      	movs	r3, #1
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	e010      	b.n	8009286 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10c      	bne.n	8009286 <osThreadNew+0xca>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d108      	bne.n	8009286 <osThreadNew+0xca>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <osThreadNew+0xca>
          mem = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e001      	b.n	8009286 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d110      	bne.n	80092ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009294:	9202      	str	r2, [sp, #8]
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f001 f8c8 	bl	800a438 <xTaskCreateStatic>
 80092a8:	4603      	mov	r3, r0
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	e013      	b.n	80092d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d110      	bne.n	80092d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	f107 0310 	add.w	r3, r7, #16
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f001 f913 	bl	800a4f2 <xTaskCreate>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d001      	beq.n	80092d6 <osThreadNew+0x11a>
            hTask = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092d6:	693b      	ldr	r3, [r7, #16]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3728      	adds	r7, #40	; 0x28
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092e8:	f3ef 8305 	mrs	r3, IPSR
 80092ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80092ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <osDelay+0x1c>
    stat = osErrorISR;
 80092f4:	f06f 0305 	mvn.w	r3, #5
 80092f8:	60fb      	str	r3, [r7, #12]
 80092fa:	e007      	b.n	800930c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 fa38 	bl	800a77c <vTaskDelay>
    }
  }

  return (stat);
 800930c:	68fb      	ldr	r3, [r7, #12]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009316:	b580      	push	{r7, lr}
 8009318:	b088      	sub	sp, #32
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009322:	f3ef 8305 	mrs	r3, IPSR
 8009326:	60bb      	str	r3, [r7, #8]
  return(result);
 8009328:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800932a:	2b00      	cmp	r3, #0
 800932c:	d174      	bne.n	8009418 <osMutexNew+0x102>
    if (attr != NULL) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <osMutexNew+0x26>
      type = attr->attr_bits;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e001      	b.n	8009340 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <osMutexNew+0x3a>
      rmtx = 1U;
 800934a:	2301      	movs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]
 800934e:	e001      	b.n	8009354 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d15c      	bne.n	8009418 <osMutexNew+0x102>
      mem = -1;
 800935e:	f04f 33ff 	mov.w	r3, #4294967295
 8009362:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d015      	beq.n	8009396 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <osMutexNew+0x6a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	2b4f      	cmp	r3, #79	; 0x4f
 8009378:	d902      	bls.n	8009380 <osMutexNew+0x6a>
          mem = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	e00c      	b.n	800939a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <osMutexNew+0x84>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <osMutexNew+0x84>
            mem = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
 8009394:	e001      	b.n	800939a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d112      	bne.n	80093c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	4619      	mov	r1, r3
 80093ac:	2004      	movs	r0, #4
 80093ae:	f000 fbc0 	bl	8009b32 <xQueueCreateMutexStatic>
 80093b2:	61f8      	str	r0, [r7, #28]
 80093b4:	e016      	b.n	80093e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	4619      	mov	r1, r3
 80093bc:	2001      	movs	r0, #1
 80093be:	f000 fbb8 	bl	8009b32 <xQueueCreateMutexStatic>
 80093c2:	61f8      	str	r0, [r7, #28]
 80093c4:	e00e      	b.n	80093e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10b      	bne.n	80093e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80093d2:	2004      	movs	r0, #4
 80093d4:	f000 fb95 	bl	8009b02 <xQueueCreateMutex>
 80093d8:	61f8      	str	r0, [r7, #28]
 80093da:	e003      	b.n	80093e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80093dc:	2001      	movs	r0, #1
 80093de:	f000 fb90 	bl	8009b02 <xQueueCreateMutex>
 80093e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <osMutexNew+0xee>
        if (attr != NULL) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <osMutexNew+0xe2>
          name = attr->name;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e001      	b.n	80093fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80093fc:	68f9      	ldr	r1, [r7, #12]
 80093fe:	69f8      	ldr	r0, [r7, #28]
 8009400:	f000 ffbc 	bl	800a37c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d006      	beq.n	8009418 <osMutexNew+0x102>
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	f043 0301 	orr.w	r3, r3, #1
 8009416:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009418:	69fb      	ldr	r3, [r7, #28]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009422:	b580      	push	{r7, lr}
 8009424:	b08a      	sub	sp, #40	; 0x28
 8009426:	af02      	add	r7, sp, #8
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009432:	f3ef 8305 	mrs	r3, IPSR
 8009436:	613b      	str	r3, [r7, #16]
  return(result);
 8009438:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800943a:	2b00      	cmp	r3, #0
 800943c:	d15f      	bne.n	80094fe <osMessageQueueNew+0xdc>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d05c      	beq.n	80094fe <osMessageQueueNew+0xdc>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d059      	beq.n	80094fe <osMessageQueueNew+0xdc>
    mem = -1;
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
 800944e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d029      	beq.n	80094aa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d012      	beq.n	8009484 <osMessageQueueNew+0x62>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	2b4f      	cmp	r3, #79	; 0x4f
 8009464:	d90e      	bls.n	8009484 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <osMessageQueueNew+0x62>
        mem = 1;
 800947e:	2301      	movs	r3, #1
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	e014      	b.n	80094ae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d110      	bne.n	80094ae <osMessageQueueNew+0x8c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10c      	bne.n	80094ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009498:	2b00      	cmp	r3, #0
 800949a:	d108      	bne.n	80094ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <osMessageQueueNew+0x8c>
          mem = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
 80094a8:	e001      	b.n	80094ae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d10b      	bne.n	80094cc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2100      	movs	r1, #0
 80094be:	9100      	str	r1, [sp, #0]
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fa2e 	bl	8009924 <xQueueGenericCreateStatic>
 80094c8:	61f8      	str	r0, [r7, #28]
 80094ca:	e008      	b.n	80094de <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80094d2:	2200      	movs	r2, #0
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 fa9c 	bl	8009a14 <xQueueGenericCreate>
 80094dc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00c      	beq.n	80094fe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	e001      	b.n	80094f6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80094f6:	6979      	ldr	r1, [r7, #20]
 80094f8:	69f8      	ldr	r0, [r7, #28]
 80094fa:	f000 ff3f 	bl	800a37c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80094fe:	69fb      	ldr	r3, [r7, #28]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	4613      	mov	r3, r2
 8009516:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800951c:	2300      	movs	r3, #0
 800951e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009520:	f3ef 8305 	mrs	r3, IPSR
 8009524:	617b      	str	r3, [r7, #20]
  return(result);
 8009526:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009528:	2b00      	cmp	r3, #0
 800952a:	d028      	beq.n	800957e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <osMessageQueuePut+0x36>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <osMessageQueuePut+0x36>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800953e:	f06f 0303 	mvn.w	r3, #3
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	e038      	b.n	80095b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800954a:	f107 0210 	add.w	r2, r7, #16
 800954e:	2300      	movs	r3, #0
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	69b8      	ldr	r0, [r7, #24]
 8009554:	f000 fc06 	bl	8009d64 <xQueueGenericSendFromISR>
 8009558:	4603      	mov	r3, r0
 800955a:	2b01      	cmp	r3, #1
 800955c:	d003      	beq.n	8009566 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800955e:	f06f 0302 	mvn.w	r3, #2
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	e028      	b.n	80095b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d025      	beq.n	80095b8 <osMessageQueuePut+0xb0>
 800956c:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <osMessageQueuePut+0xbc>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	e01c      	b.n	80095b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <osMessageQueuePut+0x82>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800958a:	f06f 0303 	mvn.w	r3, #3
 800958e:	61fb      	str	r3, [r7, #28]
 8009590:	e012      	b.n	80095b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009592:	2300      	movs	r3, #0
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	69b8      	ldr	r0, [r7, #24]
 800959a:	f000 fae5 	bl	8009b68 <xQueueGenericSend>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d009      	beq.n	80095b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80095aa:	f06f 0301 	mvn.w	r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e002      	b.n	80095b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80095b2:	f06f 0302 	mvn.w	r3, #2
 80095b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095b8:	69fb      	ldr	r3, [r7, #28]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3720      	adds	r7, #32
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095da:	2300      	movs	r3, #0
 80095dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095de:	f3ef 8305 	mrs	r3, IPSR
 80095e2:	617b      	str	r3, [r7, #20]
  return(result);
 80095e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d028      	beq.n	800963c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <osMessageQueueGet+0x34>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <osMessageQueueGet+0x34>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80095fc:	f06f 0303 	mvn.w	r3, #3
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	e037      	b.n	8009674 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009608:	f107 0310 	add.w	r3, r7, #16
 800960c:	461a      	mov	r2, r3
 800960e:	68b9      	ldr	r1, [r7, #8]
 8009610:	69b8      	ldr	r0, [r7, #24]
 8009612:	f000 fd23 	bl	800a05c <xQueueReceiveFromISR>
 8009616:	4603      	mov	r3, r0
 8009618:	2b01      	cmp	r3, #1
 800961a:	d003      	beq.n	8009624 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800961c:	f06f 0302 	mvn.w	r3, #2
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	e027      	b.n	8009674 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d024      	beq.n	8009674 <osMessageQueueGet+0xac>
 800962a:	4b15      	ldr	r3, [pc, #84]	; (8009680 <osMessageQueueGet+0xb8>)
 800962c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	e01b      	b.n	8009674 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <osMessageQueueGet+0x80>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009648:	f06f 0303 	mvn.w	r3, #3
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	e011      	b.n	8009674 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	69b8      	ldr	r0, [r7, #24]
 8009656:	f000 fc21 	bl	8009e9c <xQueueReceive>
 800965a:	4603      	mov	r3, r0
 800965c:	2b01      	cmp	r3, #1
 800965e:	d009      	beq.n	8009674 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009666:	f06f 0301 	mvn.w	r3, #1
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	e002      	b.n	8009674 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800966e:	f06f 0302 	mvn.w	r3, #2
 8009672:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009674:	69fb      	ldr	r3, [r7, #28]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a07      	ldr	r2, [pc, #28]	; (80096b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009694:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4a06      	ldr	r2, [pc, #24]	; (80096b4 <vApplicationGetIdleTaskMemory+0x30>)
 800969a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2280      	movs	r2, #128	; 0x80
 80096a0:	601a      	str	r2, [r3, #0]
}
 80096a2:	bf00      	nop
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000464 	.word	0x20000464
 80096b4:	200004c0 	.word	0x200004c0

080096b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a07      	ldr	r2, [pc, #28]	; (80096e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80096c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	4a06      	ldr	r2, [pc, #24]	; (80096e8 <vApplicationGetTimerTaskMemory+0x30>)
 80096ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096d6:	601a      	str	r2, [r3, #0]
}
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	200006c0 	.word	0x200006c0
 80096e8:	2000071c 	.word	0x2000071c

080096ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f103 0208 	add.w	r2, r3, #8
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f04f 32ff 	mov.w	r2, #4294967295
 8009704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f103 0208 	add.w	r2, r3, #8
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0208 	add.w	r2, r3, #8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	601a      	str	r2, [r3, #0]
}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a4:	d103      	bne.n	80097ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	e00c      	b.n	80097c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3308      	adds	r3, #8
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e002      	b.n	80097bc <vListInsert+0x2e>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d2f6      	bcs.n	80097b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	6892      	ldr	r2, [r2, #8]
 8009816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6852      	ldr	r2, [r2, #4]
 8009820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	429a      	cmp	r2, r3
 800982a:	d103      	bne.n	8009834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	1e5a      	subs	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800987a:	bf00      	nop
 800987c:	e7fe      	b.n	800987c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800987e:	f002 f951 	bl	800bb24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800988e:	fb01 f303 	mul.w	r3, r1, r3
 8009892:	441a      	add	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	3b01      	subs	r3, #1
 80098b0:	68f9      	ldr	r1, [r7, #12]
 80098b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	441a      	add	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	22ff      	movs	r2, #255	; 0xff
 80098ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d114      	bne.n	80098fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01a      	beq.n	8009912 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3310      	adds	r3, #16
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 fa09 	bl	800acf8 <xTaskRemoveFromEventList>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d012      	beq.n	8009912 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <xQueueGenericReset+0xcc>)
 80098ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	e009      	b.n	8009912 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3310      	adds	r3, #16
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fef2 	bl	80096ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3324      	adds	r3, #36	; 0x24
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff feed 	bl	80096ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009912:	f002 f937 	bl	800bb84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009916:	2301      	movs	r3, #1
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08e      	sub	sp, #56	; 0x38
 8009928:	af02      	add	r7, sp, #8
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <xQueueGenericCreateStatic+0x52>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <xQueueGenericCreateStatic+0x56>
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <xQueueGenericCreateStatic+0x58>
 800997a:	2300      	movs	r3, #0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	623b      	str	r3, [r7, #32]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <xQueueGenericCreateStatic+0x7e>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <xQueueGenericCreateStatic+0x82>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <xQueueGenericCreateStatic+0x84>
 80099a6:	2300      	movs	r3, #0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	61fb      	str	r3, [r7, #28]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099c2:	2350      	movs	r3, #80	; 0x50
 80099c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b50      	cmp	r3, #80	; 0x50
 80099ca:	d00a      	beq.n	80099e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	61bb      	str	r3, [r7, #24]
}
 80099de:	bf00      	nop
 80099e0:	e7fe      	b.n	80099e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00d      	beq.n	8009a0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4613      	mov	r3, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f83f 	bl	8009a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3730      	adds	r7, #48	; 0x30
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08a      	sub	sp, #40	; 0x28
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	613b      	str	r3, [r7, #16]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
 8009a46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	3350      	adds	r3, #80	; 0x50
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 f98b 	bl	800bd68 <pvPortMalloc>
 8009a52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d011      	beq.n	8009a7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	3350      	adds	r3, #80	; 0x50
 8009a62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a6c:	79fa      	ldrb	r2, [r7, #7]
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	4613      	mov	r3, r2
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 f805 	bl	8009a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	e002      	b.n	8009aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	69b8      	ldr	r0, [r7, #24]
 8009aba:	f7ff fecb 	bl	8009854 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00e      	beq.n	8009afa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009aee:	2300      	movs	r3, #0
 8009af0:	2200      	movs	r2, #0
 8009af2:	2100      	movs	r1, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f837 	bl	8009b68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	4603      	mov	r3, r0
 8009b0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	2300      	movs	r3, #0
 8009b12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6939      	ldr	r1, [r7, #16]
 8009b1a:	6978      	ldr	r0, [r7, #20]
 8009b1c:	f7ff ff7a 	bl	8009a14 <xQueueGenericCreate>
 8009b20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff ffd3 	bl	8009ace <prvInitialiseMutex>

		return xNewQueue;
 8009b28:	68fb      	ldr	r3, [r7, #12]
	}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b088      	sub	sp, #32
 8009b36:	af02      	add	r7, sp, #8
 8009b38:	4603      	mov	r3, r0
 8009b3a:	6039      	str	r1, [r7, #0]
 8009b3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	617b      	str	r3, [r7, #20]
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	6939      	ldr	r1, [r7, #16]
 8009b50:	6978      	ldr	r0, [r7, #20]
 8009b52:	f7ff fee7 	bl	8009924 <xQueueGenericCreateStatic>
 8009b56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff ffb8 	bl	8009ace <prvInitialiseMutex>

		return xNewQueue;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08e      	sub	sp, #56	; 0x38
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b76:	2300      	movs	r3, #0
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <xQueueGenericSend+0x32>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d103      	bne.n	8009ba8 <xQueueGenericSend+0x40>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <xQueueGenericSend+0x44>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <xQueueGenericSend+0x46>
 8009bac:	2300      	movs	r3, #0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <xQueueGenericSend+0x60>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d103      	bne.n	8009bd6 <xQueueGenericSend+0x6e>
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <xQueueGenericSend+0x72>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <xQueueGenericSend+0x74>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	623b      	str	r3, [r7, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bf6:	f001 fa3d 	bl	800b074 <xTaskGetSchedulerState>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <xQueueGenericSend+0x9e>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <xQueueGenericSend+0xa2>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <xQueueGenericSend+0xa4>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <xQueueGenericSend+0xbe>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	61fb      	str	r3, [r7, #28]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c26:	f001 ff7d 	bl	800bb24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d302      	bcc.n	8009c3c <xQueueGenericSend+0xd4>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d129      	bne.n	8009c90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c42:	f000 fa8b 	bl	800a15c <prvCopyDataToQueue>
 8009c46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d010      	beq.n	8009c72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	3324      	adds	r3, #36	; 0x24
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 f84f 	bl	800acf8 <xTaskRemoveFromEventList>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d013      	beq.n	8009c88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c60:	4b3f      	ldr	r3, [pc, #252]	; (8009d60 <xQueueGenericSend+0x1f8>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	e00a      	b.n	8009c88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c78:	4b39      	ldr	r3, [pc, #228]	; (8009d60 <xQueueGenericSend+0x1f8>)
 8009c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c88:	f001 ff7c 	bl	800bb84 <vPortExitCritical>
				return pdPASS;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e063      	b.n	8009d58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d103      	bne.n	8009c9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c96:	f001 ff75 	bl	800bb84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e05c      	b.n	8009d58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ca4:	f107 0314 	add.w	r3, r7, #20
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f001 f889 	bl	800adc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cb2:	f001 ff67 	bl	800bb84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cb6:	f000 fdfb 	bl	800a8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cba:	f001 ff33 	bl	800bb24 <vPortEnterCritical>
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cc4:	b25b      	sxtb	r3, r3
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d103      	bne.n	8009cd4 <xQueueGenericSend+0x16c>
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cda:	b25b      	sxtb	r3, r3
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d103      	bne.n	8009cea <xQueueGenericSend+0x182>
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cea:	f001 ff4b 	bl	800bb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cee:	1d3a      	adds	r2, r7, #4
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 f878 	bl	800adec <xTaskCheckForTimeOut>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d124      	bne.n	8009d4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d04:	f000 fb22 	bl	800a34c <prvIsQueueFull>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d018      	beq.n	8009d40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	3310      	adds	r3, #16
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	4611      	mov	r1, r2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 ff9e 	bl	800ac58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d1e:	f000 faad 	bl	800a27c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d22:	f000 fdd3 	bl	800a8cc <xTaskResumeAll>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f47f af7c 	bne.w	8009c26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <xQueueGenericSend+0x1f8>)
 8009d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	e772      	b.n	8009c26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d42:	f000 fa9b 	bl	800a27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d46:	f000 fdc1 	bl	800a8cc <xTaskResumeAll>
 8009d4a:	e76c      	b.n	8009c26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4e:	f000 fa95 	bl	800a27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d52:	f000 fdbb 	bl	800a8cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3738      	adds	r7, #56	; 0x38
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	e000ed04 	.word	0xe000ed04

08009d64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b090      	sub	sp, #64	; 0x40
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <xQueueGenericSendFromISR+0x3c>
 8009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <xQueueGenericSendFromISR+0x40>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <xQueueGenericSendFromISR+0x42>
 8009da4:	2300      	movs	r3, #0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d103      	bne.n	8009dce <xQueueGenericSendFromISR+0x6a>
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d101      	bne.n	8009dd2 <xQueueGenericSendFromISR+0x6e>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e000      	b.n	8009dd4 <xQueueGenericSendFromISR+0x70>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	623b      	str	r3, [r7, #32]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dee:	f001 ff7b 	bl	800bce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009df2:	f3ef 8211 	mrs	r2, BASEPRI
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	61fa      	str	r2, [r7, #28]
 8009e08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d302      	bcc.n	8009e20 <xQueueGenericSendFromISR+0xbc>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d12f      	bne.n	8009e80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e36:	f000 f991 	bl	800a15c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d112      	bne.n	8009e6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d016      	beq.n	8009e7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	3324      	adds	r3, #36	; 0x24
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 ff51 	bl	800acf8 <xTaskRemoveFromEventList>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	e007      	b.n	8009e7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e6e:	3301      	adds	r3, #1
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	b25a      	sxtb	r2, r3
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009e7e:	e001      	b.n	8009e84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3740      	adds	r7, #64	; 0x40
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08c      	sub	sp, #48	; 0x30
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <xQueueReceive+0x30>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	623b      	str	r3, [r7, #32]
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <xQueueReceive+0x3e>
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <xQueueReceive+0x42>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <xQueueReceive+0x44>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xQueueReceive+0x5e>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	61fb      	str	r3, [r7, #28]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009efa:	f001 f8bb 	bl	800b074 <xTaskGetSchedulerState>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <xQueueReceive+0x6e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <xQueueReceive+0x72>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e000      	b.n	8009f10 <xQueueReceive+0x74>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueReceive+0x8e>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	61bb      	str	r3, [r7, #24]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f2a:	f001 fdfb 	bl	800bb24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01f      	beq.n	8009f7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3e:	f000 f977 	bl	800a230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00f      	beq.n	8009f72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	3310      	adds	r3, #16
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fece 	bl	800acf8 <xTaskRemoveFromEventList>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f62:	4b3d      	ldr	r3, [pc, #244]	; (800a058 <xQueueReceive+0x1bc>)
 8009f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f72:	f001 fe07 	bl	800bb84 <vPortExitCritical>
				return pdPASS;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e069      	b.n	800a04e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f80:	f001 fe00 	bl	800bb84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e062      	b.n	800a04e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f8e:	f107 0310 	add.w	r3, r7, #16
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 ff14 	bl	800adc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f9c:	f001 fdf2 	bl	800bb84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fa0:	f000 fc86 	bl	800a8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fa4:	f001 fdbe 	bl	800bb24 <vPortEnterCritical>
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fae:	b25b      	sxtb	r3, r3
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb4:	d103      	bne.n	8009fbe <xQueueReceive+0x122>
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc4:	b25b      	sxtb	r3, r3
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d103      	bne.n	8009fd4 <xQueueReceive+0x138>
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd4:	f001 fdd6 	bl	800bb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fd8:	1d3a      	adds	r2, r7, #4
 8009fda:	f107 0310 	add.w	r3, r7, #16
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 ff03 	bl	800adec <xTaskCheckForTimeOut>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d123      	bne.n	800a034 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fee:	f000 f997 	bl	800a320 <prvIsQueueEmpty>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d017      	beq.n	800a028 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	3324      	adds	r3, #36	; 0x24
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fe29 	bl	800ac58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a008:	f000 f938 	bl	800a27c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a00c:	f000 fc5e 	bl	800a8cc <xTaskResumeAll>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d189      	bne.n	8009f2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <xQueueReceive+0x1bc>)
 800a018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	e780      	b.n	8009f2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a02a:	f000 f927 	bl	800a27c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a02e:	f000 fc4d 	bl	800a8cc <xTaskResumeAll>
 800a032:	e77a      	b.n	8009f2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a036:	f000 f921 	bl	800a27c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a03a:	f000 fc47 	bl	800a8cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a040:	f000 f96e 	bl	800a320 <prvIsQueueEmpty>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	f43f af6f 	beq.w	8009f2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a04c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3730      	adds	r7, #48	; 0x30
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	623b      	str	r3, [r7, #32]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d103      	bne.n	800a096 <xQueueReceiveFromISR+0x3a>
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <xQueueReceiveFromISR+0x3e>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueReceiveFromISR+0x40>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	61fb      	str	r3, [r7, #28]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0b6:	f001 fe17 	bl	800bce8 <vPortValidateInterruptPriority>
	__asm volatile
 800a0ba:	f3ef 8211 	mrs	r2, BASEPRI
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	61ba      	str	r2, [r7, #24]
 800a0d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a0d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d02f      	beq.n	800a142 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0f0:	f000 f89e 	bl	800a230 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	1e5a      	subs	r2, r3, #1
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a0fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d112      	bne.n	800a12c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d016      	beq.n	800a13c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	3310      	adds	r3, #16
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fdf0 	bl	800acf8 <xTaskRemoveFromEventList>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00e      	beq.n	800a13c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00b      	beq.n	800a13c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e007      	b.n	800a13c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a130:	3301      	adds	r3, #1
 800a132:	b2db      	uxtb	r3, r3
 800a134:	b25a      	sxtb	r2, r3
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a13c:	2301      	movs	r3, #1
 800a13e:	637b      	str	r3, [r7, #52]	; 0x34
 800a140:	e001      	b.n	800a146 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a142:	2300      	movs	r3, #0
 800a144:	637b      	str	r3, [r7, #52]	; 0x34
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	f383 8811 	msr	BASEPRI, r3
}
 800a150:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a154:	4618      	mov	r0, r3
 800a156:	3738      	adds	r7, #56	; 0x38
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10d      	bne.n	800a196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d14d      	bne.n	800a21e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 ff92 	bl	800b0b0 <xTaskPriorityDisinherit>
 800a18c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	609a      	str	r2, [r3, #8]
 800a194:	e043      	b.n	800a21e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d119      	bne.n	800a1d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6858      	ldr	r0, [r3, #4]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	f001 fff2 	bl	800c190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	441a      	add	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d32b      	bcc.n	800a21e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	605a      	str	r2, [r3, #4]
 800a1ce:	e026      	b.n	800a21e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	68d8      	ldr	r0, [r3, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	461a      	mov	r2, r3
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	f001 ffd8 	bl	800c190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e8:	425b      	negs	r3, r3
 800a1ea:	441a      	add	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d207      	bcs.n	800a20c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	425b      	negs	r3, r3
 800a206:	441a      	add	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d105      	bne.n	800a21e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a226:	697b      	ldr	r3, [r7, #20]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d018      	beq.n	800a274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24a:	441a      	add	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d303      	bcc.n	800a264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68d9      	ldr	r1, [r3, #12]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26c:	461a      	mov	r2, r3
 800a26e:	6838      	ldr	r0, [r7, #0]
 800a270:	f001 ff8e 	bl	800c190 <memcpy>
	}
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a284:	f001 fc4e 	bl	800bb24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a28e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a290:	e011      	b.n	800a2b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b00      	cmp	r3, #0
 800a298:	d012      	beq.n	800a2c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3324      	adds	r3, #36	; 0x24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fd2a 	bl	800acf8 <xTaskRemoveFromEventList>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2aa:	f000 fe01 	bl	800aeb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	dce9      	bgt.n	800a292 <prvUnlockQueue+0x16>
 800a2be:	e000      	b.n	800a2c2 <prvUnlockQueue+0x46>
					break;
 800a2c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	22ff      	movs	r2, #255	; 0xff
 800a2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2ca:	f001 fc5b 	bl	800bb84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2ce:	f001 fc29 	bl	800bb24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2da:	e011      	b.n	800a300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d012      	beq.n	800a30a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3310      	adds	r3, #16
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 fd05 	bl	800acf8 <xTaskRemoveFromEventList>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2f4:	f000 fddc 	bl	800aeb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a304:	2b00      	cmp	r3, #0
 800a306:	dce9      	bgt.n	800a2dc <prvUnlockQueue+0x60>
 800a308:	e000      	b.n	800a30c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a30a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	22ff      	movs	r2, #255	; 0xff
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a314:	f001 fc36 	bl	800bb84 <vPortExitCritical>
}
 800a318:	bf00      	nop
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a328:	f001 fbfc 	bl	800bb24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a334:	2301      	movs	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e001      	b.n	800a33e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a33e:	f001 fc21 	bl	800bb84 <vPortExitCritical>

	return xReturn;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a354:	f001 fbe6 	bl	800bb24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a360:	429a      	cmp	r2, r3
 800a362:	d102      	bne.n	800a36a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	e001      	b.n	800a36e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a36e:	f001 fc09 	bl	800bb84 <vPortExitCritical>

	return xReturn;
 800a372:	68fb      	ldr	r3, [r7, #12]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	e014      	b.n	800a3b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a38c:	4a0f      	ldr	r2, [pc, #60]	; (800a3cc <vQueueAddToRegistry+0x50>)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a398:	490c      	ldr	r1, [pc, #48]	; (800a3cc <vQueueAddToRegistry+0x50>)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3a2:	4a0a      	ldr	r2, [pc, #40]	; (800a3cc <vQueueAddToRegistry+0x50>)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3ae:	e006      	b.n	800a3be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b07      	cmp	r3, #7
 800a3ba:	d9e7      	bls.n	800a38c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000b1c 	.word	0x20000b1c

0800a3d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3e0:	f001 fba0 	bl	800bb24 <vPortEnterCritical>
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3ea:	b25b      	sxtb	r3, r3
 800a3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f0:	d103      	bne.n	800a3fa <vQueueWaitForMessageRestricted+0x2a>
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a400:	b25b      	sxtb	r3, r3
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d103      	bne.n	800a410 <vQueueWaitForMessageRestricted+0x40>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a410:	f001 fbb8 	bl	800bb84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d106      	bne.n	800a42a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	3324      	adds	r3, #36	; 0x24
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fc3b 	bl	800aca0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a42a:	6978      	ldr	r0, [r7, #20]
 800a42c:	f7ff ff26 	bl	800a27c <prvUnlockQueue>
	}
 800a430:	bf00      	nop
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08e      	sub	sp, #56	; 0x38
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	623b      	str	r3, [r7, #32]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xTaskCreateStatic+0x46>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	61fb      	str	r3, [r7, #28]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a47e:	235c      	movs	r3, #92	; 0x5c
 800a480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2b5c      	cmp	r3, #92	; 0x5c
 800a486:	d00a      	beq.n	800a49e <xTaskCreateStatic+0x66>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	61bb      	str	r3, [r7, #24]
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a49e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d01e      	beq.n	800a4e4 <xTaskCreateStatic+0xac>
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01b      	beq.n	800a4e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9303      	str	r3, [sp, #12]
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	9302      	str	r3, [sp, #8]
 800a4c6:	f107 0314 	add.w	r3, r7, #20
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 f850 	bl	800a57c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4de:	f000 f8dd 	bl	800a69c <prvAddNewTaskToReadyList>
 800a4e2:	e001      	b.n	800a4e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4e8:	697b      	ldr	r3, [r7, #20]
	}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3728      	adds	r7, #40	; 0x28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b08c      	sub	sp, #48	; 0x30
 800a4f6:	af04      	add	r7, sp, #16
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	603b      	str	r3, [r7, #0]
 800a4fe:	4613      	mov	r3, r2
 800a500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a502:	88fb      	ldrh	r3, [r7, #6]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4618      	mov	r0, r3
 800a508:	f001 fc2e 	bl	800bd68 <pvPortMalloc>
 800a50c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00e      	beq.n	800a532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a514:	205c      	movs	r0, #92	; 0x5c
 800a516:	f001 fc27 	bl	800bd68 <pvPortMalloc>
 800a51a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
 800a528:	e005      	b.n	800a536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a52a:	6978      	ldr	r0, [r7, #20]
 800a52c:	f001 fce8 	bl	800bf00 <vPortFree>
 800a530:	e001      	b.n	800a536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d017      	beq.n	800a56c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a544:	88fa      	ldrh	r2, [r7, #6]
 800a546:	2300      	movs	r3, #0
 800a548:	9303      	str	r3, [sp, #12]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	9302      	str	r3, [sp, #8]
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f80e 	bl	800a57c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a560:	69f8      	ldr	r0, [r7, #28]
 800a562:	f000 f89b 	bl	800a69c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a566:	2301      	movs	r3, #1
 800a568:	61bb      	str	r3, [r7, #24]
 800a56a:	e002      	b.n	800a572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
 800a570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a572:	69bb      	ldr	r3, [r7, #24]
	}
 800a574:	4618      	mov	r0, r3
 800a576:	3720      	adds	r7, #32
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	461a      	mov	r2, r3
 800a594:	21a5      	movs	r1, #165	; 0xa5
 800a596:	f001 fe09 	bl	800c1ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f023 0307 	bic.w	r3, r3, #7
 800a5b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	617b      	str	r3, [r7, #20]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01f      	beq.n	800a61a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61fb      	str	r3, [r7, #28]
 800a5de:	e012      	b.n	800a606 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	7819      	ldrb	r1, [r3, #0]
 800a5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3334      	adds	r3, #52	; 0x34
 800a5f0:	460a      	mov	r2, r1
 800a5f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	3301      	adds	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	2b0f      	cmp	r3, #15
 800a60a:	d9e9      	bls.n	800a5e0 <prvInitialiseNewTask+0x64>
 800a60c:	e000      	b.n	800a610 <prvInitialiseNewTask+0x94>
			{
				break;
 800a60e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a618:	e003      	b.n	800a622 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	2b37      	cmp	r3, #55	; 0x37
 800a626:	d901      	bls.n	800a62c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a628:	2337      	movs	r3, #55	; 0x37
 800a62a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2200      	movs	r2, #0
 800a63c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	3304      	adds	r3, #4
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff f872 	bl	800972c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	3318      	adds	r3, #24
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff f86d 	bl	800972c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	2200      	movs	r2, #0
 800a66c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	68f9      	ldr	r1, [r7, #12]
 800a67a:	69b8      	ldr	r0, [r7, #24]
 800a67c:	f001 f928 	bl	800b8d0 <pxPortInitialiseStack>
 800a680:	4602      	mov	r2, r0
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a692:	bf00      	nop
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6a4:	f001 fa3e 	bl	800bb24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6a8:	4b2d      	ldr	r3, [pc, #180]	; (800a760 <prvAddNewTaskToReadyList+0xc4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	4a2c      	ldr	r2, [pc, #176]	; (800a760 <prvAddNewTaskToReadyList+0xc4>)
 800a6b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6b2:	4b2c      	ldr	r3, [pc, #176]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ba:	4a2a      	ldr	r2, [pc, #168]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6c0:	4b27      	ldr	r3, [pc, #156]	; (800a760 <prvAddNewTaskToReadyList+0xc4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d110      	bne.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6c8:	f000 fc16 	bl	800aef8 <prvInitialiseTaskLists>
 800a6cc:	e00d      	b.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ce:	4b26      	ldr	r3, [pc, #152]	; (800a768 <prvAddNewTaskToReadyList+0xcc>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d109      	bne.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6d6:	4b23      	ldr	r3, [pc, #140]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d802      	bhi.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6e4:	4a1f      	ldr	r2, [pc, #124]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6ea:	4b20      	ldr	r3, [pc, #128]	; (800a76c <prvAddNewTaskToReadyList+0xd0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	4a1e      	ldr	r2, [pc, #120]	; (800a76c <prvAddNewTaskToReadyList+0xd0>)
 800a6f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6f4:	4b1d      	ldr	r3, [pc, #116]	; (800a76c <prvAddNewTaskToReadyList+0xd0>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <prvAddNewTaskToReadyList+0xd4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d903      	bls.n	800a710 <prvAddNewTaskToReadyList+0x74>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a18      	ldr	r2, [pc, #96]	; (800a770 <prvAddNewTaskToReadyList+0xd4>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4a15      	ldr	r2, [pc, #84]	; (800a774 <prvAddNewTaskToReadyList+0xd8>)
 800a71e:	441a      	add	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7ff f80d 	bl	8009746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a72c:	f001 fa2a 	bl	800bb84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a730:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <prvAddNewTaskToReadyList+0xcc>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00e      	beq.n	800a756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a738:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	429a      	cmp	r2, r3
 800a744:	d207      	bcs.n	800a756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvAddNewTaskToReadyList+0xdc>)
 800a748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a756:	bf00      	nop
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20001030 	.word	0x20001030
 800a764:	20000b5c 	.word	0x20000b5c
 800a768:	2000103c 	.word	0x2000103c
 800a76c:	2000104c 	.word	0x2000104c
 800a770:	20001038 	.word	0x20001038
 800a774:	20000b60 	.word	0x20000b60
 800a778:	e000ed04 	.word	0xe000ed04

0800a77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a784:	2300      	movs	r3, #0
 800a786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d017      	beq.n	800a7be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <vTaskDelay+0x60>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <vTaskDelay+0x30>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60bb      	str	r3, [r7, #8]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7ac:	f000 f880 	bl	800a8b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fcea 	bl	800b18c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7b8:	f000 f888 	bl	800a8cc <xTaskResumeAll>
 800a7bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d107      	bne.n	800a7d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <vTaskDelay+0x64>)
 800a7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	20001058 	.word	0x20001058
 800a7e0:	e000ed04 	.word	0xe000ed04

0800a7e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08a      	sub	sp, #40	; 0x28
 800a7e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	1d39      	adds	r1, r7, #4
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe ff42 	bl	8009684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	9202      	str	r2, [sp, #8]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	2300      	movs	r3, #0
 800a810:	460a      	mov	r2, r1
 800a812:	4921      	ldr	r1, [pc, #132]	; (800a898 <vTaskStartScheduler+0xb4>)
 800a814:	4821      	ldr	r0, [pc, #132]	; (800a89c <vTaskStartScheduler+0xb8>)
 800a816:	f7ff fe0f 	bl	800a438 <xTaskCreateStatic>
 800a81a:	4603      	mov	r3, r0
 800a81c:	4a20      	ldr	r2, [pc, #128]	; (800a8a0 <vTaskStartScheduler+0xbc>)
 800a81e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a820:	4b1f      	ldr	r3, [pc, #124]	; (800a8a0 <vTaskStartScheduler+0xbc>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a828:	2301      	movs	r3, #1
 800a82a:	617b      	str	r3, [r7, #20]
 800a82c:	e001      	b.n	800a832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d102      	bne.n	800a83e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a838:	f000 fcfc 	bl	800b234 <xTimerCreateTimerTask>
 800a83c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d116      	bne.n	800a872 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	613b      	str	r3, [r7, #16]
}
 800a856:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a858:	4b12      	ldr	r3, [pc, #72]	; (800a8a4 <vTaskStartScheduler+0xc0>)
 800a85a:	f04f 32ff 	mov.w	r2, #4294967295
 800a85e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a860:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <vTaskStartScheduler+0xc4>)
 800a862:	2201      	movs	r2, #1
 800a864:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a866:	4b11      	ldr	r3, [pc, #68]	; (800a8ac <vTaskStartScheduler+0xc8>)
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a86c:	f001 f8b8 	bl	800b9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a870:	e00e      	b.n	800a890 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a878:	d10a      	bne.n	800a890 <vTaskStartScheduler+0xac>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	60fb      	str	r3, [r7, #12]
}
 800a88c:	bf00      	nop
 800a88e:	e7fe      	b.n	800a88e <vTaskStartScheduler+0xaa>
}
 800a890:	bf00      	nop
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	080107c0 	.word	0x080107c0
 800a89c:	0800aec9 	.word	0x0800aec9
 800a8a0:	20001054 	.word	0x20001054
 800a8a4:	20001050 	.word	0x20001050
 800a8a8:	2000103c 	.word	0x2000103c
 800a8ac:	20001034 	.word	0x20001034

0800a8b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8b4:	4b04      	ldr	r3, [pc, #16]	; (800a8c8 <vTaskSuspendAll+0x18>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	4a03      	ldr	r2, [pc, #12]	; (800a8c8 <vTaskSuspendAll+0x18>)
 800a8bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8be:	bf00      	nop
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	20001058 	.word	0x20001058

0800a8cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8da:	4b42      	ldr	r3, [pc, #264]	; (800a9e4 <xTaskResumeAll+0x118>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	603b      	str	r3, [r7, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8f8:	f001 f914 	bl	800bb24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8fc:	4b39      	ldr	r3, [pc, #228]	; (800a9e4 <xTaskResumeAll+0x118>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3b01      	subs	r3, #1
 800a902:	4a38      	ldr	r2, [pc, #224]	; (800a9e4 <xTaskResumeAll+0x118>)
 800a904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a906:	4b37      	ldr	r3, [pc, #220]	; (800a9e4 <xTaskResumeAll+0x118>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d162      	bne.n	800a9d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a90e:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <xTaskResumeAll+0x11c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d05e      	beq.n	800a9d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a916:	e02f      	b.n	800a978 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a918:	4b34      	ldr	r3, [pc, #208]	; (800a9ec <xTaskResumeAll+0x120>)
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3318      	adds	r3, #24
 800a924:	4618      	mov	r0, r3
 800a926:	f7fe ff6b 	bl	8009800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe ff66 	bl	8009800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a938:	4b2d      	ldr	r3, [pc, #180]	; (800a9f0 <xTaskResumeAll+0x124>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d903      	bls.n	800a948 <xTaskResumeAll+0x7c>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	4a2a      	ldr	r2, [pc, #168]	; (800a9f0 <xTaskResumeAll+0x124>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4a27      	ldr	r2, [pc, #156]	; (800a9f4 <xTaskResumeAll+0x128>)
 800a956:	441a      	add	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7fe fef1 	bl	8009746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a968:	4b23      	ldr	r3, [pc, #140]	; (800a9f8 <xTaskResumeAll+0x12c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96e:	429a      	cmp	r2, r3
 800a970:	d302      	bcc.n	800a978 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a972:	4b22      	ldr	r3, [pc, #136]	; (800a9fc <xTaskResumeAll+0x130>)
 800a974:	2201      	movs	r2, #1
 800a976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a978:	4b1c      	ldr	r3, [pc, #112]	; (800a9ec <xTaskResumeAll+0x120>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1cb      	bne.n	800a918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a986:	f000 fb55 	bl	800b034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a98a:	4b1d      	ldr	r3, [pc, #116]	; (800aa00 <xTaskResumeAll+0x134>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d010      	beq.n	800a9b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a996:	f000 f847 	bl	800aa28 <xTaskIncrementTick>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9a0:	4b16      	ldr	r3, [pc, #88]	; (800a9fc <xTaskResumeAll+0x130>)
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f1      	bne.n	800a996 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <xTaskResumeAll+0x134>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9b8:	4b10      	ldr	r3, [pc, #64]	; (800a9fc <xTaskResumeAll+0x130>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <xTaskResumeAll+0x138>)
 800a9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9d4:	f001 f8d6 	bl	800bb84 <vPortExitCritical>

	return xAlreadyYielded;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20001058 	.word	0x20001058
 800a9e8:	20001030 	.word	0x20001030
 800a9ec:	20000ff0 	.word	0x20000ff0
 800a9f0:	20001038 	.word	0x20001038
 800a9f4:	20000b60 	.word	0x20000b60
 800a9f8:	20000b5c 	.word	0x20000b5c
 800a9fc:	20001044 	.word	0x20001044
 800aa00:	20001040 	.word	0x20001040
 800aa04:	e000ed04 	.word	0xe000ed04

0800aa08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa0e:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <xTaskGetTickCount+0x1c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa14:	687b      	ldr	r3, [r7, #4]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20001034 	.word	0x20001034

0800aa28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa32:	4b4f      	ldr	r3, [pc, #316]	; (800ab70 <xTaskIncrementTick+0x148>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f040 808f 	bne.w	800ab5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa3c:	4b4d      	ldr	r3, [pc, #308]	; (800ab74 <xTaskIncrementTick+0x14c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa44:	4a4b      	ldr	r2, [pc, #300]	; (800ab74 <xTaskIncrementTick+0x14c>)
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d120      	bne.n	800aa92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa50:	4b49      	ldr	r3, [pc, #292]	; (800ab78 <xTaskIncrementTick+0x150>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	603b      	str	r3, [r7, #0]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <xTaskIncrementTick+0x46>
 800aa70:	4b41      	ldr	r3, [pc, #260]	; (800ab78 <xTaskIncrementTick+0x150>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	4b41      	ldr	r3, [pc, #260]	; (800ab7c <xTaskIncrementTick+0x154>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a3f      	ldr	r2, [pc, #252]	; (800ab78 <xTaskIncrementTick+0x150>)
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	4a3f      	ldr	r2, [pc, #252]	; (800ab7c <xTaskIncrementTick+0x154>)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	4b3e      	ldr	r3, [pc, #248]	; (800ab80 <xTaskIncrementTick+0x158>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	4a3d      	ldr	r2, [pc, #244]	; (800ab80 <xTaskIncrementTick+0x158>)
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	f000 fad1 	bl	800b034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa92:	4b3c      	ldr	r3, [pc, #240]	; (800ab84 <xTaskIncrementTick+0x15c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d349      	bcc.n	800ab30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa9c:	4b36      	ldr	r3, [pc, #216]	; (800ab78 <xTaskIncrementTick+0x150>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d104      	bne.n	800aab0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa6:	4b37      	ldr	r3, [pc, #220]	; (800ab84 <xTaskIncrementTick+0x15c>)
 800aaa8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaac:	601a      	str	r2, [r3, #0]
					break;
 800aaae:	e03f      	b.n	800ab30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab0:	4b31      	ldr	r3, [pc, #196]	; (800ab78 <xTaskIncrementTick+0x150>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d203      	bcs.n	800aad0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aac8:	4a2e      	ldr	r2, [pc, #184]	; (800ab84 <xTaskIncrementTick+0x15c>)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aace:	e02f      	b.n	800ab30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe fe93 	bl	8009800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d004      	beq.n	800aaec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	3318      	adds	r3, #24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fe8a 	bl	8009800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf0:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <xTaskIncrementTick+0x160>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d903      	bls.n	800ab00 <xTaskIncrementTick+0xd8>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a22      	ldr	r2, [pc, #136]	; (800ab88 <xTaskIncrementTick+0x160>)
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4a1f      	ldr	r2, [pc, #124]	; (800ab8c <xTaskIncrementTick+0x164>)
 800ab0e:	441a      	add	r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f7fe fe15 	bl	8009746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <xTaskIncrementTick+0x168>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d3b8      	bcc.n	800aa9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab2e:	e7b5      	b.n	800aa9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab30:	4b17      	ldr	r3, [pc, #92]	; (800ab90 <xTaskIncrementTick+0x168>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab36:	4915      	ldr	r1, [pc, #84]	; (800ab8c <xTaskIncrementTick+0x164>)
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d901      	bls.n	800ab4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab4c:	4b11      	ldr	r3, [pc, #68]	; (800ab94 <xTaskIncrementTick+0x16c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d007      	beq.n	800ab64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e004      	b.n	800ab64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <xTaskIncrementTick+0x170>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	4a0d      	ldr	r2, [pc, #52]	; (800ab98 <xTaskIncrementTick+0x170>)
 800ab62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab64:	697b      	ldr	r3, [r7, #20]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20001058 	.word	0x20001058
 800ab74:	20001034 	.word	0x20001034
 800ab78:	20000fe8 	.word	0x20000fe8
 800ab7c:	20000fec 	.word	0x20000fec
 800ab80:	20001048 	.word	0x20001048
 800ab84:	20001050 	.word	0x20001050
 800ab88:	20001038 	.word	0x20001038
 800ab8c:	20000b60 	.word	0x20000b60
 800ab90:	20000b5c 	.word	0x20000b5c
 800ab94:	20001044 	.word	0x20001044
 800ab98:	20001040 	.word	0x20001040

0800ab9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aba2:	4b28      	ldr	r3, [pc, #160]	; (800ac44 <vTaskSwitchContext+0xa8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abaa:	4b27      	ldr	r3, [pc, #156]	; (800ac48 <vTaskSwitchContext+0xac>)
 800abac:	2201      	movs	r2, #1
 800abae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abb0:	e041      	b.n	800ac36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800abb2:	4b25      	ldr	r3, [pc, #148]	; (800ac48 <vTaskSwitchContext+0xac>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb8:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <vTaskSwitchContext+0xb0>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60fb      	str	r3, [r7, #12]
 800abbe:	e010      	b.n	800abe2 <vTaskSwitchContext+0x46>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10a      	bne.n	800abdc <vTaskSwitchContext+0x40>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	607b      	str	r3, [r7, #4]
}
 800abd8:	bf00      	nop
 800abda:	e7fe      	b.n	800abda <vTaskSwitchContext+0x3e>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3b01      	subs	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	491b      	ldr	r1, [pc, #108]	; (800ac50 <vTaskSwitchContext+0xb4>)
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4613      	mov	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	440b      	add	r3, r1
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0e4      	beq.n	800abc0 <vTaskSwitchContext+0x24>
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4a13      	ldr	r2, [pc, #76]	; (800ac50 <vTaskSwitchContext+0xb4>)
 800ac02:	4413      	add	r3, r2
 800ac04:	60bb      	str	r3, [r7, #8]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	605a      	str	r2, [r3, #4]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	3308      	adds	r3, #8
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d104      	bne.n	800ac26 <vTaskSwitchContext+0x8a>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	4a09      	ldr	r2, [pc, #36]	; (800ac54 <vTaskSwitchContext+0xb8>)
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	4a06      	ldr	r2, [pc, #24]	; (800ac4c <vTaskSwitchContext+0xb0>)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6013      	str	r3, [r2, #0]
}
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20001058 	.word	0x20001058
 800ac48:	20001044 	.word	0x20001044
 800ac4c:	20001038 	.word	0x20001038
 800ac50:	20000b60 	.word	0x20000b60
 800ac54:	20000b5c 	.word	0x20000b5c

0800ac58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	60fb      	str	r3, [r7, #12]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac7e:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <vTaskPlaceOnEventList+0x44>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3318      	adds	r3, #24
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7fe fd81 	bl	800978e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	6838      	ldr	r0, [r7, #0]
 800ac90:	f000 fa7c 	bl	800b18c <prvAddCurrentTaskToDelayedList>
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000b5c 	.word	0x20000b5c

0800aca0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	617b      	str	r3, [r7, #20]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acc8:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <vTaskPlaceOnEventListRestricted+0x54>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3318      	adds	r3, #24
 800acce:	4619      	mov	r1, r3
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7fe fd38 	bl	8009746 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800acdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ace0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	68b8      	ldr	r0, [r7, #8]
 800ace6:	f000 fa51 	bl	800b18c <prvAddCurrentTaskToDelayedList>
	}
 800acea:	bf00      	nop
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20000b5c 	.word	0x20000b5c

0800acf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	3318      	adds	r3, #24
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fe fd69 	bl	8009800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad2e:	4b1e      	ldr	r3, [pc, #120]	; (800ada8 <xTaskRemoveFromEventList+0xb0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d11d      	bne.n	800ad72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fd60 	bl	8009800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad44:	4b19      	ldr	r3, [pc, #100]	; (800adac <xTaskRemoveFromEventList+0xb4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d903      	bls.n	800ad54 <xTaskRemoveFromEventList+0x5c>
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4a16      	ldr	r2, [pc, #88]	; (800adac <xTaskRemoveFromEventList+0xb4>)
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4a13      	ldr	r2, [pc, #76]	; (800adb0 <xTaskRemoveFromEventList+0xb8>)
 800ad62:	441a      	add	r2, r3
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	3304      	adds	r3, #4
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	f7fe fceb 	bl	8009746 <vListInsertEnd>
 800ad70:	e005      	b.n	800ad7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	3318      	adds	r3, #24
 800ad76:	4619      	mov	r1, r3
 800ad78:	480e      	ldr	r0, [pc, #56]	; (800adb4 <xTaskRemoveFromEventList+0xbc>)
 800ad7a:	f7fe fce4 	bl	8009746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad82:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <xTaskRemoveFromEventList+0xc0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d905      	bls.n	800ad98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <xTaskRemoveFromEventList+0xc4>)
 800ad92:	2201      	movs	r2, #1
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	e001      	b.n	800ad9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad9c:	697b      	ldr	r3, [r7, #20]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20001058 	.word	0x20001058
 800adac:	20001038 	.word	0x20001038
 800adb0:	20000b60 	.word	0x20000b60
 800adb4:	20000ff0 	.word	0x20000ff0
 800adb8:	20000b5c 	.word	0x20000b5c
 800adbc:	20001044 	.word	0x20001044

0800adc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adc8:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <vTaskInternalSetTimeOutState+0x24>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <vTaskInternalSetTimeOutState+0x28>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	605a      	str	r2, [r3, #4]
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	20001048 	.word	0x20001048
 800ade8:	20001034 	.word	0x20001034

0800adec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	613b      	str	r3, [r7, #16]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10a      	bne.n	800ae2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	60fb      	str	r3, [r7, #12]
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae2e:	f000 fe79 	bl	800bb24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae32:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <xTaskCheckForTimeOut+0xbc>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d102      	bne.n	800ae52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	61fb      	str	r3, [r7, #28]
 800ae50:	e023      	b.n	800ae9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4b15      	ldr	r3, [pc, #84]	; (800aeac <xTaskCheckForTimeOut+0xc0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d007      	beq.n	800ae6e <xTaskCheckForTimeOut+0x82>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d302      	bcc.n	800ae6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	e015      	b.n	800ae9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d20b      	bcs.n	800ae90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff ff9b 	bl	800adc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	e004      	b.n	800ae9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae96:	2301      	movs	r3, #1
 800ae98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae9a:	f000 fe73 	bl	800bb84 <vPortExitCritical>

	return xReturn;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	20001034 	.word	0x20001034
 800aeac:	20001048 	.word	0x20001048

0800aeb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aeb4:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <vTaskMissedYield+0x14>)
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	601a      	str	r2, [r3, #0]
}
 800aeba:	bf00      	nop
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20001044 	.word	0x20001044

0800aec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aed0:	f000 f852 	bl	800af78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <prvIdleTask+0x28>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d9f9      	bls.n	800aed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aedc:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <prvIdleTask+0x2c>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aeec:	e7f0      	b.n	800aed0 <prvIdleTask+0x8>
 800aeee:	bf00      	nop
 800aef0:	20000b60 	.word	0x20000b60
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aefe:	2300      	movs	r3, #0
 800af00:	607b      	str	r3, [r7, #4]
 800af02:	e00c      	b.n	800af1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	4613      	mov	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4a12      	ldr	r2, [pc, #72]	; (800af58 <prvInitialiseTaskLists+0x60>)
 800af10:	4413      	add	r3, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe fbea 	bl	80096ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3301      	adds	r3, #1
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b37      	cmp	r3, #55	; 0x37
 800af22:	d9ef      	bls.n	800af04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af24:	480d      	ldr	r0, [pc, #52]	; (800af5c <prvInitialiseTaskLists+0x64>)
 800af26:	f7fe fbe1 	bl	80096ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af2a:	480d      	ldr	r0, [pc, #52]	; (800af60 <prvInitialiseTaskLists+0x68>)
 800af2c:	f7fe fbde 	bl	80096ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af30:	480c      	ldr	r0, [pc, #48]	; (800af64 <prvInitialiseTaskLists+0x6c>)
 800af32:	f7fe fbdb 	bl	80096ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af36:	480c      	ldr	r0, [pc, #48]	; (800af68 <prvInitialiseTaskLists+0x70>)
 800af38:	f7fe fbd8 	bl	80096ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af3c:	480b      	ldr	r0, [pc, #44]	; (800af6c <prvInitialiseTaskLists+0x74>)
 800af3e:	f7fe fbd5 	bl	80096ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af42:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <prvInitialiseTaskLists+0x78>)
 800af44:	4a05      	ldr	r2, [pc, #20]	; (800af5c <prvInitialiseTaskLists+0x64>)
 800af46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af48:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <prvInitialiseTaskLists+0x7c>)
 800af4a:	4a05      	ldr	r2, [pc, #20]	; (800af60 <prvInitialiseTaskLists+0x68>)
 800af4c:	601a      	str	r2, [r3, #0]
}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000b60 	.word	0x20000b60
 800af5c:	20000fc0 	.word	0x20000fc0
 800af60:	20000fd4 	.word	0x20000fd4
 800af64:	20000ff0 	.word	0x20000ff0
 800af68:	20001004 	.word	0x20001004
 800af6c:	2000101c 	.word	0x2000101c
 800af70:	20000fe8 	.word	0x20000fe8
 800af74:	20000fec 	.word	0x20000fec

0800af78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af7e:	e019      	b.n	800afb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af80:	f000 fdd0 	bl	800bb24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af84:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <prvCheckTasksWaitingTermination+0x50>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3304      	adds	r3, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe fc35 	bl	8009800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af96:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <prvCheckTasksWaitingTermination+0x54>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	4a0b      	ldr	r2, [pc, #44]	; (800afcc <prvCheckTasksWaitingTermination+0x54>)
 800af9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afaa:	f000 fdeb 	bl	800bb84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f810 	bl	800afd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afb4:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e1      	bne.n	800af80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20001004 	.word	0x20001004
 800afcc:	20001030 	.word	0x20001030
 800afd0:	20001018 	.word	0x20001018

0800afd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d108      	bne.n	800aff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afea:	4618      	mov	r0, r3
 800afec:	f000 ff88 	bl	800bf00 <vPortFree>
				vPortFree( pxTCB );
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 ff85 	bl	800bf00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aff6:	e018      	b.n	800b02a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800affe:	2b01      	cmp	r3, #1
 800b000:	d103      	bne.n	800b00a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 ff7c 	bl	800bf00 <vPortFree>
	}
 800b008:	e00f      	b.n	800b02a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b010:	2b02      	cmp	r3, #2
 800b012:	d00a      	beq.n	800b02a <prvDeleteTCB+0x56>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <prvDeleteTCB+0x54>
	}
 800b02a:	bf00      	nop
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b03a:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <prvResetNextTaskUnblockTime+0x38>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d104      	bne.n	800b04e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b044:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <prvResetNextTaskUnblockTime+0x3c>)
 800b046:	f04f 32ff 	mov.w	r2, #4294967295
 800b04a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b04c:	e008      	b.n	800b060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04e:	4b07      	ldr	r3, [pc, #28]	; (800b06c <prvResetNextTaskUnblockTime+0x38>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4a04      	ldr	r2, [pc, #16]	; (800b070 <prvResetNextTaskUnblockTime+0x3c>)
 800b05e:	6013      	str	r3, [r2, #0]
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20000fe8 	.word	0x20000fe8
 800b070:	20001050 	.word	0x20001050

0800b074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b07a:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <xTaskGetSchedulerState+0x34>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b082:	2301      	movs	r3, #1
 800b084:	607b      	str	r3, [r7, #4]
 800b086:	e008      	b.n	800b09a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b088:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <xTaskGetSchedulerState+0x38>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d102      	bne.n	800b096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b090:	2302      	movs	r3, #2
 800b092:	607b      	str	r3, [r7, #4]
 800b094:	e001      	b.n	800b09a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b096:	2300      	movs	r3, #0
 800b098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b09a:	687b      	ldr	r3, [r7, #4]
	}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	2000103c 	.word	0x2000103c
 800b0ac:	20001058 	.word	0x20001058

0800b0b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d056      	beq.n	800b174 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0c6:	4b2e      	ldr	r3, [pc, #184]	; (800b180 <xTaskPriorityDisinherit+0xd0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d00a      	beq.n	800b0e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	60fb      	str	r3, [r7, #12]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	60bb      	str	r3, [r7, #8]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b116:	429a      	cmp	r2, r3
 800b118:	d02c      	beq.n	800b174 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d128      	bne.n	800b174 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	3304      	adds	r3, #4
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe fb6a 	bl	8009800 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b144:	4b0f      	ldr	r3, [pc, #60]	; (800b184 <xTaskPriorityDisinherit+0xd4>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d903      	bls.n	800b154 <xTaskPriorityDisinherit+0xa4>
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	4a0c      	ldr	r2, [pc, #48]	; (800b184 <xTaskPriorityDisinherit+0xd4>)
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4a09      	ldr	r2, [pc, #36]	; (800b188 <xTaskPriorityDisinherit+0xd8>)
 800b162:	441a      	add	r2, r3
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	3304      	adds	r3, #4
 800b168:	4619      	mov	r1, r3
 800b16a:	4610      	mov	r0, r2
 800b16c:	f7fe faeb 	bl	8009746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b170:	2301      	movs	r3, #1
 800b172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b174:	697b      	ldr	r3, [r7, #20]
	}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000b5c 	.word	0x20000b5c
 800b184:	20001038 	.word	0x20001038
 800b188:	20000b60 	.word	0x20000b60

0800b18c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b196:	4b21      	ldr	r3, [pc, #132]	; (800b21c <prvAddCurrentTaskToDelayedList+0x90>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b19c:	4b20      	ldr	r3, [pc, #128]	; (800b220 <prvAddCurrentTaskToDelayedList+0x94>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fb2c 	bl	8009800 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ae:	d10a      	bne.n	800b1c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d007      	beq.n	800b1c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4819      	ldr	r0, [pc, #100]	; (800b224 <prvAddCurrentTaskToDelayedList+0x98>)
 800b1c0:	f7fe fac1 	bl	8009746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1c4:	e026      	b.n	800b214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1ce:	4b14      	ldr	r3, [pc, #80]	; (800b220 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d209      	bcs.n	800b1f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1de:	4b12      	ldr	r3, [pc, #72]	; (800b228 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	f7fe facf 	bl	800978e <vListInsert>
}
 800b1f0:	e010      	b.n	800b214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1f2:	4b0e      	ldr	r3, [pc, #56]	; (800b22c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	4b0a      	ldr	r3, [pc, #40]	; (800b220 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f7fe fac5 	bl	800978e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d202      	bcs.n	800b214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b20e:	4a08      	ldr	r2, [pc, #32]	; (800b230 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	6013      	str	r3, [r2, #0]
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20001034 	.word	0x20001034
 800b220:	20000b5c 	.word	0x20000b5c
 800b224:	2000101c 	.word	0x2000101c
 800b228:	20000fec 	.word	0x20000fec
 800b22c:	20000fe8 	.word	0x20000fe8
 800b230:	20001050 	.word	0x20001050

0800b234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08a      	sub	sp, #40	; 0x28
 800b238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b23a:	2300      	movs	r3, #0
 800b23c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b23e:	f000 fb07 	bl	800b850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b242:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <xTimerCreateTimerTask+0x80>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d021      	beq.n	800b28e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b252:	1d3a      	adds	r2, r7, #4
 800b254:	f107 0108 	add.w	r1, r7, #8
 800b258:	f107 030c 	add.w	r3, r7, #12
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe fa2b 	bl	80096b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	9202      	str	r2, [sp, #8]
 800b26a:	9301      	str	r3, [sp, #4]
 800b26c:	2302      	movs	r3, #2
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	460a      	mov	r2, r1
 800b274:	4910      	ldr	r1, [pc, #64]	; (800b2b8 <xTimerCreateTimerTask+0x84>)
 800b276:	4811      	ldr	r0, [pc, #68]	; (800b2bc <xTimerCreateTimerTask+0x88>)
 800b278:	f7ff f8de 	bl	800a438 <xTaskCreateStatic>
 800b27c:	4603      	mov	r3, r0
 800b27e:	4a10      	ldr	r2, [pc, #64]	; (800b2c0 <xTimerCreateTimerTask+0x8c>)
 800b280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b282:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <xTimerCreateTimerTask+0x8c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b28a:	2301      	movs	r3, #1
 800b28c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	613b      	str	r3, [r7, #16]
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2aa:	697b      	ldr	r3, [r7, #20]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	2000108c 	.word	0x2000108c
 800b2b8:	080107c8 	.word	0x080107c8
 800b2bc:	0800b3f9 	.word	0x0800b3f9
 800b2c0:	20001090 	.word	0x20001090

0800b2c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08a      	sub	sp, #40	; 0x28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	623b      	str	r3, [r7, #32]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b2f2:	4b1a      	ldr	r3, [pc, #104]	; (800b35c <xTimerGenericCommand+0x98>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d02a      	beq.n	800b350 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b05      	cmp	r3, #5
 800b30a:	dc18      	bgt.n	800b33e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b30c:	f7ff feb2 	bl	800b074 <xTaskGetSchedulerState>
 800b310:	4603      	mov	r3, r0
 800b312:	2b02      	cmp	r3, #2
 800b314:	d109      	bne.n	800b32a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b316:	4b11      	ldr	r3, [pc, #68]	; (800b35c <xTimerGenericCommand+0x98>)
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f107 0110 	add.w	r1, r7, #16
 800b31e:	2300      	movs	r3, #0
 800b320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b322:	f7fe fc21 	bl	8009b68 <xQueueGenericSend>
 800b326:	6278      	str	r0, [r7, #36]	; 0x24
 800b328:	e012      	b.n	800b350 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b32a:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <xTimerGenericCommand+0x98>)
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	f107 0110 	add.w	r1, r7, #16
 800b332:	2300      	movs	r3, #0
 800b334:	2200      	movs	r2, #0
 800b336:	f7fe fc17 	bl	8009b68 <xQueueGenericSend>
 800b33a:	6278      	str	r0, [r7, #36]	; 0x24
 800b33c:	e008      	b.n	800b350 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b33e:	4b07      	ldr	r3, [pc, #28]	; (800b35c <xTimerGenericCommand+0x98>)
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	f107 0110 	add.w	r1, r7, #16
 800b346:	2300      	movs	r3, #0
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	f7fe fd0b 	bl	8009d64 <xQueueGenericSendFromISR>
 800b34e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b352:	4618      	mov	r0, r3
 800b354:	3728      	adds	r7, #40	; 0x28
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	2000108c 	.word	0x2000108c

0800b360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b088      	sub	sp, #32
 800b364:	af02      	add	r7, sp, #8
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b36a:	4b22      	ldr	r3, [pc, #136]	; (800b3f4 <prvProcessExpiredTimer+0x94>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	3304      	adds	r3, #4
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fe fa41 	bl	8009800 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d022      	beq.n	800b3d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	699a      	ldr	r2, [r3, #24]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	18d1      	adds	r1, r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	6978      	ldr	r0, [r7, #20]
 800b39a:	f000 f8d1 	bl	800b540 <prvInsertTimerInActiveList>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d01f      	beq.n	800b3e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	6978      	ldr	r0, [r7, #20]
 800b3b0:	f7ff ff88 	bl	800b2c4 <xTimerGenericCommand>
 800b3b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d113      	bne.n	800b3e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	60fb      	str	r3, [r7, #12]
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3d8:	f023 0301 	bic.w	r3, r3, #1
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	6978      	ldr	r0, [r7, #20]
 800b3ea:	4798      	blx	r3
}
 800b3ec:	bf00      	nop
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20001084 	.word	0x20001084

0800b3f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f857 	bl	800b4b8 <prvGetNextExpireTime>
 800b40a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4619      	mov	r1, r3
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 f803 	bl	800b41c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b416:	f000 f8d5 	bl	800b5c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b41a:	e7f1      	b.n	800b400 <prvTimerTask+0x8>

0800b41c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b426:	f7ff fa43 	bl	800a8b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b42a:	f107 0308 	add.w	r3, r7, #8
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 f866 	bl	800b500 <prvSampleTimeNow>
 800b434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d130      	bne.n	800b49e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <prvProcessTimerOrBlockTask+0x3c>
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	429a      	cmp	r2, r3
 800b448:	d806      	bhi.n	800b458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b44a:	f7ff fa3f 	bl	800a8cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff ff85 	bl	800b360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b456:	e024      	b.n	800b4a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d008      	beq.n	800b470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <prvProcessTimerOrBlockTask+0x90>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <prvProcessTimerOrBlockTask+0x50>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <prvProcessTimerOrBlockTask+0x52>
 800b46c:	2300      	movs	r3, #0
 800b46e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b470:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <prvProcessTimerOrBlockTask+0x94>)
 800b472:	6818      	ldr	r0, [r3, #0]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	4619      	mov	r1, r3
 800b47e:	f7fe ffa7 	bl	800a3d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b482:	f7ff fa23 	bl	800a8cc <xTaskResumeAll>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10a      	bne.n	800b4a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <prvProcessTimerOrBlockTask+0x98>)
 800b48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	f3bf 8f6f 	isb	sy
}
 800b49c:	e001      	b.n	800b4a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b49e:	f7ff fa15 	bl	800a8cc <xTaskResumeAll>
}
 800b4a2:	bf00      	nop
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20001088 	.word	0x20001088
 800b4b0:	2000108c 	.word	0x2000108c
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4c0:	4b0e      	ldr	r3, [pc, #56]	; (800b4fc <prvGetNextExpireTime+0x44>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <prvGetNextExpireTime+0x16>
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	e000      	b.n	800b4d0 <prvGetNextExpireTime+0x18>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d105      	bne.n	800b4e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4dc:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <prvGetNextExpireTime+0x44>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	e001      	b.n	800b4ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20001084 	.word	0x20001084

0800b500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b508:	f7ff fa7e 	bl	800aa08 <xTaskGetTickCount>
 800b50c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b50e:	4b0b      	ldr	r3, [pc, #44]	; (800b53c <prvSampleTimeNow+0x3c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	429a      	cmp	r2, r3
 800b516:	d205      	bcs.n	800b524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b518:	f000 f936 	bl	800b788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	e002      	b.n	800b52a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b52a:	4a04      	ldr	r2, [pc, #16]	; (800b53c <prvSampleTimeNow+0x3c>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b530:	68fb      	ldr	r3, [r7, #12]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20001094 	.word	0x20001094

0800b540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d812      	bhi.n	800b58c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	1ad2      	subs	r2, r2, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	429a      	cmp	r2, r3
 800b572:	d302      	bcc.n	800b57a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b574:	2301      	movs	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e01b      	b.n	800b5b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <prvInsertTimerInActiveList+0x7c>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3304      	adds	r3, #4
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7fe f902 	bl	800978e <vListInsert>
 800b58a:	e012      	b.n	800b5b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d206      	bcs.n	800b5a2 <prvInsertTimerInActiveList+0x62>
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d302      	bcc.n	800b5a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	617b      	str	r3, [r7, #20]
 800b5a0:	e007      	b.n	800b5b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5a2:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <prvInsertTimerInActiveList+0x80>)
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	f7fe f8ee 	bl	800978e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5b2:	697b      	ldr	r3, [r7, #20]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20001088 	.word	0x20001088
 800b5c0:	20001084 	.word	0x20001084

0800b5c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08e      	sub	sp, #56	; 0x38
 800b5c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5ca:	e0ca      	b.n	800b762 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da18      	bge.n	800b604 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b5d2:	1d3b      	adds	r3, r7, #4
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10a      	bne.n	800b5f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	61fb      	str	r3, [r7, #28]
}
 800b5f0:	bf00      	nop
 800b5f2:	e7fe      	b.n	800b5f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5fa:	6850      	ldr	r0, [r2, #4]
 800b5fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5fe:	6892      	ldr	r2, [r2, #8]
 800b600:	4611      	mov	r1, r2
 800b602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f2c0 80aa 	blt.w	800b760 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe f8ef 	bl	8009800 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b622:	463b      	mov	r3, r7
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff ff6b 	bl	800b500 <prvSampleTimeNow>
 800b62a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b09      	cmp	r3, #9
 800b630:	f200 8097 	bhi.w	800b762 <prvProcessReceivedCommands+0x19e>
 800b634:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <prvProcessReceivedCommands+0x78>)
 800b636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63a:	bf00      	nop
 800b63c:	0800b665 	.word	0x0800b665
 800b640:	0800b665 	.word	0x0800b665
 800b644:	0800b665 	.word	0x0800b665
 800b648:	0800b6d9 	.word	0x0800b6d9
 800b64c:	0800b6ed 	.word	0x0800b6ed
 800b650:	0800b737 	.word	0x0800b737
 800b654:	0800b665 	.word	0x0800b665
 800b658:	0800b665 	.word	0x0800b665
 800b65c:	0800b6d9 	.word	0x0800b6d9
 800b660:	0800b6ed 	.word	0x0800b6ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b66a:	f043 0301 	orr.w	r3, r3, #1
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	18d1      	adds	r1, r2, r3
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b684:	f7ff ff5c 	bl	800b540 <prvInsertTimerInActiveList>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d069      	beq.n	800b762 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d05e      	beq.n	800b762 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	441a      	add	r2, r3
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b6:	f7ff fe05 	bl	800b2c4 <xTimerGenericCommand>
 800b6ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d14f      	bne.n	800b762 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	61bb      	str	r3, [r7, #24]
}
 800b6d4:	bf00      	nop
 800b6d6:	e7fe      	b.n	800b6d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6de:	f023 0301 	bic.w	r3, r3, #1
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b6ea:	e03a      	b.n	800b762 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6f2:	f043 0301 	orr.w	r3, r3, #1
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	617b      	str	r3, [r7, #20]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	699a      	ldr	r2, [r3, #24]
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	18d1      	adds	r1, r2, r3
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b730:	f7ff ff06 	bl	800b540 <prvInsertTimerInActiveList>
					break;
 800b734:	e015      	b.n	800b762 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73c:	f003 0302 	and.w	r3, r3, #2
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b746:	f000 fbdb 	bl	800bf00 <vPortFree>
 800b74a:	e00a      	b.n	800b762 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b752:	f023 0301 	bic.w	r3, r3, #1
 800b756:	b2da      	uxtb	r2, r3
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b75e:	e000      	b.n	800b762 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b760:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b762:	4b08      	ldr	r3, [pc, #32]	; (800b784 <prvProcessReceivedCommands+0x1c0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	1d39      	adds	r1, r7, #4
 800b768:	2200      	movs	r2, #0
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fb96 	bl	8009e9c <xQueueReceive>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	f47f af2a 	bne.w	800b5cc <prvProcessReceivedCommands+0x8>
	}
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	3730      	adds	r7, #48	; 0x30
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	2000108c 	.word	0x2000108c

0800b788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b78e:	e048      	b.n	800b822 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b790:	4b2d      	ldr	r3, [pc, #180]	; (800b848 <prvSwitchTimerLists+0xc0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b79a:	4b2b      	ldr	r3, [pc, #172]	; (800b848 <prvSwitchTimerLists+0xc0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fe f829 	bl	8009800 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7bc:	f003 0304 	and.w	r3, r3, #4
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d02e      	beq.n	800b822 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d90e      	bls.n	800b7f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7e2:	4b19      	ldr	r3, [pc, #100]	; (800b848 <prvSwitchTimerLists+0xc0>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	f7fd ffce 	bl	800978e <vListInsert>
 800b7f2:	e016      	b.n	800b822 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fd60 	bl	800b2c4 <xTimerGenericCommand>
 800b804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	603b      	str	r3, [r7, #0]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b822:	4b09      	ldr	r3, [pc, #36]	; (800b848 <prvSwitchTimerLists+0xc0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1b1      	bne.n	800b790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <prvSwitchTimerLists+0xc0>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b832:	4b06      	ldr	r3, [pc, #24]	; (800b84c <prvSwitchTimerLists+0xc4>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a04      	ldr	r2, [pc, #16]	; (800b848 <prvSwitchTimerLists+0xc0>)
 800b838:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b83a:	4a04      	ldr	r2, [pc, #16]	; (800b84c <prvSwitchTimerLists+0xc4>)
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	6013      	str	r3, [r2, #0]
}
 800b840:	bf00      	nop
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20001084 	.word	0x20001084
 800b84c:	20001088 	.word	0x20001088

0800b850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b856:	f000 f965 	bl	800bb24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b85a:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <prvCheckForValidListAndQueue+0x60>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d120      	bne.n	800b8a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b862:	4814      	ldr	r0, [pc, #80]	; (800b8b4 <prvCheckForValidListAndQueue+0x64>)
 800b864:	f7fd ff42 	bl	80096ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b868:	4813      	ldr	r0, [pc, #76]	; (800b8b8 <prvCheckForValidListAndQueue+0x68>)
 800b86a:	f7fd ff3f 	bl	80096ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b86e:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <prvCheckForValidListAndQueue+0x6c>)
 800b870:	4a10      	ldr	r2, [pc, #64]	; (800b8b4 <prvCheckForValidListAndQueue+0x64>)
 800b872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b874:	4b12      	ldr	r3, [pc, #72]	; (800b8c0 <prvCheckForValidListAndQueue+0x70>)
 800b876:	4a10      	ldr	r2, [pc, #64]	; (800b8b8 <prvCheckForValidListAndQueue+0x68>)
 800b878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b87a:	2300      	movs	r3, #0
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	4b11      	ldr	r3, [pc, #68]	; (800b8c4 <prvCheckForValidListAndQueue+0x74>)
 800b880:	4a11      	ldr	r2, [pc, #68]	; (800b8c8 <prvCheckForValidListAndQueue+0x78>)
 800b882:	2110      	movs	r1, #16
 800b884:	200a      	movs	r0, #10
 800b886:	f7fe f84d 	bl	8009924 <xQueueGenericCreateStatic>
 800b88a:	4603      	mov	r3, r0
 800b88c:	4a08      	ldr	r2, [pc, #32]	; (800b8b0 <prvCheckForValidListAndQueue+0x60>)
 800b88e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <prvCheckForValidListAndQueue+0x60>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b898:	4b05      	ldr	r3, [pc, #20]	; (800b8b0 <prvCheckForValidListAndQueue+0x60>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	490b      	ldr	r1, [pc, #44]	; (800b8cc <prvCheckForValidListAndQueue+0x7c>)
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe fd6c 	bl	800a37c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8a4:	f000 f96e 	bl	800bb84 <vPortExitCritical>
}
 800b8a8:	bf00      	nop
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	2000108c 	.word	0x2000108c
 800b8b4:	2000105c 	.word	0x2000105c
 800b8b8:	20001070 	.word	0x20001070
 800b8bc:	20001084 	.word	0x20001084
 800b8c0:	20001088 	.word	0x20001088
 800b8c4:	20001138 	.word	0x20001138
 800b8c8:	20001098 	.word	0x20001098
 800b8cc:	080107d0 	.word	0x080107d0

0800b8d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3b04      	subs	r3, #4
 800b8e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3b04      	subs	r3, #4
 800b8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f023 0201 	bic.w	r2, r3, #1
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3b04      	subs	r3, #4
 800b8fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b900:	4a0c      	ldr	r2, [pc, #48]	; (800b934 <pxPortInitialiseStack+0x64>)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3b14      	subs	r3, #20
 800b90a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3b04      	subs	r3, #4
 800b916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f06f 0202 	mvn.w	r2, #2
 800b91e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3b20      	subs	r3, #32
 800b924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b926:	68fb      	ldr	r3, [r7, #12]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	0800b939 	.word	0x0800b939

0800b938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b942:	4b12      	ldr	r3, [pc, #72]	; (800b98c <prvTaskExitError+0x54>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94a:	d00a      	beq.n	800b962 <prvTaskExitError+0x2a>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	60fb      	str	r3, [r7, #12]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <prvTaskExitError+0x28>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	60bb      	str	r3, [r7, #8]
}
 800b974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b976:	bf00      	nop
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0fc      	beq.n	800b978 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	2000000c 	.word	0x2000000c

0800b990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b990:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <pxCurrentTCBConst2>)
 800b992:	6819      	ldr	r1, [r3, #0]
 800b994:	6808      	ldr	r0, [r1, #0]
 800b996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99a:	f380 8809 	msr	PSP, r0
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f04f 0000 	mov.w	r0, #0
 800b9a6:	f380 8811 	msr	BASEPRI, r0
 800b9aa:	4770      	bx	lr
 800b9ac:	f3af 8000 	nop.w

0800b9b0 <pxCurrentTCBConst2>:
 800b9b0:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop

0800b9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9b8:	4808      	ldr	r0, [pc, #32]	; (800b9dc <prvPortStartFirstTask+0x24>)
 800b9ba:	6800      	ldr	r0, [r0, #0]
 800b9bc:	6800      	ldr	r0, [r0, #0]
 800b9be:	f380 8808 	msr	MSP, r0
 800b9c2:	f04f 0000 	mov.w	r0, #0
 800b9c6:	f380 8814 	msr	CONTROL, r0
 800b9ca:	b662      	cpsie	i
 800b9cc:	b661      	cpsie	f
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	df00      	svc	0
 800b9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9da:	bf00      	nop
 800b9dc:	e000ed08 	.word	0xe000ed08

0800b9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9e6:	4b46      	ldr	r3, [pc, #280]	; (800bb00 <xPortStartScheduler+0x120>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a46      	ldr	r2, [pc, #280]	; (800bb04 <xPortStartScheduler+0x124>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d10a      	bne.n	800ba06 <xPortStartScheduler+0x26>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	613b      	str	r3, [r7, #16]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba06:	4b3e      	ldr	r3, [pc, #248]	; (800bb00 <xPortStartScheduler+0x120>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a3f      	ldr	r2, [pc, #252]	; (800bb08 <xPortStartScheduler+0x128>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d10a      	bne.n	800ba26 <xPortStartScheduler+0x46>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	60fb      	str	r3, [r7, #12]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba26:	4b39      	ldr	r3, [pc, #228]	; (800bb0c <xPortStartScheduler+0x12c>)
 800ba28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	22ff      	movs	r2, #255	; 0xff
 800ba36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	4b31      	ldr	r3, [pc, #196]	; (800bb10 <xPortStartScheduler+0x130>)
 800ba4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba4e:	4b31      	ldr	r3, [pc, #196]	; (800bb14 <xPortStartScheduler+0x134>)
 800ba50:	2207      	movs	r2, #7
 800ba52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba54:	e009      	b.n	800ba6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba56:	4b2f      	ldr	r3, [pc, #188]	; (800bb14 <xPortStartScheduler+0x134>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	4a2d      	ldr	r2, [pc, #180]	; (800bb14 <xPortStartScheduler+0x134>)
 800ba5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba72:	2b80      	cmp	r3, #128	; 0x80
 800ba74:	d0ef      	beq.n	800ba56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba76:	4b27      	ldr	r3, [pc, #156]	; (800bb14 <xPortStartScheduler+0x134>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f1c3 0307 	rsb	r3, r3, #7
 800ba7e:	2b04      	cmp	r3, #4
 800ba80:	d00a      	beq.n	800ba98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	60bb      	str	r3, [r7, #8]
}
 800ba94:	bf00      	nop
 800ba96:	e7fe      	b.n	800ba96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba98:	4b1e      	ldr	r3, [pc, #120]	; (800bb14 <xPortStartScheduler+0x134>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	021b      	lsls	r3, r3, #8
 800ba9e:	4a1d      	ldr	r2, [pc, #116]	; (800bb14 <xPortStartScheduler+0x134>)
 800baa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baa2:	4b1c      	ldr	r3, [pc, #112]	; (800bb14 <xPortStartScheduler+0x134>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baaa:	4a1a      	ldr	r2, [pc, #104]	; (800bb14 <xPortStartScheduler+0x134>)
 800baac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bab6:	4b18      	ldr	r3, [pc, #96]	; (800bb18 <xPortStartScheduler+0x138>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a17      	ldr	r2, [pc, #92]	; (800bb18 <xPortStartScheduler+0x138>)
 800babc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bac2:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <xPortStartScheduler+0x138>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a14      	ldr	r2, [pc, #80]	; (800bb18 <xPortStartScheduler+0x138>)
 800bac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bacc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bace:	f000 f8dd 	bl	800bc8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bad2:	4b12      	ldr	r3, [pc, #72]	; (800bb1c <xPortStartScheduler+0x13c>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bad8:	f000 f8fc 	bl	800bcd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800badc:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <xPortStartScheduler+0x140>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a0f      	ldr	r2, [pc, #60]	; (800bb20 <xPortStartScheduler+0x140>)
 800bae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bae8:	f7ff ff66 	bl	800b9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800baec:	f7ff f856 	bl	800ab9c <vTaskSwitchContext>
	prvTaskExitError();
 800baf0:	f7ff ff22 	bl	800b938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	e000ed00 	.word	0xe000ed00
 800bb04:	410fc271 	.word	0x410fc271
 800bb08:	410fc270 	.word	0x410fc270
 800bb0c:	e000e400 	.word	0xe000e400
 800bb10:	20001188 	.word	0x20001188
 800bb14:	2000118c 	.word	0x2000118c
 800bb18:	e000ed20 	.word	0xe000ed20
 800bb1c:	2000000c 	.word	0x2000000c
 800bb20:	e000ef34 	.word	0xe000ef34

0800bb24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	607b      	str	r3, [r7, #4]
}
 800bb3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <vPortEnterCritical+0x58>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3301      	adds	r3, #1
 800bb44:	4a0d      	ldr	r2, [pc, #52]	; (800bb7c <vPortEnterCritical+0x58>)
 800bb46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb48:	4b0c      	ldr	r3, [pc, #48]	; (800bb7c <vPortEnterCritical+0x58>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d10f      	bne.n	800bb70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb50:	4b0b      	ldr	r3, [pc, #44]	; (800bb80 <vPortEnterCritical+0x5c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00a      	beq.n	800bb70 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	603b      	str	r3, [r7, #0]
}
 800bb6c:	bf00      	nop
 800bb6e:	e7fe      	b.n	800bb6e <vPortEnterCritical+0x4a>
	}
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	2000000c 	.word	0x2000000c
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb8a:	4b12      	ldr	r3, [pc, #72]	; (800bbd4 <vPortExitCritical+0x50>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10a      	bne.n	800bba8 <vPortExitCritical+0x24>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	607b      	str	r3, [r7, #4]
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bba8:	4b0a      	ldr	r3, [pc, #40]	; (800bbd4 <vPortExitCritical+0x50>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	4a09      	ldr	r2, [pc, #36]	; (800bbd4 <vPortExitCritical+0x50>)
 800bbb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbb2:	4b08      	ldr	r3, [pc, #32]	; (800bbd4 <vPortExitCritical+0x50>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d105      	bne.n	800bbc6 <vPortExitCritical+0x42>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	f383 8811 	msr	BASEPRI, r3
}
 800bbc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbc6:	bf00      	nop
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	2000000c 	.word	0x2000000c
	...

0800bbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbe0:	f3ef 8009 	mrs	r0, PSP
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	4b15      	ldr	r3, [pc, #84]	; (800bc40 <pxCurrentTCBConst>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	f01e 0f10 	tst.w	lr, #16
 800bbf0:	bf08      	it	eq
 800bbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfa:	6010      	str	r0, [r2, #0]
 800bbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc04:	f380 8811 	msr	BASEPRI, r0
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f7fe ffc4 	bl	800ab9c <vTaskSwitchContext>
 800bc14:	f04f 0000 	mov.w	r0, #0
 800bc18:	f380 8811 	msr	BASEPRI, r0
 800bc1c:	bc09      	pop	{r0, r3}
 800bc1e:	6819      	ldr	r1, [r3, #0]
 800bc20:	6808      	ldr	r0, [r1, #0]
 800bc22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc26:	f01e 0f10 	tst.w	lr, #16
 800bc2a:	bf08      	it	eq
 800bc2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc30:	f380 8809 	msr	PSP, r0
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w

0800bc40 <pxCurrentTCBConst>:
 800bc40:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc44:	bf00      	nop
 800bc46:	bf00      	nop

0800bc48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	607b      	str	r3, [r7, #4]
}
 800bc60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc62:	f7fe fee1 	bl	800aa28 <xTaskIncrementTick>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <xPortSysTickHandler+0x40>)
 800bc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	2300      	movs	r3, #0
 800bc76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	f383 8811 	msr	BASEPRI, r3
}
 800bc7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc90:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <vPortSetupTimerInterrupt+0x34>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc96:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <vPortSetupTimerInterrupt+0x38>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc9c:	4b0a      	ldr	r3, [pc, #40]	; (800bcc8 <vPortSetupTimerInterrupt+0x3c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a0a      	ldr	r2, [pc, #40]	; (800bccc <vPortSetupTimerInterrupt+0x40>)
 800bca2:	fba2 2303 	umull	r2, r3, r2, r3
 800bca6:	099b      	lsrs	r3, r3, #6
 800bca8:	4a09      	ldr	r2, [pc, #36]	; (800bcd0 <vPortSetupTimerInterrupt+0x44>)
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcae:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <vPortSetupTimerInterrupt+0x34>)
 800bcb0:	2207      	movs	r2, #7
 800bcb2:	601a      	str	r2, [r3, #0]
}
 800bcb4:	bf00      	nop
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	e000e010 	.word	0xe000e010
 800bcc4:	e000e018 	.word	0xe000e018
 800bcc8:	20000000 	.word	0x20000000
 800bccc:	10624dd3 	.word	0x10624dd3
 800bcd0:	e000e014 	.word	0xe000e014

0800bcd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bcd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bce4 <vPortEnableVFP+0x10>
 800bcd8:	6801      	ldr	r1, [r0, #0]
 800bcda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bcde:	6001      	str	r1, [r0, #0]
 800bce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bce2:	bf00      	nop
 800bce4:	e000ed88 	.word	0xe000ed88

0800bce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcee:	f3ef 8305 	mrs	r3, IPSR
 800bcf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b0f      	cmp	r3, #15
 800bcf8:	d914      	bls.n	800bd24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcfa:	4a17      	ldr	r2, [pc, #92]	; (800bd58 <vPortValidateInterruptPriority+0x70>)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd04:	4b15      	ldr	r3, [pc, #84]	; (800bd5c <vPortValidateInterruptPriority+0x74>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	7afa      	ldrb	r2, [r7, #11]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d20a      	bcs.n	800bd24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd24:	4b0e      	ldr	r3, [pc, #56]	; (800bd60 <vPortValidateInterruptPriority+0x78>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <vPortValidateInterruptPriority+0x7c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d90a      	bls.n	800bd4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	603b      	str	r3, [r7, #0]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <vPortValidateInterruptPriority+0x60>
	}
 800bd4a:	bf00      	nop
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	e000e3f0 	.word	0xe000e3f0
 800bd5c:	20001188 	.word	0x20001188
 800bd60:	e000ed0c 	.word	0xe000ed0c
 800bd64:	2000118c 	.word	0x2000118c

0800bd68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08a      	sub	sp, #40	; 0x28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd70:	2300      	movs	r3, #0
 800bd72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd74:	f7fe fd9c 	bl	800a8b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd78:	4b5b      	ldr	r3, [pc, #364]	; (800bee8 <pvPortMalloc+0x180>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd80:	f000 f920 	bl	800bfc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd84:	4b59      	ldr	r3, [pc, #356]	; (800beec <pvPortMalloc+0x184>)
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f040 8093 	bne.w	800beb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d01d      	beq.n	800bdd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd98:	2208      	movs	r2, #8
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f003 0307 	and.w	r3, r3, #7
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d014      	beq.n	800bdd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f023 0307 	bic.w	r3, r3, #7
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f003 0307 	and.w	r3, r3, #7
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <pvPortMalloc+0x6c>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	617b      	str	r3, [r7, #20]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d06e      	beq.n	800beb8 <pvPortMalloc+0x150>
 800bdda:	4b45      	ldr	r3, [pc, #276]	; (800bef0 <pvPortMalloc+0x188>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d869      	bhi.n	800beb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bde4:	4b43      	ldr	r3, [pc, #268]	; (800bef4 <pvPortMalloc+0x18c>)
 800bde6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bde8:	4b42      	ldr	r3, [pc, #264]	; (800bef4 <pvPortMalloc+0x18c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdee:	e004      	b.n	800bdfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	429a      	cmp	r2, r3
 800be02:	d903      	bls.n	800be0c <pvPortMalloc+0xa4>
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1f1      	bne.n	800bdf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be0c:	4b36      	ldr	r3, [pc, #216]	; (800bee8 <pvPortMalloc+0x180>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be12:	429a      	cmp	r2, r3
 800be14:	d050      	beq.n	800beb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2208      	movs	r2, #8
 800be1c:	4413      	add	r3, r2
 800be1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	1ad2      	subs	r2, r2, r3
 800be30:	2308      	movs	r3, #8
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	429a      	cmp	r2, r3
 800be36:	d91f      	bls.n	800be78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <pvPortMalloc+0xf8>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	613b      	str	r3, [r7, #16]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	1ad2      	subs	r2, r2, r3
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be72:	69b8      	ldr	r0, [r7, #24]
 800be74:	f000 f908 	bl	800c088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be78:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <pvPortMalloc+0x188>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	4a1b      	ldr	r2, [pc, #108]	; (800bef0 <pvPortMalloc+0x188>)
 800be84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <pvPortMalloc+0x188>)
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <pvPortMalloc+0x190>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d203      	bcs.n	800be9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be92:	4b17      	ldr	r3, [pc, #92]	; (800bef0 <pvPortMalloc+0x188>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a18      	ldr	r2, [pc, #96]	; (800bef8 <pvPortMalloc+0x190>)
 800be98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	685a      	ldr	r2, [r3, #4]
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <pvPortMalloc+0x184>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	431a      	orrs	r2, r3
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <pvPortMalloc+0x194>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	4a11      	ldr	r2, [pc, #68]	; (800befc <pvPortMalloc+0x194>)
 800beb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800beb8:	f7fe fd08 	bl	800a8cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	f003 0307 	and.w	r3, r3, #7
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <pvPortMalloc+0x174>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	60fb      	str	r3, [r7, #12]
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <pvPortMalloc+0x172>
	return pvReturn;
 800bedc:	69fb      	ldr	r3, [r7, #28]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3728      	adds	r7, #40	; 0x28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20006198 	.word	0x20006198
 800beec:	200061ac 	.word	0x200061ac
 800bef0:	2000619c 	.word	0x2000619c
 800bef4:	20006190 	.word	0x20006190
 800bef8:	200061a0 	.word	0x200061a0
 800befc:	200061a4 	.word	0x200061a4

0800bf00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d04d      	beq.n	800bfae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf12:	2308      	movs	r3, #8
 800bf14:	425b      	negs	r3, r3
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4413      	add	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	4b24      	ldr	r3, [pc, #144]	; (800bfb8 <vPortFree+0xb8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4013      	ands	r3, r2
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <vPortFree+0x44>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	60fb      	str	r3, [r7, #12]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <vPortFree+0x62>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	60bb      	str	r3, [r7, #8]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <vPortFree+0xb8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01e      	beq.n	800bfae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d11a      	bne.n	800bfae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <vPortFree+0xb8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	43db      	mvns	r3, r3
 800bf82:	401a      	ands	r2, r3
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf88:	f7fe fc92 	bl	800a8b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <vPortFree+0xbc>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4413      	add	r3, r2
 800bf96:	4a09      	ldr	r2, [pc, #36]	; (800bfbc <vPortFree+0xbc>)
 800bf98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf9a:	6938      	ldr	r0, [r7, #16]
 800bf9c:	f000 f874 	bl	800c088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <vPortFree+0xc0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	4a06      	ldr	r2, [pc, #24]	; (800bfc0 <vPortFree+0xc0>)
 800bfa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bfaa:	f7fe fc8f 	bl	800a8cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfae:	bf00      	nop
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	200061ac 	.word	0x200061ac
 800bfbc:	2000619c 	.word	0x2000619c
 800bfc0:	200061a8 	.word	0x200061a8

0800bfc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800bfce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfd0:	4b27      	ldr	r3, [pc, #156]	; (800c070 <prvHeapInit+0xac>)
 800bfd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f003 0307 	and.w	r3, r3, #7
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00c      	beq.n	800bff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	3307      	adds	r3, #7
 800bfe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f023 0307 	bic.w	r3, r3, #7
 800bfea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	4a1f      	ldr	r2, [pc, #124]	; (800c070 <prvHeapInit+0xac>)
 800bff4:	4413      	add	r3, r2
 800bff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bffc:	4a1d      	ldr	r2, [pc, #116]	; (800c074 <prvHeapInit+0xb0>)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c002:	4b1c      	ldr	r3, [pc, #112]	; (800c074 <prvHeapInit+0xb0>)
 800c004:	2200      	movs	r2, #0
 800c006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	4413      	add	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c010:	2208      	movs	r2, #8
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	1a9b      	subs	r3, r3, r2
 800c016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f023 0307 	bic.w	r3, r3, #7
 800c01e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4a15      	ldr	r2, [pc, #84]	; (800c078 <prvHeapInit+0xb4>)
 800c024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c026:	4b14      	ldr	r3, [pc, #80]	; (800c078 <prvHeapInit+0xb4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2200      	movs	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c02e:	4b12      	ldr	r3, [pc, #72]	; (800c078 <prvHeapInit+0xb4>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c044:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <prvHeapInit+0xb4>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	4a0a      	ldr	r2, [pc, #40]	; (800c07c <prvHeapInit+0xb8>)
 800c052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	4a09      	ldr	r2, [pc, #36]	; (800c080 <prvHeapInit+0xbc>)
 800c05a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c05c:	4b09      	ldr	r3, [pc, #36]	; (800c084 <prvHeapInit+0xc0>)
 800c05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c062:	601a      	str	r2, [r3, #0]
}
 800c064:	bf00      	nop
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	20001190 	.word	0x20001190
 800c074:	20006190 	.word	0x20006190
 800c078:	20006198 	.word	0x20006198
 800c07c:	200061a0 	.word	0x200061a0
 800c080:	2000619c 	.word	0x2000619c
 800c084:	200061ac 	.word	0x200061ac

0800c088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c090:	4b28      	ldr	r3, [pc, #160]	; (800c134 <prvInsertBlockIntoFreeList+0xac>)
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	e002      	b.n	800c09c <prvInsertBlockIntoFreeList+0x14>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	60fb      	str	r3, [r7, #12]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d8f7      	bhi.n	800c096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d108      	bne.n	800c0ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	441a      	add	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d118      	bne.n	800c110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	4b15      	ldr	r3, [pc, #84]	; (800c138 <prvInsertBlockIntoFreeList+0xb0>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d00d      	beq.n	800c106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	441a      	add	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	e008      	b.n	800c118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c106:	4b0c      	ldr	r3, [pc, #48]	; (800c138 <prvInsertBlockIntoFreeList+0xb0>)
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	e003      	b.n	800c118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d002      	beq.n	800c126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c126:	bf00      	nop
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20006190 	.word	0x20006190
 800c138:	20006198 	.word	0x20006198

0800c13c <__errno>:
 800c13c:	4b01      	ldr	r3, [pc, #4]	; (800c144 <__errno+0x8>)
 800c13e:	6818      	ldr	r0, [r3, #0]
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	20000010 	.word	0x20000010

0800c148 <__libc_init_array>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	4d0d      	ldr	r5, [pc, #52]	; (800c180 <__libc_init_array+0x38>)
 800c14c:	4c0d      	ldr	r4, [pc, #52]	; (800c184 <__libc_init_array+0x3c>)
 800c14e:	1b64      	subs	r4, r4, r5
 800c150:	10a4      	asrs	r4, r4, #2
 800c152:	2600      	movs	r6, #0
 800c154:	42a6      	cmp	r6, r4
 800c156:	d109      	bne.n	800c16c <__libc_init_array+0x24>
 800c158:	4d0b      	ldr	r5, [pc, #44]	; (800c188 <__libc_init_array+0x40>)
 800c15a:	4c0c      	ldr	r4, [pc, #48]	; (800c18c <__libc_init_array+0x44>)
 800c15c:	f004 fa88 	bl	8010670 <_init>
 800c160:	1b64      	subs	r4, r4, r5
 800c162:	10a4      	asrs	r4, r4, #2
 800c164:	2600      	movs	r6, #0
 800c166:	42a6      	cmp	r6, r4
 800c168:	d105      	bne.n	800c176 <__libc_init_array+0x2e>
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c170:	4798      	blx	r3
 800c172:	3601      	adds	r6, #1
 800c174:	e7ee      	b.n	800c154 <__libc_init_array+0xc>
 800c176:	f855 3b04 	ldr.w	r3, [r5], #4
 800c17a:	4798      	blx	r3
 800c17c:	3601      	adds	r6, #1
 800c17e:	e7f2      	b.n	800c166 <__libc_init_array+0x1e>
 800c180:	0801119c 	.word	0x0801119c
 800c184:	0801119c 	.word	0x0801119c
 800c188:	0801119c 	.word	0x0801119c
 800c18c:	080111a0 	.word	0x080111a0

0800c190 <memcpy>:
 800c190:	440a      	add	r2, r1
 800c192:	4291      	cmp	r1, r2
 800c194:	f100 33ff 	add.w	r3, r0, #4294967295
 800c198:	d100      	bne.n	800c19c <memcpy+0xc>
 800c19a:	4770      	bx	lr
 800c19c:	b510      	push	{r4, lr}
 800c19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a6:	4291      	cmp	r1, r2
 800c1a8:	d1f9      	bne.n	800c19e <memcpy+0xe>
 800c1aa:	bd10      	pop	{r4, pc}

0800c1ac <memset>:
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memset+0xa>
 800c1b4:	4770      	bx	lr
 800c1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ba:	e7f9      	b.n	800c1b0 <memset+0x4>

0800c1bc <__cvt>:
 800c1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c0:	ec55 4b10 	vmov	r4, r5, d0
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	460e      	mov	r6, r1
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c1d2:	461d      	movlt	r5, r3
 800c1d4:	2300      	movge	r3, #0
 800c1d6:	232d      	movlt	r3, #45	; 0x2d
 800c1d8:	700b      	strb	r3, [r1, #0]
 800c1da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c1e0:	4691      	mov	r9, r2
 800c1e2:	f023 0820 	bic.w	r8, r3, #32
 800c1e6:	bfbc      	itt	lt
 800c1e8:	4622      	movlt	r2, r4
 800c1ea:	4614      	movlt	r4, r2
 800c1ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1f0:	d005      	beq.n	800c1fe <__cvt+0x42>
 800c1f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c1f6:	d100      	bne.n	800c1fa <__cvt+0x3e>
 800c1f8:	3601      	adds	r6, #1
 800c1fa:	2102      	movs	r1, #2
 800c1fc:	e000      	b.n	800c200 <__cvt+0x44>
 800c1fe:	2103      	movs	r1, #3
 800c200:	ab03      	add	r3, sp, #12
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	ab02      	add	r3, sp, #8
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	ec45 4b10 	vmov	d0, r4, r5
 800c20c:	4653      	mov	r3, sl
 800c20e:	4632      	mov	r2, r6
 800c210:	f000 fcea 	bl	800cbe8 <_dtoa_r>
 800c214:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c218:	4607      	mov	r7, r0
 800c21a:	d102      	bne.n	800c222 <__cvt+0x66>
 800c21c:	f019 0f01 	tst.w	r9, #1
 800c220:	d022      	beq.n	800c268 <__cvt+0xac>
 800c222:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c226:	eb07 0906 	add.w	r9, r7, r6
 800c22a:	d110      	bne.n	800c24e <__cvt+0x92>
 800c22c:	783b      	ldrb	r3, [r7, #0]
 800c22e:	2b30      	cmp	r3, #48	; 0x30
 800c230:	d10a      	bne.n	800c248 <__cvt+0x8c>
 800c232:	2200      	movs	r2, #0
 800c234:	2300      	movs	r3, #0
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 fc5d 	bl	8000af8 <__aeabi_dcmpeq>
 800c23e:	b918      	cbnz	r0, 800c248 <__cvt+0x8c>
 800c240:	f1c6 0601 	rsb	r6, r6, #1
 800c244:	f8ca 6000 	str.w	r6, [sl]
 800c248:	f8da 3000 	ldr.w	r3, [sl]
 800c24c:	4499      	add	r9, r3
 800c24e:	2200      	movs	r2, #0
 800c250:	2300      	movs	r3, #0
 800c252:	4620      	mov	r0, r4
 800c254:	4629      	mov	r1, r5
 800c256:	f7f4 fc4f 	bl	8000af8 <__aeabi_dcmpeq>
 800c25a:	b108      	cbz	r0, 800c260 <__cvt+0xa4>
 800c25c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c260:	2230      	movs	r2, #48	; 0x30
 800c262:	9b03      	ldr	r3, [sp, #12]
 800c264:	454b      	cmp	r3, r9
 800c266:	d307      	bcc.n	800c278 <__cvt+0xbc>
 800c268:	9b03      	ldr	r3, [sp, #12]
 800c26a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c26c:	1bdb      	subs	r3, r3, r7
 800c26e:	4638      	mov	r0, r7
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	b004      	add	sp, #16
 800c274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c278:	1c59      	adds	r1, r3, #1
 800c27a:	9103      	str	r1, [sp, #12]
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e7f0      	b.n	800c262 <__cvt+0xa6>

0800c280 <__exponent>:
 800c280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c282:	4603      	mov	r3, r0
 800c284:	2900      	cmp	r1, #0
 800c286:	bfb8      	it	lt
 800c288:	4249      	neglt	r1, r1
 800c28a:	f803 2b02 	strb.w	r2, [r3], #2
 800c28e:	bfb4      	ite	lt
 800c290:	222d      	movlt	r2, #45	; 0x2d
 800c292:	222b      	movge	r2, #43	; 0x2b
 800c294:	2909      	cmp	r1, #9
 800c296:	7042      	strb	r2, [r0, #1]
 800c298:	dd2a      	ble.n	800c2f0 <__exponent+0x70>
 800c29a:	f10d 0407 	add.w	r4, sp, #7
 800c29e:	46a4      	mov	ip, r4
 800c2a0:	270a      	movs	r7, #10
 800c2a2:	46a6      	mov	lr, r4
 800c2a4:	460a      	mov	r2, r1
 800c2a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c2aa:	fb07 1516 	mls	r5, r7, r6, r1
 800c2ae:	3530      	adds	r5, #48	; 0x30
 800c2b0:	2a63      	cmp	r2, #99	; 0x63
 800c2b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	dcf1      	bgt.n	800c2a2 <__exponent+0x22>
 800c2be:	3130      	adds	r1, #48	; 0x30
 800c2c0:	f1ae 0502 	sub.w	r5, lr, #2
 800c2c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2c8:	1c44      	adds	r4, r0, #1
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	4561      	cmp	r1, ip
 800c2ce:	d30a      	bcc.n	800c2e6 <__exponent+0x66>
 800c2d0:	f10d 0209 	add.w	r2, sp, #9
 800c2d4:	eba2 020e 	sub.w	r2, r2, lr
 800c2d8:	4565      	cmp	r5, ip
 800c2da:	bf88      	it	hi
 800c2dc:	2200      	movhi	r2, #0
 800c2de:	4413      	add	r3, r2
 800c2e0:	1a18      	subs	r0, r3, r0
 800c2e2:	b003      	add	sp, #12
 800c2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c2ee:	e7ed      	b.n	800c2cc <__exponent+0x4c>
 800c2f0:	2330      	movs	r3, #48	; 0x30
 800c2f2:	3130      	adds	r1, #48	; 0x30
 800c2f4:	7083      	strb	r3, [r0, #2]
 800c2f6:	70c1      	strb	r1, [r0, #3]
 800c2f8:	1d03      	adds	r3, r0, #4
 800c2fa:	e7f1      	b.n	800c2e0 <__exponent+0x60>

0800c2fc <_printf_float>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	ed2d 8b02 	vpush	{d8}
 800c304:	b08d      	sub	sp, #52	; 0x34
 800c306:	460c      	mov	r4, r1
 800c308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c30c:	4616      	mov	r6, r2
 800c30e:	461f      	mov	r7, r3
 800c310:	4605      	mov	r5, r0
 800c312:	f001 fa57 	bl	800d7c4 <_localeconv_r>
 800c316:	f8d0 a000 	ldr.w	sl, [r0]
 800c31a:	4650      	mov	r0, sl
 800c31c:	f7f3 ff70 	bl	8000200 <strlen>
 800c320:	2300      	movs	r3, #0
 800c322:	930a      	str	r3, [sp, #40]	; 0x28
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	9305      	str	r3, [sp, #20]
 800c328:	f8d8 3000 	ldr.w	r3, [r8]
 800c32c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c330:	3307      	adds	r3, #7
 800c332:	f023 0307 	bic.w	r3, r3, #7
 800c336:	f103 0208 	add.w	r2, r3, #8
 800c33a:	f8c8 2000 	str.w	r2, [r8]
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c346:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c34a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	f8cd 8018 	str.w	r8, [sp, #24]
 800c354:	ee08 0a10 	vmov	s16, r0
 800c358:	4b9f      	ldr	r3, [pc, #636]	; (800c5d8 <_printf_float+0x2dc>)
 800c35a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c35e:	f04f 32ff 	mov.w	r2, #4294967295
 800c362:	f7f4 fbfb 	bl	8000b5c <__aeabi_dcmpun>
 800c366:	bb88      	cbnz	r0, 800c3cc <_printf_float+0xd0>
 800c368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c36c:	4b9a      	ldr	r3, [pc, #616]	; (800c5d8 <_printf_float+0x2dc>)
 800c36e:	f04f 32ff 	mov.w	r2, #4294967295
 800c372:	f7f4 fbd5 	bl	8000b20 <__aeabi_dcmple>
 800c376:	bb48      	cbnz	r0, 800c3cc <_printf_float+0xd0>
 800c378:	2200      	movs	r2, #0
 800c37a:	2300      	movs	r3, #0
 800c37c:	4640      	mov	r0, r8
 800c37e:	4649      	mov	r1, r9
 800c380:	f7f4 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 800c384:	b110      	cbz	r0, 800c38c <_printf_float+0x90>
 800c386:	232d      	movs	r3, #45	; 0x2d
 800c388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c38c:	4b93      	ldr	r3, [pc, #588]	; (800c5dc <_printf_float+0x2e0>)
 800c38e:	4894      	ldr	r0, [pc, #592]	; (800c5e0 <_printf_float+0x2e4>)
 800c390:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c394:	bf94      	ite	ls
 800c396:	4698      	movls	r8, r3
 800c398:	4680      	movhi	r8, r0
 800c39a:	2303      	movs	r3, #3
 800c39c:	6123      	str	r3, [r4, #16]
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	f023 0204 	bic.w	r2, r3, #4
 800c3a4:	6022      	str	r2, [r4, #0]
 800c3a6:	f04f 0900 	mov.w	r9, #0
 800c3aa:	9700      	str	r7, [sp, #0]
 800c3ac:	4633      	mov	r3, r6
 800c3ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f000 f9d8 	bl	800c768 <_printf_common>
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	f040 8090 	bne.w	800c4de <_printf_float+0x1e2>
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c2:	b00d      	add	sp, #52	; 0x34
 800c3c4:	ecbd 8b02 	vpop	{d8}
 800c3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	f7f4 fbc2 	bl	8000b5c <__aeabi_dcmpun>
 800c3d8:	b140      	cbz	r0, 800c3ec <_printf_float+0xf0>
 800c3da:	464b      	mov	r3, r9
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bfbc      	itt	lt
 800c3e0:	232d      	movlt	r3, #45	; 0x2d
 800c3e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3e6:	487f      	ldr	r0, [pc, #508]	; (800c5e4 <_printf_float+0x2e8>)
 800c3e8:	4b7f      	ldr	r3, [pc, #508]	; (800c5e8 <_printf_float+0x2ec>)
 800c3ea:	e7d1      	b.n	800c390 <_printf_float+0x94>
 800c3ec:	6863      	ldr	r3, [r4, #4]
 800c3ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c3f2:	9206      	str	r2, [sp, #24]
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	d13f      	bne.n	800c478 <_printf_float+0x17c>
 800c3f8:	2306      	movs	r3, #6
 800c3fa:	6063      	str	r3, [r4, #4]
 800c3fc:	9b05      	ldr	r3, [sp, #20]
 800c3fe:	6861      	ldr	r1, [r4, #4]
 800c400:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c404:	2300      	movs	r3, #0
 800c406:	9303      	str	r3, [sp, #12]
 800c408:	ab0a      	add	r3, sp, #40	; 0x28
 800c40a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c40e:	ab09      	add	r3, sp, #36	; 0x24
 800c410:	ec49 8b10 	vmov	d0, r8, r9
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	6022      	str	r2, [r4, #0]
 800c418:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c41c:	4628      	mov	r0, r5
 800c41e:	f7ff fecd 	bl	800c1bc <__cvt>
 800c422:	9b06      	ldr	r3, [sp, #24]
 800c424:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c426:	2b47      	cmp	r3, #71	; 0x47
 800c428:	4680      	mov	r8, r0
 800c42a:	d108      	bne.n	800c43e <_printf_float+0x142>
 800c42c:	1cc8      	adds	r0, r1, #3
 800c42e:	db02      	blt.n	800c436 <_printf_float+0x13a>
 800c430:	6863      	ldr	r3, [r4, #4]
 800c432:	4299      	cmp	r1, r3
 800c434:	dd41      	ble.n	800c4ba <_printf_float+0x1be>
 800c436:	f1ab 0b02 	sub.w	fp, fp, #2
 800c43a:	fa5f fb8b 	uxtb.w	fp, fp
 800c43e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c442:	d820      	bhi.n	800c486 <_printf_float+0x18a>
 800c444:	3901      	subs	r1, #1
 800c446:	465a      	mov	r2, fp
 800c448:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c44c:	9109      	str	r1, [sp, #36]	; 0x24
 800c44e:	f7ff ff17 	bl	800c280 <__exponent>
 800c452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c454:	1813      	adds	r3, r2, r0
 800c456:	2a01      	cmp	r2, #1
 800c458:	4681      	mov	r9, r0
 800c45a:	6123      	str	r3, [r4, #16]
 800c45c:	dc02      	bgt.n	800c464 <_printf_float+0x168>
 800c45e:	6822      	ldr	r2, [r4, #0]
 800c460:	07d2      	lsls	r2, r2, #31
 800c462:	d501      	bpl.n	800c468 <_printf_float+0x16c>
 800c464:	3301      	adds	r3, #1
 800c466:	6123      	str	r3, [r4, #16]
 800c468:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d09c      	beq.n	800c3aa <_printf_float+0xae>
 800c470:	232d      	movs	r3, #45	; 0x2d
 800c472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c476:	e798      	b.n	800c3aa <_printf_float+0xae>
 800c478:	9a06      	ldr	r2, [sp, #24]
 800c47a:	2a47      	cmp	r2, #71	; 0x47
 800c47c:	d1be      	bne.n	800c3fc <_printf_float+0x100>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1bc      	bne.n	800c3fc <_printf_float+0x100>
 800c482:	2301      	movs	r3, #1
 800c484:	e7b9      	b.n	800c3fa <_printf_float+0xfe>
 800c486:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c48a:	d118      	bne.n	800c4be <_printf_float+0x1c2>
 800c48c:	2900      	cmp	r1, #0
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	dd0b      	ble.n	800c4aa <_printf_float+0x1ae>
 800c492:	6121      	str	r1, [r4, #16]
 800c494:	b913      	cbnz	r3, 800c49c <_printf_float+0x1a0>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	07d0      	lsls	r0, r2, #31
 800c49a:	d502      	bpl.n	800c4a2 <_printf_float+0x1a6>
 800c49c:	3301      	adds	r3, #1
 800c49e:	440b      	add	r3, r1
 800c4a0:	6123      	str	r3, [r4, #16]
 800c4a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4a4:	f04f 0900 	mov.w	r9, #0
 800c4a8:	e7de      	b.n	800c468 <_printf_float+0x16c>
 800c4aa:	b913      	cbnz	r3, 800c4b2 <_printf_float+0x1b6>
 800c4ac:	6822      	ldr	r2, [r4, #0]
 800c4ae:	07d2      	lsls	r2, r2, #31
 800c4b0:	d501      	bpl.n	800c4b6 <_printf_float+0x1ba>
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	e7f4      	b.n	800c4a0 <_printf_float+0x1a4>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7f2      	b.n	800c4a0 <_printf_float+0x1a4>
 800c4ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c0:	4299      	cmp	r1, r3
 800c4c2:	db05      	blt.n	800c4d0 <_printf_float+0x1d4>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	6121      	str	r1, [r4, #16]
 800c4c8:	07d8      	lsls	r0, r3, #31
 800c4ca:	d5ea      	bpl.n	800c4a2 <_printf_float+0x1a6>
 800c4cc:	1c4b      	adds	r3, r1, #1
 800c4ce:	e7e7      	b.n	800c4a0 <_printf_float+0x1a4>
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	bfd4      	ite	le
 800c4d4:	f1c1 0202 	rsble	r2, r1, #2
 800c4d8:	2201      	movgt	r2, #1
 800c4da:	4413      	add	r3, r2
 800c4dc:	e7e0      	b.n	800c4a0 <_printf_float+0x1a4>
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	055a      	lsls	r2, r3, #21
 800c4e2:	d407      	bmi.n	800c4f4 <_printf_float+0x1f8>
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	4642      	mov	r2, r8
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b8      	blx	r7
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	d12c      	bne.n	800c54c <_printf_float+0x250>
 800c4f2:	e764      	b.n	800c3be <_printf_float+0xc2>
 800c4f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4f8:	f240 80e0 	bls.w	800c6bc <_printf_float+0x3c0>
 800c4fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c500:	2200      	movs	r2, #0
 800c502:	2300      	movs	r3, #0
 800c504:	f7f4 faf8 	bl	8000af8 <__aeabi_dcmpeq>
 800c508:	2800      	cmp	r0, #0
 800c50a:	d034      	beq.n	800c576 <_printf_float+0x27a>
 800c50c:	4a37      	ldr	r2, [pc, #220]	; (800c5ec <_printf_float+0x2f0>)
 800c50e:	2301      	movs	r3, #1
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f af51 	beq.w	800c3be <_printf_float+0xc2>
 800c51c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c520:	429a      	cmp	r2, r3
 800c522:	db02      	blt.n	800c52a <_printf_float+0x22e>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	07d8      	lsls	r0, r3, #31
 800c528:	d510      	bpl.n	800c54c <_printf_float+0x250>
 800c52a:	ee18 3a10 	vmov	r3, s16
 800c52e:	4652      	mov	r2, sl
 800c530:	4631      	mov	r1, r6
 800c532:	4628      	mov	r0, r5
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f af41 	beq.w	800c3be <_printf_float+0xc2>
 800c53c:	f04f 0800 	mov.w	r8, #0
 800c540:	f104 091a 	add.w	r9, r4, #26
 800c544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c546:	3b01      	subs	r3, #1
 800c548:	4543      	cmp	r3, r8
 800c54a:	dc09      	bgt.n	800c560 <_printf_float+0x264>
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	079b      	lsls	r3, r3, #30
 800c550:	f100 8105 	bmi.w	800c75e <_printf_float+0x462>
 800c554:	68e0      	ldr	r0, [r4, #12]
 800c556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c558:	4298      	cmp	r0, r3
 800c55a:	bfb8      	it	lt
 800c55c:	4618      	movlt	r0, r3
 800c55e:	e730      	b.n	800c3c2 <_printf_float+0xc6>
 800c560:	2301      	movs	r3, #1
 800c562:	464a      	mov	r2, r9
 800c564:	4631      	mov	r1, r6
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	f43f af27 	beq.w	800c3be <_printf_float+0xc2>
 800c570:	f108 0801 	add.w	r8, r8, #1
 800c574:	e7e6      	b.n	800c544 <_printf_float+0x248>
 800c576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dc39      	bgt.n	800c5f0 <_printf_float+0x2f4>
 800c57c:	4a1b      	ldr	r2, [pc, #108]	; (800c5ec <_printf_float+0x2f0>)
 800c57e:	2301      	movs	r3, #1
 800c580:	4631      	mov	r1, r6
 800c582:	4628      	mov	r0, r5
 800c584:	47b8      	blx	r7
 800c586:	3001      	adds	r0, #1
 800c588:	f43f af19 	beq.w	800c3be <_printf_float+0xc2>
 800c58c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c590:	4313      	orrs	r3, r2
 800c592:	d102      	bne.n	800c59a <_printf_float+0x29e>
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	07d9      	lsls	r1, r3, #31
 800c598:	d5d8      	bpl.n	800c54c <_printf_float+0x250>
 800c59a:	ee18 3a10 	vmov	r3, s16
 800c59e:	4652      	mov	r2, sl
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b8      	blx	r7
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f43f af09 	beq.w	800c3be <_printf_float+0xc2>
 800c5ac:	f04f 0900 	mov.w	r9, #0
 800c5b0:	f104 0a1a 	add.w	sl, r4, #26
 800c5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b6:	425b      	negs	r3, r3
 800c5b8:	454b      	cmp	r3, r9
 800c5ba:	dc01      	bgt.n	800c5c0 <_printf_float+0x2c4>
 800c5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5be:	e792      	b.n	800c4e6 <_printf_float+0x1ea>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f aef7 	beq.w	800c3be <_printf_float+0xc2>
 800c5d0:	f109 0901 	add.w	r9, r9, #1
 800c5d4:	e7ee      	b.n	800c5b4 <_printf_float+0x2b8>
 800c5d6:	bf00      	nop
 800c5d8:	7fefffff 	.word	0x7fefffff
 800c5dc:	080109a0 	.word	0x080109a0
 800c5e0:	080109a4 	.word	0x080109a4
 800c5e4:	080109ac 	.word	0x080109ac
 800c5e8:	080109a8 	.word	0x080109a8
 800c5ec:	080109b0 	.word	0x080109b0
 800c5f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	bfa8      	it	ge
 800c5f8:	461a      	movge	r2, r3
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	4691      	mov	r9, r2
 800c5fe:	dc37      	bgt.n	800c670 <_printf_float+0x374>
 800c600:	f04f 0b00 	mov.w	fp, #0
 800c604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c608:	f104 021a 	add.w	r2, r4, #26
 800c60c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c60e:	9305      	str	r3, [sp, #20]
 800c610:	eba3 0309 	sub.w	r3, r3, r9
 800c614:	455b      	cmp	r3, fp
 800c616:	dc33      	bgt.n	800c680 <_printf_float+0x384>
 800c618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c61c:	429a      	cmp	r2, r3
 800c61e:	db3b      	blt.n	800c698 <_printf_float+0x39c>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	07da      	lsls	r2, r3, #31
 800c624:	d438      	bmi.n	800c698 <_printf_float+0x39c>
 800c626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c628:	9a05      	ldr	r2, [sp, #20]
 800c62a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c62c:	1a9a      	subs	r2, r3, r2
 800c62e:	eba3 0901 	sub.w	r9, r3, r1
 800c632:	4591      	cmp	r9, r2
 800c634:	bfa8      	it	ge
 800c636:	4691      	movge	r9, r2
 800c638:	f1b9 0f00 	cmp.w	r9, #0
 800c63c:	dc35      	bgt.n	800c6aa <_printf_float+0x3ae>
 800c63e:	f04f 0800 	mov.w	r8, #0
 800c642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c646:	f104 0a1a 	add.w	sl, r4, #26
 800c64a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c64e:	1a9b      	subs	r3, r3, r2
 800c650:	eba3 0309 	sub.w	r3, r3, r9
 800c654:	4543      	cmp	r3, r8
 800c656:	f77f af79 	ble.w	800c54c <_printf_float+0x250>
 800c65a:	2301      	movs	r3, #1
 800c65c:	4652      	mov	r2, sl
 800c65e:	4631      	mov	r1, r6
 800c660:	4628      	mov	r0, r5
 800c662:	47b8      	blx	r7
 800c664:	3001      	adds	r0, #1
 800c666:	f43f aeaa 	beq.w	800c3be <_printf_float+0xc2>
 800c66a:	f108 0801 	add.w	r8, r8, #1
 800c66e:	e7ec      	b.n	800c64a <_printf_float+0x34e>
 800c670:	4613      	mov	r3, r2
 800c672:	4631      	mov	r1, r6
 800c674:	4642      	mov	r2, r8
 800c676:	4628      	mov	r0, r5
 800c678:	47b8      	blx	r7
 800c67a:	3001      	adds	r0, #1
 800c67c:	d1c0      	bne.n	800c600 <_printf_float+0x304>
 800c67e:	e69e      	b.n	800c3be <_printf_float+0xc2>
 800c680:	2301      	movs	r3, #1
 800c682:	4631      	mov	r1, r6
 800c684:	4628      	mov	r0, r5
 800c686:	9205      	str	r2, [sp, #20]
 800c688:	47b8      	blx	r7
 800c68a:	3001      	adds	r0, #1
 800c68c:	f43f ae97 	beq.w	800c3be <_printf_float+0xc2>
 800c690:	9a05      	ldr	r2, [sp, #20]
 800c692:	f10b 0b01 	add.w	fp, fp, #1
 800c696:	e7b9      	b.n	800c60c <_printf_float+0x310>
 800c698:	ee18 3a10 	vmov	r3, s16
 800c69c:	4652      	mov	r2, sl
 800c69e:	4631      	mov	r1, r6
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	47b8      	blx	r7
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d1be      	bne.n	800c626 <_printf_float+0x32a>
 800c6a8:	e689      	b.n	800c3be <_printf_float+0xc2>
 800c6aa:	9a05      	ldr	r2, [sp, #20]
 800c6ac:	464b      	mov	r3, r9
 800c6ae:	4442      	add	r2, r8
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	47b8      	blx	r7
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	d1c1      	bne.n	800c63e <_printf_float+0x342>
 800c6ba:	e680      	b.n	800c3be <_printf_float+0xc2>
 800c6bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6be:	2a01      	cmp	r2, #1
 800c6c0:	dc01      	bgt.n	800c6c6 <_printf_float+0x3ca>
 800c6c2:	07db      	lsls	r3, r3, #31
 800c6c4:	d538      	bpl.n	800c738 <_printf_float+0x43c>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	4642      	mov	r2, r8
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b8      	blx	r7
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	f43f ae74 	beq.w	800c3be <_printf_float+0xc2>
 800c6d6:	ee18 3a10 	vmov	r3, s16
 800c6da:	4652      	mov	r2, sl
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b8      	blx	r7
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f43f ae6b 	beq.w	800c3be <_printf_float+0xc2>
 800c6e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f7f4 fa02 	bl	8000af8 <__aeabi_dcmpeq>
 800c6f4:	b9d8      	cbnz	r0, 800c72e <_printf_float+0x432>
 800c6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f8:	f108 0201 	add.w	r2, r8, #1
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	d10e      	bne.n	800c726 <_printf_float+0x42a>
 800c708:	e659      	b.n	800c3be <_printf_float+0xc2>
 800c70a:	2301      	movs	r3, #1
 800c70c:	4652      	mov	r2, sl
 800c70e:	4631      	mov	r1, r6
 800c710:	4628      	mov	r0, r5
 800c712:	47b8      	blx	r7
 800c714:	3001      	adds	r0, #1
 800c716:	f43f ae52 	beq.w	800c3be <_printf_float+0xc2>
 800c71a:	f108 0801 	add.w	r8, r8, #1
 800c71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c720:	3b01      	subs	r3, #1
 800c722:	4543      	cmp	r3, r8
 800c724:	dcf1      	bgt.n	800c70a <_printf_float+0x40e>
 800c726:	464b      	mov	r3, r9
 800c728:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c72c:	e6dc      	b.n	800c4e8 <_printf_float+0x1ec>
 800c72e:	f04f 0800 	mov.w	r8, #0
 800c732:	f104 0a1a 	add.w	sl, r4, #26
 800c736:	e7f2      	b.n	800c71e <_printf_float+0x422>
 800c738:	2301      	movs	r3, #1
 800c73a:	4642      	mov	r2, r8
 800c73c:	e7df      	b.n	800c6fe <_printf_float+0x402>
 800c73e:	2301      	movs	r3, #1
 800c740:	464a      	mov	r2, r9
 800c742:	4631      	mov	r1, r6
 800c744:	4628      	mov	r0, r5
 800c746:	47b8      	blx	r7
 800c748:	3001      	adds	r0, #1
 800c74a:	f43f ae38 	beq.w	800c3be <_printf_float+0xc2>
 800c74e:	f108 0801 	add.w	r8, r8, #1
 800c752:	68e3      	ldr	r3, [r4, #12]
 800c754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c756:	1a5b      	subs	r3, r3, r1
 800c758:	4543      	cmp	r3, r8
 800c75a:	dcf0      	bgt.n	800c73e <_printf_float+0x442>
 800c75c:	e6fa      	b.n	800c554 <_printf_float+0x258>
 800c75e:	f04f 0800 	mov.w	r8, #0
 800c762:	f104 0919 	add.w	r9, r4, #25
 800c766:	e7f4      	b.n	800c752 <_printf_float+0x456>

0800c768 <_printf_common>:
 800c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c76c:	4616      	mov	r6, r2
 800c76e:	4699      	mov	r9, r3
 800c770:	688a      	ldr	r2, [r1, #8]
 800c772:	690b      	ldr	r3, [r1, #16]
 800c774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c778:	4293      	cmp	r3, r2
 800c77a:	bfb8      	it	lt
 800c77c:	4613      	movlt	r3, r2
 800c77e:	6033      	str	r3, [r6, #0]
 800c780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c784:	4607      	mov	r7, r0
 800c786:	460c      	mov	r4, r1
 800c788:	b10a      	cbz	r2, 800c78e <_printf_common+0x26>
 800c78a:	3301      	adds	r3, #1
 800c78c:	6033      	str	r3, [r6, #0]
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	0699      	lsls	r1, r3, #26
 800c792:	bf42      	ittt	mi
 800c794:	6833      	ldrmi	r3, [r6, #0]
 800c796:	3302      	addmi	r3, #2
 800c798:	6033      	strmi	r3, [r6, #0]
 800c79a:	6825      	ldr	r5, [r4, #0]
 800c79c:	f015 0506 	ands.w	r5, r5, #6
 800c7a0:	d106      	bne.n	800c7b0 <_printf_common+0x48>
 800c7a2:	f104 0a19 	add.w	sl, r4, #25
 800c7a6:	68e3      	ldr	r3, [r4, #12]
 800c7a8:	6832      	ldr	r2, [r6, #0]
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	42ab      	cmp	r3, r5
 800c7ae:	dc26      	bgt.n	800c7fe <_printf_common+0x96>
 800c7b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7b4:	1e13      	subs	r3, r2, #0
 800c7b6:	6822      	ldr	r2, [r4, #0]
 800c7b8:	bf18      	it	ne
 800c7ba:	2301      	movne	r3, #1
 800c7bc:	0692      	lsls	r2, r2, #26
 800c7be:	d42b      	bmi.n	800c818 <_printf_common+0xb0>
 800c7c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	47c0      	blx	r8
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	d01e      	beq.n	800c80c <_printf_common+0xa4>
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	68e5      	ldr	r5, [r4, #12]
 800c7d2:	6832      	ldr	r2, [r6, #0]
 800c7d4:	f003 0306 	and.w	r3, r3, #6
 800c7d8:	2b04      	cmp	r3, #4
 800c7da:	bf08      	it	eq
 800c7dc:	1aad      	subeq	r5, r5, r2
 800c7de:	68a3      	ldr	r3, [r4, #8]
 800c7e0:	6922      	ldr	r2, [r4, #16]
 800c7e2:	bf0c      	ite	eq
 800c7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7e8:	2500      	movne	r5, #0
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	bfc4      	itt	gt
 800c7ee:	1a9b      	subgt	r3, r3, r2
 800c7f0:	18ed      	addgt	r5, r5, r3
 800c7f2:	2600      	movs	r6, #0
 800c7f4:	341a      	adds	r4, #26
 800c7f6:	42b5      	cmp	r5, r6
 800c7f8:	d11a      	bne.n	800c830 <_printf_common+0xc8>
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	e008      	b.n	800c810 <_printf_common+0xa8>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4652      	mov	r2, sl
 800c802:	4649      	mov	r1, r9
 800c804:	4638      	mov	r0, r7
 800c806:	47c0      	blx	r8
 800c808:	3001      	adds	r0, #1
 800c80a:	d103      	bne.n	800c814 <_printf_common+0xac>
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295
 800c810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c814:	3501      	adds	r5, #1
 800c816:	e7c6      	b.n	800c7a6 <_printf_common+0x3e>
 800c818:	18e1      	adds	r1, r4, r3
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	2030      	movs	r0, #48	; 0x30
 800c81e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c822:	4422      	add	r2, r4
 800c824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c82c:	3302      	adds	r3, #2
 800c82e:	e7c7      	b.n	800c7c0 <_printf_common+0x58>
 800c830:	2301      	movs	r3, #1
 800c832:	4622      	mov	r2, r4
 800c834:	4649      	mov	r1, r9
 800c836:	4638      	mov	r0, r7
 800c838:	47c0      	blx	r8
 800c83a:	3001      	adds	r0, #1
 800c83c:	d0e6      	beq.n	800c80c <_printf_common+0xa4>
 800c83e:	3601      	adds	r6, #1
 800c840:	e7d9      	b.n	800c7f6 <_printf_common+0x8e>
	...

0800c844 <_printf_i>:
 800c844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c848:	7e0f      	ldrb	r7, [r1, #24]
 800c84a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c84c:	2f78      	cmp	r7, #120	; 0x78
 800c84e:	4691      	mov	r9, r2
 800c850:	4680      	mov	r8, r0
 800c852:	460c      	mov	r4, r1
 800c854:	469a      	mov	sl, r3
 800c856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c85a:	d807      	bhi.n	800c86c <_printf_i+0x28>
 800c85c:	2f62      	cmp	r7, #98	; 0x62
 800c85e:	d80a      	bhi.n	800c876 <_printf_i+0x32>
 800c860:	2f00      	cmp	r7, #0
 800c862:	f000 80d8 	beq.w	800ca16 <_printf_i+0x1d2>
 800c866:	2f58      	cmp	r7, #88	; 0x58
 800c868:	f000 80a3 	beq.w	800c9b2 <_printf_i+0x16e>
 800c86c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c874:	e03a      	b.n	800c8ec <_printf_i+0xa8>
 800c876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c87a:	2b15      	cmp	r3, #21
 800c87c:	d8f6      	bhi.n	800c86c <_printf_i+0x28>
 800c87e:	a101      	add	r1, pc, #4	; (adr r1, 800c884 <_printf_i+0x40>)
 800c880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c884:	0800c8dd 	.word	0x0800c8dd
 800c888:	0800c8f1 	.word	0x0800c8f1
 800c88c:	0800c86d 	.word	0x0800c86d
 800c890:	0800c86d 	.word	0x0800c86d
 800c894:	0800c86d 	.word	0x0800c86d
 800c898:	0800c86d 	.word	0x0800c86d
 800c89c:	0800c8f1 	.word	0x0800c8f1
 800c8a0:	0800c86d 	.word	0x0800c86d
 800c8a4:	0800c86d 	.word	0x0800c86d
 800c8a8:	0800c86d 	.word	0x0800c86d
 800c8ac:	0800c86d 	.word	0x0800c86d
 800c8b0:	0800c9fd 	.word	0x0800c9fd
 800c8b4:	0800c921 	.word	0x0800c921
 800c8b8:	0800c9df 	.word	0x0800c9df
 800c8bc:	0800c86d 	.word	0x0800c86d
 800c8c0:	0800c86d 	.word	0x0800c86d
 800c8c4:	0800ca1f 	.word	0x0800ca1f
 800c8c8:	0800c86d 	.word	0x0800c86d
 800c8cc:	0800c921 	.word	0x0800c921
 800c8d0:	0800c86d 	.word	0x0800c86d
 800c8d4:	0800c86d 	.word	0x0800c86d
 800c8d8:	0800c9e7 	.word	0x0800c9e7
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	1d1a      	adds	r2, r3, #4
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	602a      	str	r2, [r5, #0]
 800c8e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e0a3      	b.n	800ca38 <_printf_i+0x1f4>
 800c8f0:	6820      	ldr	r0, [r4, #0]
 800c8f2:	6829      	ldr	r1, [r5, #0]
 800c8f4:	0606      	lsls	r6, r0, #24
 800c8f6:	f101 0304 	add.w	r3, r1, #4
 800c8fa:	d50a      	bpl.n	800c912 <_printf_i+0xce>
 800c8fc:	680e      	ldr	r6, [r1, #0]
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	2e00      	cmp	r6, #0
 800c902:	da03      	bge.n	800c90c <_printf_i+0xc8>
 800c904:	232d      	movs	r3, #45	; 0x2d
 800c906:	4276      	negs	r6, r6
 800c908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c90c:	485e      	ldr	r0, [pc, #376]	; (800ca88 <_printf_i+0x244>)
 800c90e:	230a      	movs	r3, #10
 800c910:	e019      	b.n	800c946 <_printf_i+0x102>
 800c912:	680e      	ldr	r6, [r1, #0]
 800c914:	602b      	str	r3, [r5, #0]
 800c916:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c91a:	bf18      	it	ne
 800c91c:	b236      	sxthne	r6, r6
 800c91e:	e7ef      	b.n	800c900 <_printf_i+0xbc>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	6820      	ldr	r0, [r4, #0]
 800c924:	1d19      	adds	r1, r3, #4
 800c926:	6029      	str	r1, [r5, #0]
 800c928:	0601      	lsls	r1, r0, #24
 800c92a:	d501      	bpl.n	800c930 <_printf_i+0xec>
 800c92c:	681e      	ldr	r6, [r3, #0]
 800c92e:	e002      	b.n	800c936 <_printf_i+0xf2>
 800c930:	0646      	lsls	r6, r0, #25
 800c932:	d5fb      	bpl.n	800c92c <_printf_i+0xe8>
 800c934:	881e      	ldrh	r6, [r3, #0]
 800c936:	4854      	ldr	r0, [pc, #336]	; (800ca88 <_printf_i+0x244>)
 800c938:	2f6f      	cmp	r7, #111	; 0x6f
 800c93a:	bf0c      	ite	eq
 800c93c:	2308      	moveq	r3, #8
 800c93e:	230a      	movne	r3, #10
 800c940:	2100      	movs	r1, #0
 800c942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c946:	6865      	ldr	r5, [r4, #4]
 800c948:	60a5      	str	r5, [r4, #8]
 800c94a:	2d00      	cmp	r5, #0
 800c94c:	bfa2      	ittt	ge
 800c94e:	6821      	ldrge	r1, [r4, #0]
 800c950:	f021 0104 	bicge.w	r1, r1, #4
 800c954:	6021      	strge	r1, [r4, #0]
 800c956:	b90e      	cbnz	r6, 800c95c <_printf_i+0x118>
 800c958:	2d00      	cmp	r5, #0
 800c95a:	d04d      	beq.n	800c9f8 <_printf_i+0x1b4>
 800c95c:	4615      	mov	r5, r2
 800c95e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c962:	fb03 6711 	mls	r7, r3, r1, r6
 800c966:	5dc7      	ldrb	r7, [r0, r7]
 800c968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c96c:	4637      	mov	r7, r6
 800c96e:	42bb      	cmp	r3, r7
 800c970:	460e      	mov	r6, r1
 800c972:	d9f4      	bls.n	800c95e <_printf_i+0x11a>
 800c974:	2b08      	cmp	r3, #8
 800c976:	d10b      	bne.n	800c990 <_printf_i+0x14c>
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	07de      	lsls	r6, r3, #31
 800c97c:	d508      	bpl.n	800c990 <_printf_i+0x14c>
 800c97e:	6923      	ldr	r3, [r4, #16]
 800c980:	6861      	ldr	r1, [r4, #4]
 800c982:	4299      	cmp	r1, r3
 800c984:	bfde      	ittt	le
 800c986:	2330      	movle	r3, #48	; 0x30
 800c988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c98c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c990:	1b52      	subs	r2, r2, r5
 800c992:	6122      	str	r2, [r4, #16]
 800c994:	f8cd a000 	str.w	sl, [sp]
 800c998:	464b      	mov	r3, r9
 800c99a:	aa03      	add	r2, sp, #12
 800c99c:	4621      	mov	r1, r4
 800c99e:	4640      	mov	r0, r8
 800c9a0:	f7ff fee2 	bl	800c768 <_printf_common>
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	d14c      	bne.n	800ca42 <_printf_i+0x1fe>
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	b004      	add	sp, #16
 800c9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b2:	4835      	ldr	r0, [pc, #212]	; (800ca88 <_printf_i+0x244>)
 800c9b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9b8:	6829      	ldr	r1, [r5, #0]
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9c0:	6029      	str	r1, [r5, #0]
 800c9c2:	061d      	lsls	r5, r3, #24
 800c9c4:	d514      	bpl.n	800c9f0 <_printf_i+0x1ac>
 800c9c6:	07df      	lsls	r7, r3, #31
 800c9c8:	bf44      	itt	mi
 800c9ca:	f043 0320 	orrmi.w	r3, r3, #32
 800c9ce:	6023      	strmi	r3, [r4, #0]
 800c9d0:	b91e      	cbnz	r6, 800c9da <_printf_i+0x196>
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	f023 0320 	bic.w	r3, r3, #32
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	2310      	movs	r3, #16
 800c9dc:	e7b0      	b.n	800c940 <_printf_i+0xfc>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	f043 0320 	orr.w	r3, r3, #32
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	2378      	movs	r3, #120	; 0x78
 800c9e8:	4828      	ldr	r0, [pc, #160]	; (800ca8c <_printf_i+0x248>)
 800c9ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9ee:	e7e3      	b.n	800c9b8 <_printf_i+0x174>
 800c9f0:	0659      	lsls	r1, r3, #25
 800c9f2:	bf48      	it	mi
 800c9f4:	b2b6      	uxthmi	r6, r6
 800c9f6:	e7e6      	b.n	800c9c6 <_printf_i+0x182>
 800c9f8:	4615      	mov	r5, r2
 800c9fa:	e7bb      	b.n	800c974 <_printf_i+0x130>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	6826      	ldr	r6, [r4, #0]
 800ca00:	6961      	ldr	r1, [r4, #20]
 800ca02:	1d18      	adds	r0, r3, #4
 800ca04:	6028      	str	r0, [r5, #0]
 800ca06:	0635      	lsls	r5, r6, #24
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	d501      	bpl.n	800ca10 <_printf_i+0x1cc>
 800ca0c:	6019      	str	r1, [r3, #0]
 800ca0e:	e002      	b.n	800ca16 <_printf_i+0x1d2>
 800ca10:	0670      	lsls	r0, r6, #25
 800ca12:	d5fb      	bpl.n	800ca0c <_printf_i+0x1c8>
 800ca14:	8019      	strh	r1, [r3, #0]
 800ca16:	2300      	movs	r3, #0
 800ca18:	6123      	str	r3, [r4, #16]
 800ca1a:	4615      	mov	r5, r2
 800ca1c:	e7ba      	b.n	800c994 <_printf_i+0x150>
 800ca1e:	682b      	ldr	r3, [r5, #0]
 800ca20:	1d1a      	adds	r2, r3, #4
 800ca22:	602a      	str	r2, [r5, #0]
 800ca24:	681d      	ldr	r5, [r3, #0]
 800ca26:	6862      	ldr	r2, [r4, #4]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f7f3 fbf0 	bl	8000210 <memchr>
 800ca30:	b108      	cbz	r0, 800ca36 <_printf_i+0x1f2>
 800ca32:	1b40      	subs	r0, r0, r5
 800ca34:	6060      	str	r0, [r4, #4]
 800ca36:	6863      	ldr	r3, [r4, #4]
 800ca38:	6123      	str	r3, [r4, #16]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca40:	e7a8      	b.n	800c994 <_printf_i+0x150>
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	462a      	mov	r2, r5
 800ca46:	4649      	mov	r1, r9
 800ca48:	4640      	mov	r0, r8
 800ca4a:	47d0      	blx	sl
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d0ab      	beq.n	800c9a8 <_printf_i+0x164>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	079b      	lsls	r3, r3, #30
 800ca54:	d413      	bmi.n	800ca7e <_printf_i+0x23a>
 800ca56:	68e0      	ldr	r0, [r4, #12]
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	4298      	cmp	r0, r3
 800ca5c:	bfb8      	it	lt
 800ca5e:	4618      	movlt	r0, r3
 800ca60:	e7a4      	b.n	800c9ac <_printf_i+0x168>
 800ca62:	2301      	movs	r3, #1
 800ca64:	4632      	mov	r2, r6
 800ca66:	4649      	mov	r1, r9
 800ca68:	4640      	mov	r0, r8
 800ca6a:	47d0      	blx	sl
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d09b      	beq.n	800c9a8 <_printf_i+0x164>
 800ca70:	3501      	adds	r5, #1
 800ca72:	68e3      	ldr	r3, [r4, #12]
 800ca74:	9903      	ldr	r1, [sp, #12]
 800ca76:	1a5b      	subs	r3, r3, r1
 800ca78:	42ab      	cmp	r3, r5
 800ca7a:	dcf2      	bgt.n	800ca62 <_printf_i+0x21e>
 800ca7c:	e7eb      	b.n	800ca56 <_printf_i+0x212>
 800ca7e:	2500      	movs	r5, #0
 800ca80:	f104 0619 	add.w	r6, r4, #25
 800ca84:	e7f5      	b.n	800ca72 <_printf_i+0x22e>
 800ca86:	bf00      	nop
 800ca88:	080109b2 	.word	0x080109b2
 800ca8c:	080109c3 	.word	0x080109c3

0800ca90 <siprintf>:
 800ca90:	b40e      	push	{r1, r2, r3}
 800ca92:	b500      	push	{lr}
 800ca94:	b09c      	sub	sp, #112	; 0x70
 800ca96:	ab1d      	add	r3, sp, #116	; 0x74
 800ca98:	9002      	str	r0, [sp, #8]
 800ca9a:	9006      	str	r0, [sp, #24]
 800ca9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800caa0:	4809      	ldr	r0, [pc, #36]	; (800cac8 <siprintf+0x38>)
 800caa2:	9107      	str	r1, [sp, #28]
 800caa4:	9104      	str	r1, [sp, #16]
 800caa6:	4909      	ldr	r1, [pc, #36]	; (800cacc <siprintf+0x3c>)
 800caa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800caac:	9105      	str	r1, [sp, #20]
 800caae:	6800      	ldr	r0, [r0, #0]
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	a902      	add	r1, sp, #8
 800cab4:	f001 fb68 	bl	800e188 <_svfiprintf_r>
 800cab8:	9b02      	ldr	r3, [sp, #8]
 800caba:	2200      	movs	r2, #0
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	b01c      	add	sp, #112	; 0x70
 800cac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac4:	b003      	add	sp, #12
 800cac6:	4770      	bx	lr
 800cac8:	20000010 	.word	0x20000010
 800cacc:	ffff0208 	.word	0xffff0208

0800cad0 <quorem>:
 800cad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	6903      	ldr	r3, [r0, #16]
 800cad6:	690c      	ldr	r4, [r1, #16]
 800cad8:	42a3      	cmp	r3, r4
 800cada:	4607      	mov	r7, r0
 800cadc:	f2c0 8081 	blt.w	800cbe2 <quorem+0x112>
 800cae0:	3c01      	subs	r4, #1
 800cae2:	f101 0814 	add.w	r8, r1, #20
 800cae6:	f100 0514 	add.w	r5, r0, #20
 800caea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800caf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caf8:	3301      	adds	r3, #1
 800cafa:	429a      	cmp	r2, r3
 800cafc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb04:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb08:	d331      	bcc.n	800cb6e <quorem+0x9e>
 800cb0a:	f04f 0e00 	mov.w	lr, #0
 800cb0e:	4640      	mov	r0, r8
 800cb10:	46ac      	mov	ip, r5
 800cb12:	46f2      	mov	sl, lr
 800cb14:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb18:	b293      	uxth	r3, r2
 800cb1a:	fb06 e303 	mla	r3, r6, r3, lr
 800cb1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	ebaa 0303 	sub.w	r3, sl, r3
 800cb28:	f8dc a000 	ldr.w	sl, [ip]
 800cb2c:	0c12      	lsrs	r2, r2, #16
 800cb2e:	fa13 f38a 	uxtah	r3, r3, sl
 800cb32:	fb06 e202 	mla	r2, r6, r2, lr
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	9b00      	ldr	r3, [sp, #0]
 800cb3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb3e:	b292      	uxth	r2, r2
 800cb40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb48:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb4c:	4581      	cmp	r9, r0
 800cb4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb52:	f84c 3b04 	str.w	r3, [ip], #4
 800cb56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb5a:	d2db      	bcs.n	800cb14 <quorem+0x44>
 800cb5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb60:	b92b      	cbnz	r3, 800cb6e <quorem+0x9e>
 800cb62:	9b01      	ldr	r3, [sp, #4]
 800cb64:	3b04      	subs	r3, #4
 800cb66:	429d      	cmp	r5, r3
 800cb68:	461a      	mov	r2, r3
 800cb6a:	d32e      	bcc.n	800cbca <quorem+0xfa>
 800cb6c:	613c      	str	r4, [r7, #16]
 800cb6e:	4638      	mov	r0, r7
 800cb70:	f001 f8b6 	bl	800dce0 <__mcmp>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	db24      	blt.n	800cbc2 <quorem+0xf2>
 800cb78:	3601      	adds	r6, #1
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f04f 0c00 	mov.w	ip, #0
 800cb80:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb84:	f8d0 e000 	ldr.w	lr, [r0]
 800cb88:	b293      	uxth	r3, r2
 800cb8a:	ebac 0303 	sub.w	r3, ip, r3
 800cb8e:	0c12      	lsrs	r2, r2, #16
 800cb90:	fa13 f38e 	uxtah	r3, r3, lr
 800cb94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cba2:	45c1      	cmp	r9, r8
 800cba4:	f840 3b04 	str.w	r3, [r0], #4
 800cba8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cbac:	d2e8      	bcs.n	800cb80 <quorem+0xb0>
 800cbae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbb6:	b922      	cbnz	r2, 800cbc2 <quorem+0xf2>
 800cbb8:	3b04      	subs	r3, #4
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	d30a      	bcc.n	800cbd6 <quorem+0x106>
 800cbc0:	613c      	str	r4, [r7, #16]
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	b003      	add	sp, #12
 800cbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbca:	6812      	ldr	r2, [r2, #0]
 800cbcc:	3b04      	subs	r3, #4
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	d1cc      	bne.n	800cb6c <quorem+0x9c>
 800cbd2:	3c01      	subs	r4, #1
 800cbd4:	e7c7      	b.n	800cb66 <quorem+0x96>
 800cbd6:	6812      	ldr	r2, [r2, #0]
 800cbd8:	3b04      	subs	r3, #4
 800cbda:	2a00      	cmp	r2, #0
 800cbdc:	d1f0      	bne.n	800cbc0 <quorem+0xf0>
 800cbde:	3c01      	subs	r4, #1
 800cbe0:	e7eb      	b.n	800cbba <quorem+0xea>
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e7ee      	b.n	800cbc4 <quorem+0xf4>
	...

0800cbe8 <_dtoa_r>:
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	ed2d 8b04 	vpush	{d8-d9}
 800cbf0:	ec57 6b10 	vmov	r6, r7, d0
 800cbf4:	b093      	sub	sp, #76	; 0x4c
 800cbf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbfc:	9106      	str	r1, [sp, #24]
 800cbfe:	ee10 aa10 	vmov	sl, s0
 800cc02:	4604      	mov	r4, r0
 800cc04:	9209      	str	r2, [sp, #36]	; 0x24
 800cc06:	930c      	str	r3, [sp, #48]	; 0x30
 800cc08:	46bb      	mov	fp, r7
 800cc0a:	b975      	cbnz	r5, 800cc2a <_dtoa_r+0x42>
 800cc0c:	2010      	movs	r0, #16
 800cc0e:	f000 fddd 	bl	800d7cc <malloc>
 800cc12:	4602      	mov	r2, r0
 800cc14:	6260      	str	r0, [r4, #36]	; 0x24
 800cc16:	b920      	cbnz	r0, 800cc22 <_dtoa_r+0x3a>
 800cc18:	4ba7      	ldr	r3, [pc, #668]	; (800ceb8 <_dtoa_r+0x2d0>)
 800cc1a:	21ea      	movs	r1, #234	; 0xea
 800cc1c:	48a7      	ldr	r0, [pc, #668]	; (800cebc <_dtoa_r+0x2d4>)
 800cc1e:	f001 fbc3 	bl	800e3a8 <__assert_func>
 800cc22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc26:	6005      	str	r5, [r0, #0]
 800cc28:	60c5      	str	r5, [r0, #12]
 800cc2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc2c:	6819      	ldr	r1, [r3, #0]
 800cc2e:	b151      	cbz	r1, 800cc46 <_dtoa_r+0x5e>
 800cc30:	685a      	ldr	r2, [r3, #4]
 800cc32:	604a      	str	r2, [r1, #4]
 800cc34:	2301      	movs	r3, #1
 800cc36:	4093      	lsls	r3, r2
 800cc38:	608b      	str	r3, [r1, #8]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 fe0e 	bl	800d85c <_Bfree>
 800cc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	1e3b      	subs	r3, r7, #0
 800cc48:	bfaa      	itet	ge
 800cc4a:	2300      	movge	r3, #0
 800cc4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc50:	f8c8 3000 	strge.w	r3, [r8]
 800cc54:	4b9a      	ldr	r3, [pc, #616]	; (800cec0 <_dtoa_r+0x2d8>)
 800cc56:	bfbc      	itt	lt
 800cc58:	2201      	movlt	r2, #1
 800cc5a:	f8c8 2000 	strlt.w	r2, [r8]
 800cc5e:	ea33 030b 	bics.w	r3, r3, fp
 800cc62:	d11b      	bne.n	800cc9c <_dtoa_r+0xb4>
 800cc64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc66:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc70:	4333      	orrs	r3, r6
 800cc72:	f000 8592 	beq.w	800d79a <_dtoa_r+0xbb2>
 800cc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc78:	b963      	cbnz	r3, 800cc94 <_dtoa_r+0xac>
 800cc7a:	4b92      	ldr	r3, [pc, #584]	; (800cec4 <_dtoa_r+0x2dc>)
 800cc7c:	e022      	b.n	800ccc4 <_dtoa_r+0xdc>
 800cc7e:	4b92      	ldr	r3, [pc, #584]	; (800cec8 <_dtoa_r+0x2e0>)
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	3308      	adds	r3, #8
 800cc84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	9801      	ldr	r0, [sp, #4]
 800cc8a:	b013      	add	sp, #76	; 0x4c
 800cc8c:	ecbd 8b04 	vpop	{d8-d9}
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc94:	4b8b      	ldr	r3, [pc, #556]	; (800cec4 <_dtoa_r+0x2dc>)
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	3303      	adds	r3, #3
 800cc9a:	e7f3      	b.n	800cc84 <_dtoa_r+0x9c>
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2300      	movs	r3, #0
 800cca0:	4650      	mov	r0, sl
 800cca2:	4659      	mov	r1, fp
 800cca4:	f7f3 ff28 	bl	8000af8 <__aeabi_dcmpeq>
 800cca8:	ec4b ab19 	vmov	d9, sl, fp
 800ccac:	4680      	mov	r8, r0
 800ccae:	b158      	cbz	r0, 800ccc8 <_dtoa_r+0xe0>
 800ccb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	6013      	str	r3, [r2, #0]
 800ccb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 856b 	beq.w	800d794 <_dtoa_r+0xbac>
 800ccbe:	4883      	ldr	r0, [pc, #524]	; (800cecc <_dtoa_r+0x2e4>)
 800ccc0:	6018      	str	r0, [r3, #0]
 800ccc2:	1e43      	subs	r3, r0, #1
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	e7df      	b.n	800cc88 <_dtoa_r+0xa0>
 800ccc8:	ec4b ab10 	vmov	d0, sl, fp
 800cccc:	aa10      	add	r2, sp, #64	; 0x40
 800ccce:	a911      	add	r1, sp, #68	; 0x44
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f001 f8ab 	bl	800de2c <__d2b>
 800ccd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ccda:	ee08 0a10 	vmov	s16, r0
 800ccde:	2d00      	cmp	r5, #0
 800cce0:	f000 8084 	beq.w	800cdec <_dtoa_r+0x204>
 800cce4:	ee19 3a90 	vmov	r3, s19
 800cce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ccf0:	4656      	mov	r6, sl
 800ccf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ccf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ccfe:	4b74      	ldr	r3, [pc, #464]	; (800ced0 <_dtoa_r+0x2e8>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	4630      	mov	r0, r6
 800cd04:	4639      	mov	r1, r7
 800cd06:	f7f3 fad7 	bl	80002b8 <__aeabi_dsub>
 800cd0a:	a365      	add	r3, pc, #404	; (adr r3, 800cea0 <_dtoa_r+0x2b8>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fc8a 	bl	8000628 <__aeabi_dmul>
 800cd14:	a364      	add	r3, pc, #400	; (adr r3, 800cea8 <_dtoa_r+0x2c0>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	f7f3 facf 	bl	80002bc <__adddf3>
 800cd1e:	4606      	mov	r6, r0
 800cd20:	4628      	mov	r0, r5
 800cd22:	460f      	mov	r7, r1
 800cd24:	f7f3 fc16 	bl	8000554 <__aeabi_i2d>
 800cd28:	a361      	add	r3, pc, #388	; (adr r3, 800ceb0 <_dtoa_r+0x2c8>)
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f7f3 fc7b 	bl	8000628 <__aeabi_dmul>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4630      	mov	r0, r6
 800cd38:	4639      	mov	r1, r7
 800cd3a:	f7f3 fabf 	bl	80002bc <__adddf3>
 800cd3e:	4606      	mov	r6, r0
 800cd40:	460f      	mov	r7, r1
 800cd42:	f7f3 ff21 	bl	8000b88 <__aeabi_d2iz>
 800cd46:	2200      	movs	r2, #0
 800cd48:	9000      	str	r0, [sp, #0]
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	4639      	mov	r1, r7
 800cd50:	f7f3 fedc 	bl	8000b0c <__aeabi_dcmplt>
 800cd54:	b150      	cbz	r0, 800cd6c <_dtoa_r+0x184>
 800cd56:	9800      	ldr	r0, [sp, #0]
 800cd58:	f7f3 fbfc 	bl	8000554 <__aeabi_i2d>
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	463b      	mov	r3, r7
 800cd60:	f7f3 feca 	bl	8000af8 <__aeabi_dcmpeq>
 800cd64:	b910      	cbnz	r0, 800cd6c <_dtoa_r+0x184>
 800cd66:	9b00      	ldr	r3, [sp, #0]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	9b00      	ldr	r3, [sp, #0]
 800cd6e:	2b16      	cmp	r3, #22
 800cd70:	d85a      	bhi.n	800ce28 <_dtoa_r+0x240>
 800cd72:	9a00      	ldr	r2, [sp, #0]
 800cd74:	4b57      	ldr	r3, [pc, #348]	; (800ced4 <_dtoa_r+0x2ec>)
 800cd76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	ec51 0b19 	vmov	r0, r1, d9
 800cd82:	f7f3 fec3 	bl	8000b0c <__aeabi_dcmplt>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d050      	beq.n	800ce2c <_dtoa_r+0x244>
 800cd8a:	9b00      	ldr	r3, [sp, #0]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	2300      	movs	r3, #0
 800cd92:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd96:	1b5d      	subs	r5, r3, r5
 800cd98:	1e6b      	subs	r3, r5, #1
 800cd9a:	9305      	str	r3, [sp, #20]
 800cd9c:	bf45      	ittet	mi
 800cd9e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cda2:	9304      	strmi	r3, [sp, #16]
 800cda4:	2300      	movpl	r3, #0
 800cda6:	2300      	movmi	r3, #0
 800cda8:	bf4c      	ite	mi
 800cdaa:	9305      	strmi	r3, [sp, #20]
 800cdac:	9304      	strpl	r3, [sp, #16]
 800cdae:	9b00      	ldr	r3, [sp, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	db3d      	blt.n	800ce30 <_dtoa_r+0x248>
 800cdb4:	9b05      	ldr	r3, [sp, #20]
 800cdb6:	9a00      	ldr	r2, [sp, #0]
 800cdb8:	920a      	str	r2, [sp, #40]	; 0x28
 800cdba:	4413      	add	r3, r2
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	9b06      	ldr	r3, [sp, #24]
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	f200 8089 	bhi.w	800cedc <_dtoa_r+0x2f4>
 800cdca:	2b05      	cmp	r3, #5
 800cdcc:	bfc4      	itt	gt
 800cdce:	3b04      	subgt	r3, #4
 800cdd0:	9306      	strgt	r3, [sp, #24]
 800cdd2:	9b06      	ldr	r3, [sp, #24]
 800cdd4:	f1a3 0302 	sub.w	r3, r3, #2
 800cdd8:	bfcc      	ite	gt
 800cdda:	2500      	movgt	r5, #0
 800cddc:	2501      	movle	r5, #1
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	f200 8087 	bhi.w	800cef2 <_dtoa_r+0x30a>
 800cde4:	e8df f003 	tbb	[pc, r3]
 800cde8:	59383a2d 	.word	0x59383a2d
 800cdec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdf0:	441d      	add	r5, r3
 800cdf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cdf6:	2b20      	cmp	r3, #32
 800cdf8:	bfc1      	itttt	gt
 800cdfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce02:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce0a:	bfda      	itte	le
 800ce0c:	f1c3 0320 	rsble	r3, r3, #32
 800ce10:	fa06 f003 	lslle.w	r0, r6, r3
 800ce14:	4318      	orrgt	r0, r3
 800ce16:	f7f3 fb8d 	bl	8000534 <__aeabi_ui2d>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce22:	3d01      	subs	r5, #1
 800ce24:	930e      	str	r3, [sp, #56]	; 0x38
 800ce26:	e76a      	b.n	800ccfe <_dtoa_r+0x116>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e7b2      	b.n	800cd92 <_dtoa_r+0x1aa>
 800ce2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce2e:	e7b1      	b.n	800cd94 <_dtoa_r+0x1ac>
 800ce30:	9b04      	ldr	r3, [sp, #16]
 800ce32:	9a00      	ldr	r2, [sp, #0]
 800ce34:	1a9b      	subs	r3, r3, r2
 800ce36:	9304      	str	r3, [sp, #16]
 800ce38:	4253      	negs	r3, r2
 800ce3a:	9307      	str	r3, [sp, #28]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce40:	e7bf      	b.n	800cdc2 <_dtoa_r+0x1da>
 800ce42:	2300      	movs	r3, #0
 800ce44:	9308      	str	r3, [sp, #32]
 800ce46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	dc55      	bgt.n	800cef8 <_dtoa_r+0x310>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce52:	461a      	mov	r2, r3
 800ce54:	9209      	str	r2, [sp, #36]	; 0x24
 800ce56:	e00c      	b.n	800ce72 <_dtoa_r+0x28a>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e7f3      	b.n	800ce44 <_dtoa_r+0x25c>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce60:	9308      	str	r3, [sp, #32]
 800ce62:	9b00      	ldr	r3, [sp, #0]
 800ce64:	4413      	add	r3, r2
 800ce66:	9302      	str	r3, [sp, #8]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	9303      	str	r3, [sp, #12]
 800ce6e:	bfb8      	it	lt
 800ce70:	2301      	movlt	r3, #1
 800ce72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce74:	2200      	movs	r2, #0
 800ce76:	6042      	str	r2, [r0, #4]
 800ce78:	2204      	movs	r2, #4
 800ce7a:	f102 0614 	add.w	r6, r2, #20
 800ce7e:	429e      	cmp	r6, r3
 800ce80:	6841      	ldr	r1, [r0, #4]
 800ce82:	d93d      	bls.n	800cf00 <_dtoa_r+0x318>
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 fca9 	bl	800d7dc <_Balloc>
 800ce8a:	9001      	str	r0, [sp, #4]
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d13b      	bne.n	800cf08 <_dtoa_r+0x320>
 800ce90:	4b11      	ldr	r3, [pc, #68]	; (800ced8 <_dtoa_r+0x2f0>)
 800ce92:	4602      	mov	r2, r0
 800ce94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce98:	e6c0      	b.n	800cc1c <_dtoa_r+0x34>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e7df      	b.n	800ce5e <_dtoa_r+0x276>
 800ce9e:	bf00      	nop
 800cea0:	636f4361 	.word	0x636f4361
 800cea4:	3fd287a7 	.word	0x3fd287a7
 800cea8:	8b60c8b3 	.word	0x8b60c8b3
 800ceac:	3fc68a28 	.word	0x3fc68a28
 800ceb0:	509f79fb 	.word	0x509f79fb
 800ceb4:	3fd34413 	.word	0x3fd34413
 800ceb8:	080109e1 	.word	0x080109e1
 800cebc:	080109f8 	.word	0x080109f8
 800cec0:	7ff00000 	.word	0x7ff00000
 800cec4:	080109dd 	.word	0x080109dd
 800cec8:	080109d4 	.word	0x080109d4
 800cecc:	080109b1 	.word	0x080109b1
 800ced0:	3ff80000 	.word	0x3ff80000
 800ced4:	08010ae8 	.word	0x08010ae8
 800ced8:	08010a53 	.word	0x08010a53
 800cedc:	2501      	movs	r5, #1
 800cede:	2300      	movs	r3, #0
 800cee0:	9306      	str	r3, [sp, #24]
 800cee2:	9508      	str	r5, [sp, #32]
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295
 800cee8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceec:	2200      	movs	r2, #0
 800ceee:	2312      	movs	r3, #18
 800cef0:	e7b0      	b.n	800ce54 <_dtoa_r+0x26c>
 800cef2:	2301      	movs	r3, #1
 800cef4:	9308      	str	r3, [sp, #32]
 800cef6:	e7f5      	b.n	800cee4 <_dtoa_r+0x2fc>
 800cef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cefe:	e7b8      	b.n	800ce72 <_dtoa_r+0x28a>
 800cf00:	3101      	adds	r1, #1
 800cf02:	6041      	str	r1, [r0, #4]
 800cf04:	0052      	lsls	r2, r2, #1
 800cf06:	e7b8      	b.n	800ce7a <_dtoa_r+0x292>
 800cf08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf0a:	9a01      	ldr	r2, [sp, #4]
 800cf0c:	601a      	str	r2, [r3, #0]
 800cf0e:	9b03      	ldr	r3, [sp, #12]
 800cf10:	2b0e      	cmp	r3, #14
 800cf12:	f200 809d 	bhi.w	800d050 <_dtoa_r+0x468>
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	f000 809a 	beq.w	800d050 <_dtoa_r+0x468>
 800cf1c:	9b00      	ldr	r3, [sp, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	dd32      	ble.n	800cf88 <_dtoa_r+0x3a0>
 800cf22:	4ab7      	ldr	r2, [pc, #732]	; (800d200 <_dtoa_r+0x618>)
 800cf24:	f003 030f 	and.w	r3, r3, #15
 800cf28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	05d8      	lsls	r0, r3, #23
 800cf34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf38:	d516      	bpl.n	800cf68 <_dtoa_r+0x380>
 800cf3a:	4bb2      	ldr	r3, [pc, #712]	; (800d204 <_dtoa_r+0x61c>)
 800cf3c:	ec51 0b19 	vmov	r0, r1, d9
 800cf40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf44:	f7f3 fc9a 	bl	800087c <__aeabi_ddiv>
 800cf48:	f007 070f 	and.w	r7, r7, #15
 800cf4c:	4682      	mov	sl, r0
 800cf4e:	468b      	mov	fp, r1
 800cf50:	2503      	movs	r5, #3
 800cf52:	4eac      	ldr	r6, [pc, #688]	; (800d204 <_dtoa_r+0x61c>)
 800cf54:	b957      	cbnz	r7, 800cf6c <_dtoa_r+0x384>
 800cf56:	4642      	mov	r2, r8
 800cf58:	464b      	mov	r3, r9
 800cf5a:	4650      	mov	r0, sl
 800cf5c:	4659      	mov	r1, fp
 800cf5e:	f7f3 fc8d 	bl	800087c <__aeabi_ddiv>
 800cf62:	4682      	mov	sl, r0
 800cf64:	468b      	mov	fp, r1
 800cf66:	e028      	b.n	800cfba <_dtoa_r+0x3d2>
 800cf68:	2502      	movs	r5, #2
 800cf6a:	e7f2      	b.n	800cf52 <_dtoa_r+0x36a>
 800cf6c:	07f9      	lsls	r1, r7, #31
 800cf6e:	d508      	bpl.n	800cf82 <_dtoa_r+0x39a>
 800cf70:	4640      	mov	r0, r8
 800cf72:	4649      	mov	r1, r9
 800cf74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf78:	f7f3 fb56 	bl	8000628 <__aeabi_dmul>
 800cf7c:	3501      	adds	r5, #1
 800cf7e:	4680      	mov	r8, r0
 800cf80:	4689      	mov	r9, r1
 800cf82:	107f      	asrs	r7, r7, #1
 800cf84:	3608      	adds	r6, #8
 800cf86:	e7e5      	b.n	800cf54 <_dtoa_r+0x36c>
 800cf88:	f000 809b 	beq.w	800d0c2 <_dtoa_r+0x4da>
 800cf8c:	9b00      	ldr	r3, [sp, #0]
 800cf8e:	4f9d      	ldr	r7, [pc, #628]	; (800d204 <_dtoa_r+0x61c>)
 800cf90:	425e      	negs	r6, r3
 800cf92:	4b9b      	ldr	r3, [pc, #620]	; (800d200 <_dtoa_r+0x618>)
 800cf94:	f006 020f 	and.w	r2, r6, #15
 800cf98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	ec51 0b19 	vmov	r0, r1, d9
 800cfa4:	f7f3 fb40 	bl	8000628 <__aeabi_dmul>
 800cfa8:	1136      	asrs	r6, r6, #4
 800cfaa:	4682      	mov	sl, r0
 800cfac:	468b      	mov	fp, r1
 800cfae:	2300      	movs	r3, #0
 800cfb0:	2502      	movs	r5, #2
 800cfb2:	2e00      	cmp	r6, #0
 800cfb4:	d17a      	bne.n	800d0ac <_dtoa_r+0x4c4>
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1d3      	bne.n	800cf62 <_dtoa_r+0x37a>
 800cfba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f000 8082 	beq.w	800d0c6 <_dtoa_r+0x4de>
 800cfc2:	4b91      	ldr	r3, [pc, #580]	; (800d208 <_dtoa_r+0x620>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4650      	mov	r0, sl
 800cfc8:	4659      	mov	r1, fp
 800cfca:	f7f3 fd9f 	bl	8000b0c <__aeabi_dcmplt>
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d079      	beq.n	800d0c6 <_dtoa_r+0x4de>
 800cfd2:	9b03      	ldr	r3, [sp, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d076      	beq.n	800d0c6 <_dtoa_r+0x4de>
 800cfd8:	9b02      	ldr	r3, [sp, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	dd36      	ble.n	800d04c <_dtoa_r+0x464>
 800cfde:	9b00      	ldr	r3, [sp, #0]
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	4659      	mov	r1, fp
 800cfe4:	1e5f      	subs	r7, r3, #1
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	4b88      	ldr	r3, [pc, #544]	; (800d20c <_dtoa_r+0x624>)
 800cfea:	f7f3 fb1d 	bl	8000628 <__aeabi_dmul>
 800cfee:	9e02      	ldr	r6, [sp, #8]
 800cff0:	4682      	mov	sl, r0
 800cff2:	468b      	mov	fp, r1
 800cff4:	3501      	adds	r5, #1
 800cff6:	4628      	mov	r0, r5
 800cff8:	f7f3 faac 	bl	8000554 <__aeabi_i2d>
 800cffc:	4652      	mov	r2, sl
 800cffe:	465b      	mov	r3, fp
 800d000:	f7f3 fb12 	bl	8000628 <__aeabi_dmul>
 800d004:	4b82      	ldr	r3, [pc, #520]	; (800d210 <_dtoa_r+0x628>)
 800d006:	2200      	movs	r2, #0
 800d008:	f7f3 f958 	bl	80002bc <__adddf3>
 800d00c:	46d0      	mov	r8, sl
 800d00e:	46d9      	mov	r9, fp
 800d010:	4682      	mov	sl, r0
 800d012:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d016:	2e00      	cmp	r6, #0
 800d018:	d158      	bne.n	800d0cc <_dtoa_r+0x4e4>
 800d01a:	4b7e      	ldr	r3, [pc, #504]	; (800d214 <_dtoa_r+0x62c>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	4640      	mov	r0, r8
 800d020:	4649      	mov	r1, r9
 800d022:	f7f3 f949 	bl	80002b8 <__aeabi_dsub>
 800d026:	4652      	mov	r2, sl
 800d028:	465b      	mov	r3, fp
 800d02a:	4680      	mov	r8, r0
 800d02c:	4689      	mov	r9, r1
 800d02e:	f7f3 fd8b 	bl	8000b48 <__aeabi_dcmpgt>
 800d032:	2800      	cmp	r0, #0
 800d034:	f040 8295 	bne.w	800d562 <_dtoa_r+0x97a>
 800d038:	4652      	mov	r2, sl
 800d03a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d03e:	4640      	mov	r0, r8
 800d040:	4649      	mov	r1, r9
 800d042:	f7f3 fd63 	bl	8000b0c <__aeabi_dcmplt>
 800d046:	2800      	cmp	r0, #0
 800d048:	f040 8289 	bne.w	800d55e <_dtoa_r+0x976>
 800d04c:	ec5b ab19 	vmov	sl, fp, d9
 800d050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d052:	2b00      	cmp	r3, #0
 800d054:	f2c0 8148 	blt.w	800d2e8 <_dtoa_r+0x700>
 800d058:	9a00      	ldr	r2, [sp, #0]
 800d05a:	2a0e      	cmp	r2, #14
 800d05c:	f300 8144 	bgt.w	800d2e8 <_dtoa_r+0x700>
 800d060:	4b67      	ldr	r3, [pc, #412]	; (800d200 <_dtoa_r+0x618>)
 800d062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f280 80d5 	bge.w	800d21c <_dtoa_r+0x634>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f300 80d1 	bgt.w	800d21c <_dtoa_r+0x634>
 800d07a:	f040 826f 	bne.w	800d55c <_dtoa_r+0x974>
 800d07e:	4b65      	ldr	r3, [pc, #404]	; (800d214 <_dtoa_r+0x62c>)
 800d080:	2200      	movs	r2, #0
 800d082:	4640      	mov	r0, r8
 800d084:	4649      	mov	r1, r9
 800d086:	f7f3 facf 	bl	8000628 <__aeabi_dmul>
 800d08a:	4652      	mov	r2, sl
 800d08c:	465b      	mov	r3, fp
 800d08e:	f7f3 fd51 	bl	8000b34 <__aeabi_dcmpge>
 800d092:	9e03      	ldr	r6, [sp, #12]
 800d094:	4637      	mov	r7, r6
 800d096:	2800      	cmp	r0, #0
 800d098:	f040 8245 	bne.w	800d526 <_dtoa_r+0x93e>
 800d09c:	9d01      	ldr	r5, [sp, #4]
 800d09e:	2331      	movs	r3, #49	; 0x31
 800d0a0:	f805 3b01 	strb.w	r3, [r5], #1
 800d0a4:	9b00      	ldr	r3, [sp, #0]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	e240      	b.n	800d52e <_dtoa_r+0x946>
 800d0ac:	07f2      	lsls	r2, r6, #31
 800d0ae:	d505      	bpl.n	800d0bc <_dtoa_r+0x4d4>
 800d0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0b4:	f7f3 fab8 	bl	8000628 <__aeabi_dmul>
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	1076      	asrs	r6, r6, #1
 800d0be:	3708      	adds	r7, #8
 800d0c0:	e777      	b.n	800cfb2 <_dtoa_r+0x3ca>
 800d0c2:	2502      	movs	r5, #2
 800d0c4:	e779      	b.n	800cfba <_dtoa_r+0x3d2>
 800d0c6:	9f00      	ldr	r7, [sp, #0]
 800d0c8:	9e03      	ldr	r6, [sp, #12]
 800d0ca:	e794      	b.n	800cff6 <_dtoa_r+0x40e>
 800d0cc:	9901      	ldr	r1, [sp, #4]
 800d0ce:	4b4c      	ldr	r3, [pc, #304]	; (800d200 <_dtoa_r+0x618>)
 800d0d0:	4431      	add	r1, r6
 800d0d2:	910d      	str	r1, [sp, #52]	; 0x34
 800d0d4:	9908      	ldr	r1, [sp, #32]
 800d0d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0de:	2900      	cmp	r1, #0
 800d0e0:	d043      	beq.n	800d16a <_dtoa_r+0x582>
 800d0e2:	494d      	ldr	r1, [pc, #308]	; (800d218 <_dtoa_r+0x630>)
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	f7f3 fbc9 	bl	800087c <__aeabi_ddiv>
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	f7f3 f8e3 	bl	80002b8 <__aeabi_dsub>
 800d0f2:	9d01      	ldr	r5, [sp, #4]
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	468b      	mov	fp, r1
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	4640      	mov	r0, r8
 800d0fc:	f7f3 fd44 	bl	8000b88 <__aeabi_d2iz>
 800d100:	4606      	mov	r6, r0
 800d102:	f7f3 fa27 	bl	8000554 <__aeabi_i2d>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4640      	mov	r0, r8
 800d10c:	4649      	mov	r1, r9
 800d10e:	f7f3 f8d3 	bl	80002b8 <__aeabi_dsub>
 800d112:	3630      	adds	r6, #48	; 0x30
 800d114:	f805 6b01 	strb.w	r6, [r5], #1
 800d118:	4652      	mov	r2, sl
 800d11a:	465b      	mov	r3, fp
 800d11c:	4680      	mov	r8, r0
 800d11e:	4689      	mov	r9, r1
 800d120:	f7f3 fcf4 	bl	8000b0c <__aeabi_dcmplt>
 800d124:	2800      	cmp	r0, #0
 800d126:	d163      	bne.n	800d1f0 <_dtoa_r+0x608>
 800d128:	4642      	mov	r2, r8
 800d12a:	464b      	mov	r3, r9
 800d12c:	4936      	ldr	r1, [pc, #216]	; (800d208 <_dtoa_r+0x620>)
 800d12e:	2000      	movs	r0, #0
 800d130:	f7f3 f8c2 	bl	80002b8 <__aeabi_dsub>
 800d134:	4652      	mov	r2, sl
 800d136:	465b      	mov	r3, fp
 800d138:	f7f3 fce8 	bl	8000b0c <__aeabi_dcmplt>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	f040 80b5 	bne.w	800d2ac <_dtoa_r+0x6c4>
 800d142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d144:	429d      	cmp	r5, r3
 800d146:	d081      	beq.n	800d04c <_dtoa_r+0x464>
 800d148:	4b30      	ldr	r3, [pc, #192]	; (800d20c <_dtoa_r+0x624>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	4650      	mov	r0, sl
 800d14e:	4659      	mov	r1, fp
 800d150:	f7f3 fa6a 	bl	8000628 <__aeabi_dmul>
 800d154:	4b2d      	ldr	r3, [pc, #180]	; (800d20c <_dtoa_r+0x624>)
 800d156:	4682      	mov	sl, r0
 800d158:	468b      	mov	fp, r1
 800d15a:	4640      	mov	r0, r8
 800d15c:	4649      	mov	r1, r9
 800d15e:	2200      	movs	r2, #0
 800d160:	f7f3 fa62 	bl	8000628 <__aeabi_dmul>
 800d164:	4680      	mov	r8, r0
 800d166:	4689      	mov	r9, r1
 800d168:	e7c6      	b.n	800d0f8 <_dtoa_r+0x510>
 800d16a:	4650      	mov	r0, sl
 800d16c:	4659      	mov	r1, fp
 800d16e:	f7f3 fa5b 	bl	8000628 <__aeabi_dmul>
 800d172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d174:	9d01      	ldr	r5, [sp, #4]
 800d176:	930f      	str	r3, [sp, #60]	; 0x3c
 800d178:	4682      	mov	sl, r0
 800d17a:	468b      	mov	fp, r1
 800d17c:	4649      	mov	r1, r9
 800d17e:	4640      	mov	r0, r8
 800d180:	f7f3 fd02 	bl	8000b88 <__aeabi_d2iz>
 800d184:	4606      	mov	r6, r0
 800d186:	f7f3 f9e5 	bl	8000554 <__aeabi_i2d>
 800d18a:	3630      	adds	r6, #48	; 0x30
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	4640      	mov	r0, r8
 800d192:	4649      	mov	r1, r9
 800d194:	f7f3 f890 	bl	80002b8 <__aeabi_dsub>
 800d198:	f805 6b01 	strb.w	r6, [r5], #1
 800d19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d19e:	429d      	cmp	r5, r3
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4689      	mov	r9, r1
 800d1a4:	f04f 0200 	mov.w	r2, #0
 800d1a8:	d124      	bne.n	800d1f4 <_dtoa_r+0x60c>
 800d1aa:	4b1b      	ldr	r3, [pc, #108]	; (800d218 <_dtoa_r+0x630>)
 800d1ac:	4650      	mov	r0, sl
 800d1ae:	4659      	mov	r1, fp
 800d1b0:	f7f3 f884 	bl	80002bc <__adddf3>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	f7f3 fcc4 	bl	8000b48 <__aeabi_dcmpgt>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d173      	bne.n	800d2ac <_dtoa_r+0x6c4>
 800d1c4:	4652      	mov	r2, sl
 800d1c6:	465b      	mov	r3, fp
 800d1c8:	4913      	ldr	r1, [pc, #76]	; (800d218 <_dtoa_r+0x630>)
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	f7f3 f874 	bl	80002b8 <__aeabi_dsub>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	f7f3 fc98 	bl	8000b0c <__aeabi_dcmplt>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	f43f af35 	beq.w	800d04c <_dtoa_r+0x464>
 800d1e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1e4:	1e6b      	subs	r3, r5, #1
 800d1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1ec:	2b30      	cmp	r3, #48	; 0x30
 800d1ee:	d0f8      	beq.n	800d1e2 <_dtoa_r+0x5fa>
 800d1f0:	9700      	str	r7, [sp, #0]
 800d1f2:	e049      	b.n	800d288 <_dtoa_r+0x6a0>
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <_dtoa_r+0x624>)
 800d1f6:	f7f3 fa17 	bl	8000628 <__aeabi_dmul>
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	4689      	mov	r9, r1
 800d1fe:	e7bd      	b.n	800d17c <_dtoa_r+0x594>
 800d200:	08010ae8 	.word	0x08010ae8
 800d204:	08010ac0 	.word	0x08010ac0
 800d208:	3ff00000 	.word	0x3ff00000
 800d20c:	40240000 	.word	0x40240000
 800d210:	401c0000 	.word	0x401c0000
 800d214:	40140000 	.word	0x40140000
 800d218:	3fe00000 	.word	0x3fe00000
 800d21c:	9d01      	ldr	r5, [sp, #4]
 800d21e:	4656      	mov	r6, sl
 800d220:	465f      	mov	r7, fp
 800d222:	4642      	mov	r2, r8
 800d224:	464b      	mov	r3, r9
 800d226:	4630      	mov	r0, r6
 800d228:	4639      	mov	r1, r7
 800d22a:	f7f3 fb27 	bl	800087c <__aeabi_ddiv>
 800d22e:	f7f3 fcab 	bl	8000b88 <__aeabi_d2iz>
 800d232:	4682      	mov	sl, r0
 800d234:	f7f3 f98e 	bl	8000554 <__aeabi_i2d>
 800d238:	4642      	mov	r2, r8
 800d23a:	464b      	mov	r3, r9
 800d23c:	f7f3 f9f4 	bl	8000628 <__aeabi_dmul>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4630      	mov	r0, r6
 800d246:	4639      	mov	r1, r7
 800d248:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d24c:	f7f3 f834 	bl	80002b8 <__aeabi_dsub>
 800d250:	f805 6b01 	strb.w	r6, [r5], #1
 800d254:	9e01      	ldr	r6, [sp, #4]
 800d256:	9f03      	ldr	r7, [sp, #12]
 800d258:	1bae      	subs	r6, r5, r6
 800d25a:	42b7      	cmp	r7, r6
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	d135      	bne.n	800d2ce <_dtoa_r+0x6e6>
 800d262:	f7f3 f82b 	bl	80002bc <__adddf3>
 800d266:	4642      	mov	r2, r8
 800d268:	464b      	mov	r3, r9
 800d26a:	4606      	mov	r6, r0
 800d26c:	460f      	mov	r7, r1
 800d26e:	f7f3 fc6b 	bl	8000b48 <__aeabi_dcmpgt>
 800d272:	b9d0      	cbnz	r0, 800d2aa <_dtoa_r+0x6c2>
 800d274:	4642      	mov	r2, r8
 800d276:	464b      	mov	r3, r9
 800d278:	4630      	mov	r0, r6
 800d27a:	4639      	mov	r1, r7
 800d27c:	f7f3 fc3c 	bl	8000af8 <__aeabi_dcmpeq>
 800d280:	b110      	cbz	r0, 800d288 <_dtoa_r+0x6a0>
 800d282:	f01a 0f01 	tst.w	sl, #1
 800d286:	d110      	bne.n	800d2aa <_dtoa_r+0x6c2>
 800d288:	4620      	mov	r0, r4
 800d28a:	ee18 1a10 	vmov	r1, s16
 800d28e:	f000 fae5 	bl	800d85c <_Bfree>
 800d292:	2300      	movs	r3, #0
 800d294:	9800      	ldr	r0, [sp, #0]
 800d296:	702b      	strb	r3, [r5, #0]
 800d298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d29a:	3001      	adds	r0, #1
 800d29c:	6018      	str	r0, [r3, #0]
 800d29e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f43f acf1 	beq.w	800cc88 <_dtoa_r+0xa0>
 800d2a6:	601d      	str	r5, [r3, #0]
 800d2a8:	e4ee      	b.n	800cc88 <_dtoa_r+0xa0>
 800d2aa:	9f00      	ldr	r7, [sp, #0]
 800d2ac:	462b      	mov	r3, r5
 800d2ae:	461d      	mov	r5, r3
 800d2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2b4:	2a39      	cmp	r2, #57	; 0x39
 800d2b6:	d106      	bne.n	800d2c6 <_dtoa_r+0x6de>
 800d2b8:	9a01      	ldr	r2, [sp, #4]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d1f7      	bne.n	800d2ae <_dtoa_r+0x6c6>
 800d2be:	9901      	ldr	r1, [sp, #4]
 800d2c0:	2230      	movs	r2, #48	; 0x30
 800d2c2:	3701      	adds	r7, #1
 800d2c4:	700a      	strb	r2, [r1, #0]
 800d2c6:	781a      	ldrb	r2, [r3, #0]
 800d2c8:	3201      	adds	r2, #1
 800d2ca:	701a      	strb	r2, [r3, #0]
 800d2cc:	e790      	b.n	800d1f0 <_dtoa_r+0x608>
 800d2ce:	4ba6      	ldr	r3, [pc, #664]	; (800d568 <_dtoa_r+0x980>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f7f3 f9a9 	bl	8000628 <__aeabi_dmul>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4606      	mov	r6, r0
 800d2dc:	460f      	mov	r7, r1
 800d2de:	f7f3 fc0b 	bl	8000af8 <__aeabi_dcmpeq>
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d09d      	beq.n	800d222 <_dtoa_r+0x63a>
 800d2e6:	e7cf      	b.n	800d288 <_dtoa_r+0x6a0>
 800d2e8:	9a08      	ldr	r2, [sp, #32]
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	f000 80d7 	beq.w	800d49e <_dtoa_r+0x8b6>
 800d2f0:	9a06      	ldr	r2, [sp, #24]
 800d2f2:	2a01      	cmp	r2, #1
 800d2f4:	f300 80ba 	bgt.w	800d46c <_dtoa_r+0x884>
 800d2f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	f000 80b2 	beq.w	800d464 <_dtoa_r+0x87c>
 800d300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d304:	9e07      	ldr	r6, [sp, #28]
 800d306:	9d04      	ldr	r5, [sp, #16]
 800d308:	9a04      	ldr	r2, [sp, #16]
 800d30a:	441a      	add	r2, r3
 800d30c:	9204      	str	r2, [sp, #16]
 800d30e:	9a05      	ldr	r2, [sp, #20]
 800d310:	2101      	movs	r1, #1
 800d312:	441a      	add	r2, r3
 800d314:	4620      	mov	r0, r4
 800d316:	9205      	str	r2, [sp, #20]
 800d318:	f000 fb58 	bl	800d9cc <__i2b>
 800d31c:	4607      	mov	r7, r0
 800d31e:	2d00      	cmp	r5, #0
 800d320:	dd0c      	ble.n	800d33c <_dtoa_r+0x754>
 800d322:	9b05      	ldr	r3, [sp, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	dd09      	ble.n	800d33c <_dtoa_r+0x754>
 800d328:	42ab      	cmp	r3, r5
 800d32a:	9a04      	ldr	r2, [sp, #16]
 800d32c:	bfa8      	it	ge
 800d32e:	462b      	movge	r3, r5
 800d330:	1ad2      	subs	r2, r2, r3
 800d332:	9204      	str	r2, [sp, #16]
 800d334:	9a05      	ldr	r2, [sp, #20]
 800d336:	1aed      	subs	r5, r5, r3
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	9305      	str	r3, [sp, #20]
 800d33c:	9b07      	ldr	r3, [sp, #28]
 800d33e:	b31b      	cbz	r3, 800d388 <_dtoa_r+0x7a0>
 800d340:	9b08      	ldr	r3, [sp, #32]
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 80af 	beq.w	800d4a6 <_dtoa_r+0x8be>
 800d348:	2e00      	cmp	r6, #0
 800d34a:	dd13      	ble.n	800d374 <_dtoa_r+0x78c>
 800d34c:	4639      	mov	r1, r7
 800d34e:	4632      	mov	r2, r6
 800d350:	4620      	mov	r0, r4
 800d352:	f000 fbfb 	bl	800db4c <__pow5mult>
 800d356:	ee18 2a10 	vmov	r2, s16
 800d35a:	4601      	mov	r1, r0
 800d35c:	4607      	mov	r7, r0
 800d35e:	4620      	mov	r0, r4
 800d360:	f000 fb4a 	bl	800d9f8 <__multiply>
 800d364:	ee18 1a10 	vmov	r1, s16
 800d368:	4680      	mov	r8, r0
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 fa76 	bl	800d85c <_Bfree>
 800d370:	ee08 8a10 	vmov	s16, r8
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	1b9a      	subs	r2, r3, r6
 800d378:	d006      	beq.n	800d388 <_dtoa_r+0x7a0>
 800d37a:	ee18 1a10 	vmov	r1, s16
 800d37e:	4620      	mov	r0, r4
 800d380:	f000 fbe4 	bl	800db4c <__pow5mult>
 800d384:	ee08 0a10 	vmov	s16, r0
 800d388:	2101      	movs	r1, #1
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 fb1e 	bl	800d9cc <__i2b>
 800d390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d392:	2b00      	cmp	r3, #0
 800d394:	4606      	mov	r6, r0
 800d396:	f340 8088 	ble.w	800d4aa <_dtoa_r+0x8c2>
 800d39a:	461a      	mov	r2, r3
 800d39c:	4601      	mov	r1, r0
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 fbd4 	bl	800db4c <__pow5mult>
 800d3a4:	9b06      	ldr	r3, [sp, #24]
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	f340 8081 	ble.w	800d4b0 <_dtoa_r+0x8c8>
 800d3ae:	f04f 0800 	mov.w	r8, #0
 800d3b2:	6933      	ldr	r3, [r6, #16]
 800d3b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3b8:	6918      	ldr	r0, [r3, #16]
 800d3ba:	f000 fab7 	bl	800d92c <__hi0bits>
 800d3be:	f1c0 0020 	rsb	r0, r0, #32
 800d3c2:	9b05      	ldr	r3, [sp, #20]
 800d3c4:	4418      	add	r0, r3
 800d3c6:	f010 001f 	ands.w	r0, r0, #31
 800d3ca:	f000 8092 	beq.w	800d4f2 <_dtoa_r+0x90a>
 800d3ce:	f1c0 0320 	rsb	r3, r0, #32
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	f340 808a 	ble.w	800d4ec <_dtoa_r+0x904>
 800d3d8:	f1c0 001c 	rsb	r0, r0, #28
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	4403      	add	r3, r0
 800d3e0:	9304      	str	r3, [sp, #16]
 800d3e2:	9b05      	ldr	r3, [sp, #20]
 800d3e4:	4403      	add	r3, r0
 800d3e6:	4405      	add	r5, r0
 800d3e8:	9305      	str	r3, [sp, #20]
 800d3ea:	9b04      	ldr	r3, [sp, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	dd07      	ble.n	800d400 <_dtoa_r+0x818>
 800d3f0:	ee18 1a10 	vmov	r1, s16
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 fc02 	bl	800dc00 <__lshift>
 800d3fc:	ee08 0a10 	vmov	s16, r0
 800d400:	9b05      	ldr	r3, [sp, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	dd05      	ble.n	800d412 <_dtoa_r+0x82a>
 800d406:	4631      	mov	r1, r6
 800d408:	461a      	mov	r2, r3
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 fbf8 	bl	800dc00 <__lshift>
 800d410:	4606      	mov	r6, r0
 800d412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d414:	2b00      	cmp	r3, #0
 800d416:	d06e      	beq.n	800d4f6 <_dtoa_r+0x90e>
 800d418:	ee18 0a10 	vmov	r0, s16
 800d41c:	4631      	mov	r1, r6
 800d41e:	f000 fc5f 	bl	800dce0 <__mcmp>
 800d422:	2800      	cmp	r0, #0
 800d424:	da67      	bge.n	800d4f6 <_dtoa_r+0x90e>
 800d426:	9b00      	ldr	r3, [sp, #0]
 800d428:	3b01      	subs	r3, #1
 800d42a:	ee18 1a10 	vmov	r1, s16
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	220a      	movs	r2, #10
 800d432:	2300      	movs	r3, #0
 800d434:	4620      	mov	r0, r4
 800d436:	f000 fa33 	bl	800d8a0 <__multadd>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	ee08 0a10 	vmov	s16, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 81b1 	beq.w	800d7a8 <_dtoa_r+0xbc0>
 800d446:	2300      	movs	r3, #0
 800d448:	4639      	mov	r1, r7
 800d44a:	220a      	movs	r2, #10
 800d44c:	4620      	mov	r0, r4
 800d44e:	f000 fa27 	bl	800d8a0 <__multadd>
 800d452:	9b02      	ldr	r3, [sp, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	4607      	mov	r7, r0
 800d458:	f300 808e 	bgt.w	800d578 <_dtoa_r+0x990>
 800d45c:	9b06      	ldr	r3, [sp, #24]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	dc51      	bgt.n	800d506 <_dtoa_r+0x91e>
 800d462:	e089      	b.n	800d578 <_dtoa_r+0x990>
 800d464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d46a:	e74b      	b.n	800d304 <_dtoa_r+0x71c>
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	1e5e      	subs	r6, r3, #1
 800d470:	9b07      	ldr	r3, [sp, #28]
 800d472:	42b3      	cmp	r3, r6
 800d474:	bfbf      	itttt	lt
 800d476:	9b07      	ldrlt	r3, [sp, #28]
 800d478:	9607      	strlt	r6, [sp, #28]
 800d47a:	1af2      	sublt	r2, r6, r3
 800d47c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d47e:	bfb6      	itet	lt
 800d480:	189b      	addlt	r3, r3, r2
 800d482:	1b9e      	subge	r6, r3, r6
 800d484:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	bfb8      	it	lt
 800d48a:	2600      	movlt	r6, #0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	bfb7      	itett	lt
 800d490:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d494:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d498:	1a9d      	sublt	r5, r3, r2
 800d49a:	2300      	movlt	r3, #0
 800d49c:	e734      	b.n	800d308 <_dtoa_r+0x720>
 800d49e:	9e07      	ldr	r6, [sp, #28]
 800d4a0:	9d04      	ldr	r5, [sp, #16]
 800d4a2:	9f08      	ldr	r7, [sp, #32]
 800d4a4:	e73b      	b.n	800d31e <_dtoa_r+0x736>
 800d4a6:	9a07      	ldr	r2, [sp, #28]
 800d4a8:	e767      	b.n	800d37a <_dtoa_r+0x792>
 800d4aa:	9b06      	ldr	r3, [sp, #24]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	dc18      	bgt.n	800d4e2 <_dtoa_r+0x8fa>
 800d4b0:	f1ba 0f00 	cmp.w	sl, #0
 800d4b4:	d115      	bne.n	800d4e2 <_dtoa_r+0x8fa>
 800d4b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4ba:	b993      	cbnz	r3, 800d4e2 <_dtoa_r+0x8fa>
 800d4bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4c0:	0d1b      	lsrs	r3, r3, #20
 800d4c2:	051b      	lsls	r3, r3, #20
 800d4c4:	b183      	cbz	r3, 800d4e8 <_dtoa_r+0x900>
 800d4c6:	9b04      	ldr	r3, [sp, #16]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	9b05      	ldr	r3, [sp, #20]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	9305      	str	r3, [sp, #20]
 800d4d2:	f04f 0801 	mov.w	r8, #1
 800d4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f47f af6a 	bne.w	800d3b2 <_dtoa_r+0x7ca>
 800d4de:	2001      	movs	r0, #1
 800d4e0:	e76f      	b.n	800d3c2 <_dtoa_r+0x7da>
 800d4e2:	f04f 0800 	mov.w	r8, #0
 800d4e6:	e7f6      	b.n	800d4d6 <_dtoa_r+0x8ee>
 800d4e8:	4698      	mov	r8, r3
 800d4ea:	e7f4      	b.n	800d4d6 <_dtoa_r+0x8ee>
 800d4ec:	f43f af7d 	beq.w	800d3ea <_dtoa_r+0x802>
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	301c      	adds	r0, #28
 800d4f4:	e772      	b.n	800d3dc <_dtoa_r+0x7f4>
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dc37      	bgt.n	800d56c <_dtoa_r+0x984>
 800d4fc:	9b06      	ldr	r3, [sp, #24]
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	dd34      	ble.n	800d56c <_dtoa_r+0x984>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	9302      	str	r3, [sp, #8]
 800d506:	9b02      	ldr	r3, [sp, #8]
 800d508:	b96b      	cbnz	r3, 800d526 <_dtoa_r+0x93e>
 800d50a:	4631      	mov	r1, r6
 800d50c:	2205      	movs	r2, #5
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 f9c6 	bl	800d8a0 <__multadd>
 800d514:	4601      	mov	r1, r0
 800d516:	4606      	mov	r6, r0
 800d518:	ee18 0a10 	vmov	r0, s16
 800d51c:	f000 fbe0 	bl	800dce0 <__mcmp>
 800d520:	2800      	cmp	r0, #0
 800d522:	f73f adbb 	bgt.w	800d09c <_dtoa_r+0x4b4>
 800d526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d528:	9d01      	ldr	r5, [sp, #4]
 800d52a:	43db      	mvns	r3, r3
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	f04f 0800 	mov.w	r8, #0
 800d532:	4631      	mov	r1, r6
 800d534:	4620      	mov	r0, r4
 800d536:	f000 f991 	bl	800d85c <_Bfree>
 800d53a:	2f00      	cmp	r7, #0
 800d53c:	f43f aea4 	beq.w	800d288 <_dtoa_r+0x6a0>
 800d540:	f1b8 0f00 	cmp.w	r8, #0
 800d544:	d005      	beq.n	800d552 <_dtoa_r+0x96a>
 800d546:	45b8      	cmp	r8, r7
 800d548:	d003      	beq.n	800d552 <_dtoa_r+0x96a>
 800d54a:	4641      	mov	r1, r8
 800d54c:	4620      	mov	r0, r4
 800d54e:	f000 f985 	bl	800d85c <_Bfree>
 800d552:	4639      	mov	r1, r7
 800d554:	4620      	mov	r0, r4
 800d556:	f000 f981 	bl	800d85c <_Bfree>
 800d55a:	e695      	b.n	800d288 <_dtoa_r+0x6a0>
 800d55c:	2600      	movs	r6, #0
 800d55e:	4637      	mov	r7, r6
 800d560:	e7e1      	b.n	800d526 <_dtoa_r+0x93e>
 800d562:	9700      	str	r7, [sp, #0]
 800d564:	4637      	mov	r7, r6
 800d566:	e599      	b.n	800d09c <_dtoa_r+0x4b4>
 800d568:	40240000 	.word	0x40240000
 800d56c:	9b08      	ldr	r3, [sp, #32]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 80ca 	beq.w	800d708 <_dtoa_r+0xb20>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	9302      	str	r3, [sp, #8]
 800d578:	2d00      	cmp	r5, #0
 800d57a:	dd05      	ble.n	800d588 <_dtoa_r+0x9a0>
 800d57c:	4639      	mov	r1, r7
 800d57e:	462a      	mov	r2, r5
 800d580:	4620      	mov	r0, r4
 800d582:	f000 fb3d 	bl	800dc00 <__lshift>
 800d586:	4607      	mov	r7, r0
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	d05b      	beq.n	800d646 <_dtoa_r+0xa5e>
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	4620      	mov	r0, r4
 800d592:	f000 f923 	bl	800d7dc <_Balloc>
 800d596:	4605      	mov	r5, r0
 800d598:	b928      	cbnz	r0, 800d5a6 <_dtoa_r+0x9be>
 800d59a:	4b87      	ldr	r3, [pc, #540]	; (800d7b8 <_dtoa_r+0xbd0>)
 800d59c:	4602      	mov	r2, r0
 800d59e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d5a2:	f7ff bb3b 	b.w	800cc1c <_dtoa_r+0x34>
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	3202      	adds	r2, #2
 800d5aa:	0092      	lsls	r2, r2, #2
 800d5ac:	f107 010c 	add.w	r1, r7, #12
 800d5b0:	300c      	adds	r0, #12
 800d5b2:	f7fe fded 	bl	800c190 <memcpy>
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f000 fb20 	bl	800dc00 <__lshift>
 800d5c0:	9b01      	ldr	r3, [sp, #4]
 800d5c2:	f103 0901 	add.w	r9, r3, #1
 800d5c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	9305      	str	r3, [sp, #20]
 800d5ce:	f00a 0301 	and.w	r3, sl, #1
 800d5d2:	46b8      	mov	r8, r7
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	4607      	mov	r7, r0
 800d5d8:	4631      	mov	r1, r6
 800d5da:	ee18 0a10 	vmov	r0, s16
 800d5de:	f7ff fa77 	bl	800cad0 <quorem>
 800d5e2:	4641      	mov	r1, r8
 800d5e4:	9002      	str	r0, [sp, #8]
 800d5e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5ea:	ee18 0a10 	vmov	r0, s16
 800d5ee:	f000 fb77 	bl	800dce0 <__mcmp>
 800d5f2:	463a      	mov	r2, r7
 800d5f4:	9003      	str	r0, [sp, #12]
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 fb8d 	bl	800dd18 <__mdiff>
 800d5fe:	68c2      	ldr	r2, [r0, #12]
 800d600:	f109 3bff 	add.w	fp, r9, #4294967295
 800d604:	4605      	mov	r5, r0
 800d606:	bb02      	cbnz	r2, 800d64a <_dtoa_r+0xa62>
 800d608:	4601      	mov	r1, r0
 800d60a:	ee18 0a10 	vmov	r0, s16
 800d60e:	f000 fb67 	bl	800dce0 <__mcmp>
 800d612:	4602      	mov	r2, r0
 800d614:	4629      	mov	r1, r5
 800d616:	4620      	mov	r0, r4
 800d618:	9207      	str	r2, [sp, #28]
 800d61a:	f000 f91f 	bl	800d85c <_Bfree>
 800d61e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d622:	ea43 0102 	orr.w	r1, r3, r2
 800d626:	9b04      	ldr	r3, [sp, #16]
 800d628:	430b      	orrs	r3, r1
 800d62a:	464d      	mov	r5, r9
 800d62c:	d10f      	bne.n	800d64e <_dtoa_r+0xa66>
 800d62e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d632:	d02a      	beq.n	800d68a <_dtoa_r+0xaa2>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	dd02      	ble.n	800d640 <_dtoa_r+0xa58>
 800d63a:	9b02      	ldr	r3, [sp, #8]
 800d63c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d640:	f88b a000 	strb.w	sl, [fp]
 800d644:	e775      	b.n	800d532 <_dtoa_r+0x94a>
 800d646:	4638      	mov	r0, r7
 800d648:	e7ba      	b.n	800d5c0 <_dtoa_r+0x9d8>
 800d64a:	2201      	movs	r2, #1
 800d64c:	e7e2      	b.n	800d614 <_dtoa_r+0xa2c>
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	db04      	blt.n	800d65e <_dtoa_r+0xa76>
 800d654:	9906      	ldr	r1, [sp, #24]
 800d656:	430b      	orrs	r3, r1
 800d658:	9904      	ldr	r1, [sp, #16]
 800d65a:	430b      	orrs	r3, r1
 800d65c:	d122      	bne.n	800d6a4 <_dtoa_r+0xabc>
 800d65e:	2a00      	cmp	r2, #0
 800d660:	ddee      	ble.n	800d640 <_dtoa_r+0xa58>
 800d662:	ee18 1a10 	vmov	r1, s16
 800d666:	2201      	movs	r2, #1
 800d668:	4620      	mov	r0, r4
 800d66a:	f000 fac9 	bl	800dc00 <__lshift>
 800d66e:	4631      	mov	r1, r6
 800d670:	ee08 0a10 	vmov	s16, r0
 800d674:	f000 fb34 	bl	800dce0 <__mcmp>
 800d678:	2800      	cmp	r0, #0
 800d67a:	dc03      	bgt.n	800d684 <_dtoa_r+0xa9c>
 800d67c:	d1e0      	bne.n	800d640 <_dtoa_r+0xa58>
 800d67e:	f01a 0f01 	tst.w	sl, #1
 800d682:	d0dd      	beq.n	800d640 <_dtoa_r+0xa58>
 800d684:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d688:	d1d7      	bne.n	800d63a <_dtoa_r+0xa52>
 800d68a:	2339      	movs	r3, #57	; 0x39
 800d68c:	f88b 3000 	strb.w	r3, [fp]
 800d690:	462b      	mov	r3, r5
 800d692:	461d      	mov	r5, r3
 800d694:	3b01      	subs	r3, #1
 800d696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d69a:	2a39      	cmp	r2, #57	; 0x39
 800d69c:	d071      	beq.n	800d782 <_dtoa_r+0xb9a>
 800d69e:	3201      	adds	r2, #1
 800d6a0:	701a      	strb	r2, [r3, #0]
 800d6a2:	e746      	b.n	800d532 <_dtoa_r+0x94a>
 800d6a4:	2a00      	cmp	r2, #0
 800d6a6:	dd07      	ble.n	800d6b8 <_dtoa_r+0xad0>
 800d6a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6ac:	d0ed      	beq.n	800d68a <_dtoa_r+0xaa2>
 800d6ae:	f10a 0301 	add.w	r3, sl, #1
 800d6b2:	f88b 3000 	strb.w	r3, [fp]
 800d6b6:	e73c      	b.n	800d532 <_dtoa_r+0x94a>
 800d6b8:	9b05      	ldr	r3, [sp, #20]
 800d6ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d6be:	4599      	cmp	r9, r3
 800d6c0:	d047      	beq.n	800d752 <_dtoa_r+0xb6a>
 800d6c2:	ee18 1a10 	vmov	r1, s16
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	220a      	movs	r2, #10
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	f000 f8e8 	bl	800d8a0 <__multadd>
 800d6d0:	45b8      	cmp	r8, r7
 800d6d2:	ee08 0a10 	vmov	s16, r0
 800d6d6:	f04f 0300 	mov.w	r3, #0
 800d6da:	f04f 020a 	mov.w	r2, #10
 800d6de:	4641      	mov	r1, r8
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	d106      	bne.n	800d6f2 <_dtoa_r+0xb0a>
 800d6e4:	f000 f8dc 	bl	800d8a0 <__multadd>
 800d6e8:	4680      	mov	r8, r0
 800d6ea:	4607      	mov	r7, r0
 800d6ec:	f109 0901 	add.w	r9, r9, #1
 800d6f0:	e772      	b.n	800d5d8 <_dtoa_r+0x9f0>
 800d6f2:	f000 f8d5 	bl	800d8a0 <__multadd>
 800d6f6:	4639      	mov	r1, r7
 800d6f8:	4680      	mov	r8, r0
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	220a      	movs	r2, #10
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 f8ce 	bl	800d8a0 <__multadd>
 800d704:	4607      	mov	r7, r0
 800d706:	e7f1      	b.n	800d6ec <_dtoa_r+0xb04>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	9302      	str	r3, [sp, #8]
 800d70c:	9d01      	ldr	r5, [sp, #4]
 800d70e:	ee18 0a10 	vmov	r0, s16
 800d712:	4631      	mov	r1, r6
 800d714:	f7ff f9dc 	bl	800cad0 <quorem>
 800d718:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d71c:	9b01      	ldr	r3, [sp, #4]
 800d71e:	f805 ab01 	strb.w	sl, [r5], #1
 800d722:	1aea      	subs	r2, r5, r3
 800d724:	9b02      	ldr	r3, [sp, #8]
 800d726:	4293      	cmp	r3, r2
 800d728:	dd09      	ble.n	800d73e <_dtoa_r+0xb56>
 800d72a:	ee18 1a10 	vmov	r1, s16
 800d72e:	2300      	movs	r3, #0
 800d730:	220a      	movs	r2, #10
 800d732:	4620      	mov	r0, r4
 800d734:	f000 f8b4 	bl	800d8a0 <__multadd>
 800d738:	ee08 0a10 	vmov	s16, r0
 800d73c:	e7e7      	b.n	800d70e <_dtoa_r+0xb26>
 800d73e:	9b02      	ldr	r3, [sp, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	bfc8      	it	gt
 800d744:	461d      	movgt	r5, r3
 800d746:	9b01      	ldr	r3, [sp, #4]
 800d748:	bfd8      	it	le
 800d74a:	2501      	movle	r5, #1
 800d74c:	441d      	add	r5, r3
 800d74e:	f04f 0800 	mov.w	r8, #0
 800d752:	ee18 1a10 	vmov	r1, s16
 800d756:	2201      	movs	r2, #1
 800d758:	4620      	mov	r0, r4
 800d75a:	f000 fa51 	bl	800dc00 <__lshift>
 800d75e:	4631      	mov	r1, r6
 800d760:	ee08 0a10 	vmov	s16, r0
 800d764:	f000 fabc 	bl	800dce0 <__mcmp>
 800d768:	2800      	cmp	r0, #0
 800d76a:	dc91      	bgt.n	800d690 <_dtoa_r+0xaa8>
 800d76c:	d102      	bne.n	800d774 <_dtoa_r+0xb8c>
 800d76e:	f01a 0f01 	tst.w	sl, #1
 800d772:	d18d      	bne.n	800d690 <_dtoa_r+0xaa8>
 800d774:	462b      	mov	r3, r5
 800d776:	461d      	mov	r5, r3
 800d778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d77c:	2a30      	cmp	r2, #48	; 0x30
 800d77e:	d0fa      	beq.n	800d776 <_dtoa_r+0xb8e>
 800d780:	e6d7      	b.n	800d532 <_dtoa_r+0x94a>
 800d782:	9a01      	ldr	r2, [sp, #4]
 800d784:	429a      	cmp	r2, r3
 800d786:	d184      	bne.n	800d692 <_dtoa_r+0xaaa>
 800d788:	9b00      	ldr	r3, [sp, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	2331      	movs	r3, #49	; 0x31
 800d790:	7013      	strb	r3, [r2, #0]
 800d792:	e6ce      	b.n	800d532 <_dtoa_r+0x94a>
 800d794:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <_dtoa_r+0xbd4>)
 800d796:	f7ff ba95 	b.w	800ccc4 <_dtoa_r+0xdc>
 800d79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f47f aa6e 	bne.w	800cc7e <_dtoa_r+0x96>
 800d7a2:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <_dtoa_r+0xbd8>)
 800d7a4:	f7ff ba8e 	b.w	800ccc4 <_dtoa_r+0xdc>
 800d7a8:	9b02      	ldr	r3, [sp, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dcae      	bgt.n	800d70c <_dtoa_r+0xb24>
 800d7ae:	9b06      	ldr	r3, [sp, #24]
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	f73f aea8 	bgt.w	800d506 <_dtoa_r+0x91e>
 800d7b6:	e7a9      	b.n	800d70c <_dtoa_r+0xb24>
 800d7b8:	08010a53 	.word	0x08010a53
 800d7bc:	080109b0 	.word	0x080109b0
 800d7c0:	080109d4 	.word	0x080109d4

0800d7c4 <_localeconv_r>:
 800d7c4:	4800      	ldr	r0, [pc, #0]	; (800d7c8 <_localeconv_r+0x4>)
 800d7c6:	4770      	bx	lr
 800d7c8:	20000164 	.word	0x20000164

0800d7cc <malloc>:
 800d7cc:	4b02      	ldr	r3, [pc, #8]	; (800d7d8 <malloc+0xc>)
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f000 bc09 	b.w	800dfe8 <_malloc_r>
 800d7d6:	bf00      	nop
 800d7d8:	20000010 	.word	0x20000010

0800d7dc <_Balloc>:
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	b976      	cbnz	r6, 800d804 <_Balloc+0x28>
 800d7e6:	2010      	movs	r0, #16
 800d7e8:	f7ff fff0 	bl	800d7cc <malloc>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	6260      	str	r0, [r4, #36]	; 0x24
 800d7f0:	b920      	cbnz	r0, 800d7fc <_Balloc+0x20>
 800d7f2:	4b18      	ldr	r3, [pc, #96]	; (800d854 <_Balloc+0x78>)
 800d7f4:	4818      	ldr	r0, [pc, #96]	; (800d858 <_Balloc+0x7c>)
 800d7f6:	2166      	movs	r1, #102	; 0x66
 800d7f8:	f000 fdd6 	bl	800e3a8 <__assert_func>
 800d7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d800:	6006      	str	r6, [r0, #0]
 800d802:	60c6      	str	r6, [r0, #12]
 800d804:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d806:	68f3      	ldr	r3, [r6, #12]
 800d808:	b183      	cbz	r3, 800d82c <_Balloc+0x50>
 800d80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d812:	b9b8      	cbnz	r0, 800d844 <_Balloc+0x68>
 800d814:	2101      	movs	r1, #1
 800d816:	fa01 f605 	lsl.w	r6, r1, r5
 800d81a:	1d72      	adds	r2, r6, #5
 800d81c:	0092      	lsls	r2, r2, #2
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 fb60 	bl	800dee4 <_calloc_r>
 800d824:	b160      	cbz	r0, 800d840 <_Balloc+0x64>
 800d826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d82a:	e00e      	b.n	800d84a <_Balloc+0x6e>
 800d82c:	2221      	movs	r2, #33	; 0x21
 800d82e:	2104      	movs	r1, #4
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fb57 	bl	800dee4 <_calloc_r>
 800d836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d838:	60f0      	str	r0, [r6, #12]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1e4      	bne.n	800d80a <_Balloc+0x2e>
 800d840:	2000      	movs	r0, #0
 800d842:	bd70      	pop	{r4, r5, r6, pc}
 800d844:	6802      	ldr	r2, [r0, #0]
 800d846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d84a:	2300      	movs	r3, #0
 800d84c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d850:	e7f7      	b.n	800d842 <_Balloc+0x66>
 800d852:	bf00      	nop
 800d854:	080109e1 	.word	0x080109e1
 800d858:	08010a64 	.word	0x08010a64

0800d85c <_Bfree>:
 800d85c:	b570      	push	{r4, r5, r6, lr}
 800d85e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d860:	4605      	mov	r5, r0
 800d862:	460c      	mov	r4, r1
 800d864:	b976      	cbnz	r6, 800d884 <_Bfree+0x28>
 800d866:	2010      	movs	r0, #16
 800d868:	f7ff ffb0 	bl	800d7cc <malloc>
 800d86c:	4602      	mov	r2, r0
 800d86e:	6268      	str	r0, [r5, #36]	; 0x24
 800d870:	b920      	cbnz	r0, 800d87c <_Bfree+0x20>
 800d872:	4b09      	ldr	r3, [pc, #36]	; (800d898 <_Bfree+0x3c>)
 800d874:	4809      	ldr	r0, [pc, #36]	; (800d89c <_Bfree+0x40>)
 800d876:	218a      	movs	r1, #138	; 0x8a
 800d878:	f000 fd96 	bl	800e3a8 <__assert_func>
 800d87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d880:	6006      	str	r6, [r0, #0]
 800d882:	60c6      	str	r6, [r0, #12]
 800d884:	b13c      	cbz	r4, 800d896 <_Bfree+0x3a>
 800d886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d888:	6862      	ldr	r2, [r4, #4]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d890:	6021      	str	r1, [r4, #0]
 800d892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d896:	bd70      	pop	{r4, r5, r6, pc}
 800d898:	080109e1 	.word	0x080109e1
 800d89c:	08010a64 	.word	0x08010a64

0800d8a0 <__multadd>:
 800d8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a4:	690d      	ldr	r5, [r1, #16]
 800d8a6:	4607      	mov	r7, r0
 800d8a8:	460c      	mov	r4, r1
 800d8aa:	461e      	mov	r6, r3
 800d8ac:	f101 0c14 	add.w	ip, r1, #20
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	f8dc 3000 	ldr.w	r3, [ip]
 800d8b6:	b299      	uxth	r1, r3
 800d8b8:	fb02 6101 	mla	r1, r2, r1, r6
 800d8bc:	0c1e      	lsrs	r6, r3, #16
 800d8be:	0c0b      	lsrs	r3, r1, #16
 800d8c0:	fb02 3306 	mla	r3, r2, r6, r3
 800d8c4:	b289      	uxth	r1, r1
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8cc:	4285      	cmp	r5, r0
 800d8ce:	f84c 1b04 	str.w	r1, [ip], #4
 800d8d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d8d6:	dcec      	bgt.n	800d8b2 <__multadd+0x12>
 800d8d8:	b30e      	cbz	r6, 800d91e <__multadd+0x7e>
 800d8da:	68a3      	ldr	r3, [r4, #8]
 800d8dc:	42ab      	cmp	r3, r5
 800d8de:	dc19      	bgt.n	800d914 <__multadd+0x74>
 800d8e0:	6861      	ldr	r1, [r4, #4]
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	3101      	adds	r1, #1
 800d8e6:	f7ff ff79 	bl	800d7dc <_Balloc>
 800d8ea:	4680      	mov	r8, r0
 800d8ec:	b928      	cbnz	r0, 800d8fa <__multadd+0x5a>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <__multadd+0x84>)
 800d8f2:	480d      	ldr	r0, [pc, #52]	; (800d928 <__multadd+0x88>)
 800d8f4:	21b5      	movs	r1, #181	; 0xb5
 800d8f6:	f000 fd57 	bl	800e3a8 <__assert_func>
 800d8fa:	6922      	ldr	r2, [r4, #16]
 800d8fc:	3202      	adds	r2, #2
 800d8fe:	f104 010c 	add.w	r1, r4, #12
 800d902:	0092      	lsls	r2, r2, #2
 800d904:	300c      	adds	r0, #12
 800d906:	f7fe fc43 	bl	800c190 <memcpy>
 800d90a:	4621      	mov	r1, r4
 800d90c:	4638      	mov	r0, r7
 800d90e:	f7ff ffa5 	bl	800d85c <_Bfree>
 800d912:	4644      	mov	r4, r8
 800d914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d918:	3501      	adds	r5, #1
 800d91a:	615e      	str	r6, [r3, #20]
 800d91c:	6125      	str	r5, [r4, #16]
 800d91e:	4620      	mov	r0, r4
 800d920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d924:	08010a53 	.word	0x08010a53
 800d928:	08010a64 	.word	0x08010a64

0800d92c <__hi0bits>:
 800d92c:	0c03      	lsrs	r3, r0, #16
 800d92e:	041b      	lsls	r3, r3, #16
 800d930:	b9d3      	cbnz	r3, 800d968 <__hi0bits+0x3c>
 800d932:	0400      	lsls	r0, r0, #16
 800d934:	2310      	movs	r3, #16
 800d936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d93a:	bf04      	itt	eq
 800d93c:	0200      	lsleq	r0, r0, #8
 800d93e:	3308      	addeq	r3, #8
 800d940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d944:	bf04      	itt	eq
 800d946:	0100      	lsleq	r0, r0, #4
 800d948:	3304      	addeq	r3, #4
 800d94a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d94e:	bf04      	itt	eq
 800d950:	0080      	lsleq	r0, r0, #2
 800d952:	3302      	addeq	r3, #2
 800d954:	2800      	cmp	r0, #0
 800d956:	db05      	blt.n	800d964 <__hi0bits+0x38>
 800d958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d95c:	f103 0301 	add.w	r3, r3, #1
 800d960:	bf08      	it	eq
 800d962:	2320      	moveq	r3, #32
 800d964:	4618      	mov	r0, r3
 800d966:	4770      	bx	lr
 800d968:	2300      	movs	r3, #0
 800d96a:	e7e4      	b.n	800d936 <__hi0bits+0xa>

0800d96c <__lo0bits>:
 800d96c:	6803      	ldr	r3, [r0, #0]
 800d96e:	f013 0207 	ands.w	r2, r3, #7
 800d972:	4601      	mov	r1, r0
 800d974:	d00b      	beq.n	800d98e <__lo0bits+0x22>
 800d976:	07da      	lsls	r2, r3, #31
 800d978:	d423      	bmi.n	800d9c2 <__lo0bits+0x56>
 800d97a:	0798      	lsls	r0, r3, #30
 800d97c:	bf49      	itett	mi
 800d97e:	085b      	lsrmi	r3, r3, #1
 800d980:	089b      	lsrpl	r3, r3, #2
 800d982:	2001      	movmi	r0, #1
 800d984:	600b      	strmi	r3, [r1, #0]
 800d986:	bf5c      	itt	pl
 800d988:	600b      	strpl	r3, [r1, #0]
 800d98a:	2002      	movpl	r0, #2
 800d98c:	4770      	bx	lr
 800d98e:	b298      	uxth	r0, r3
 800d990:	b9a8      	cbnz	r0, 800d9be <__lo0bits+0x52>
 800d992:	0c1b      	lsrs	r3, r3, #16
 800d994:	2010      	movs	r0, #16
 800d996:	b2da      	uxtb	r2, r3
 800d998:	b90a      	cbnz	r2, 800d99e <__lo0bits+0x32>
 800d99a:	3008      	adds	r0, #8
 800d99c:	0a1b      	lsrs	r3, r3, #8
 800d99e:	071a      	lsls	r2, r3, #28
 800d9a0:	bf04      	itt	eq
 800d9a2:	091b      	lsreq	r3, r3, #4
 800d9a4:	3004      	addeq	r0, #4
 800d9a6:	079a      	lsls	r2, r3, #30
 800d9a8:	bf04      	itt	eq
 800d9aa:	089b      	lsreq	r3, r3, #2
 800d9ac:	3002      	addeq	r0, #2
 800d9ae:	07da      	lsls	r2, r3, #31
 800d9b0:	d403      	bmi.n	800d9ba <__lo0bits+0x4e>
 800d9b2:	085b      	lsrs	r3, r3, #1
 800d9b4:	f100 0001 	add.w	r0, r0, #1
 800d9b8:	d005      	beq.n	800d9c6 <__lo0bits+0x5a>
 800d9ba:	600b      	str	r3, [r1, #0]
 800d9bc:	4770      	bx	lr
 800d9be:	4610      	mov	r0, r2
 800d9c0:	e7e9      	b.n	800d996 <__lo0bits+0x2a>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	4770      	bx	lr
 800d9c6:	2020      	movs	r0, #32
 800d9c8:	4770      	bx	lr
	...

0800d9cc <__i2b>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	f7ff ff03 	bl	800d7dc <_Balloc>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	b928      	cbnz	r0, 800d9e6 <__i2b+0x1a>
 800d9da:	4b05      	ldr	r3, [pc, #20]	; (800d9f0 <__i2b+0x24>)
 800d9dc:	4805      	ldr	r0, [pc, #20]	; (800d9f4 <__i2b+0x28>)
 800d9de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d9e2:	f000 fce1 	bl	800e3a8 <__assert_func>
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	6144      	str	r4, [r0, #20]
 800d9ea:	6103      	str	r3, [r0, #16]
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	bf00      	nop
 800d9f0:	08010a53 	.word	0x08010a53
 800d9f4:	08010a64 	.word	0x08010a64

0800d9f8 <__multiply>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	4691      	mov	r9, r2
 800d9fe:	690a      	ldr	r2, [r1, #16]
 800da00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da04:	429a      	cmp	r2, r3
 800da06:	bfb8      	it	lt
 800da08:	460b      	movlt	r3, r1
 800da0a:	460c      	mov	r4, r1
 800da0c:	bfbc      	itt	lt
 800da0e:	464c      	movlt	r4, r9
 800da10:	4699      	movlt	r9, r3
 800da12:	6927      	ldr	r7, [r4, #16]
 800da14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da18:	68a3      	ldr	r3, [r4, #8]
 800da1a:	6861      	ldr	r1, [r4, #4]
 800da1c:	eb07 060a 	add.w	r6, r7, sl
 800da20:	42b3      	cmp	r3, r6
 800da22:	b085      	sub	sp, #20
 800da24:	bfb8      	it	lt
 800da26:	3101      	addlt	r1, #1
 800da28:	f7ff fed8 	bl	800d7dc <_Balloc>
 800da2c:	b930      	cbnz	r0, 800da3c <__multiply+0x44>
 800da2e:	4602      	mov	r2, r0
 800da30:	4b44      	ldr	r3, [pc, #272]	; (800db44 <__multiply+0x14c>)
 800da32:	4845      	ldr	r0, [pc, #276]	; (800db48 <__multiply+0x150>)
 800da34:	f240 115d 	movw	r1, #349	; 0x15d
 800da38:	f000 fcb6 	bl	800e3a8 <__assert_func>
 800da3c:	f100 0514 	add.w	r5, r0, #20
 800da40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da44:	462b      	mov	r3, r5
 800da46:	2200      	movs	r2, #0
 800da48:	4543      	cmp	r3, r8
 800da4a:	d321      	bcc.n	800da90 <__multiply+0x98>
 800da4c:	f104 0314 	add.w	r3, r4, #20
 800da50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da54:	f109 0314 	add.w	r3, r9, #20
 800da58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da5c:	9202      	str	r2, [sp, #8]
 800da5e:	1b3a      	subs	r2, r7, r4
 800da60:	3a15      	subs	r2, #21
 800da62:	f022 0203 	bic.w	r2, r2, #3
 800da66:	3204      	adds	r2, #4
 800da68:	f104 0115 	add.w	r1, r4, #21
 800da6c:	428f      	cmp	r7, r1
 800da6e:	bf38      	it	cc
 800da70:	2204      	movcc	r2, #4
 800da72:	9201      	str	r2, [sp, #4]
 800da74:	9a02      	ldr	r2, [sp, #8]
 800da76:	9303      	str	r3, [sp, #12]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d80c      	bhi.n	800da96 <__multiply+0x9e>
 800da7c:	2e00      	cmp	r6, #0
 800da7e:	dd03      	ble.n	800da88 <__multiply+0x90>
 800da80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da84:	2b00      	cmp	r3, #0
 800da86:	d05a      	beq.n	800db3e <__multiply+0x146>
 800da88:	6106      	str	r6, [r0, #16]
 800da8a:	b005      	add	sp, #20
 800da8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da90:	f843 2b04 	str.w	r2, [r3], #4
 800da94:	e7d8      	b.n	800da48 <__multiply+0x50>
 800da96:	f8b3 a000 	ldrh.w	sl, [r3]
 800da9a:	f1ba 0f00 	cmp.w	sl, #0
 800da9e:	d024      	beq.n	800daea <__multiply+0xf2>
 800daa0:	f104 0e14 	add.w	lr, r4, #20
 800daa4:	46a9      	mov	r9, r5
 800daa6:	f04f 0c00 	mov.w	ip, #0
 800daaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800daae:	f8d9 1000 	ldr.w	r1, [r9]
 800dab2:	fa1f fb82 	uxth.w	fp, r2
 800dab6:	b289      	uxth	r1, r1
 800dab8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dabc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dac0:	f8d9 2000 	ldr.w	r2, [r9]
 800dac4:	4461      	add	r1, ip
 800dac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800daca:	fb0a c20b 	mla	r2, sl, fp, ip
 800dace:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dad2:	b289      	uxth	r1, r1
 800dad4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dad8:	4577      	cmp	r7, lr
 800dada:	f849 1b04 	str.w	r1, [r9], #4
 800dade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dae2:	d8e2      	bhi.n	800daaa <__multiply+0xb2>
 800dae4:	9a01      	ldr	r2, [sp, #4]
 800dae6:	f845 c002 	str.w	ip, [r5, r2]
 800daea:	9a03      	ldr	r2, [sp, #12]
 800daec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800daf0:	3304      	adds	r3, #4
 800daf2:	f1b9 0f00 	cmp.w	r9, #0
 800daf6:	d020      	beq.n	800db3a <__multiply+0x142>
 800daf8:	6829      	ldr	r1, [r5, #0]
 800dafa:	f104 0c14 	add.w	ip, r4, #20
 800dafe:	46ae      	mov	lr, r5
 800db00:	f04f 0a00 	mov.w	sl, #0
 800db04:	f8bc b000 	ldrh.w	fp, [ip]
 800db08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db0c:	fb09 220b 	mla	r2, r9, fp, r2
 800db10:	4492      	add	sl, r2
 800db12:	b289      	uxth	r1, r1
 800db14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db18:	f84e 1b04 	str.w	r1, [lr], #4
 800db1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db20:	f8be 1000 	ldrh.w	r1, [lr]
 800db24:	0c12      	lsrs	r2, r2, #16
 800db26:	fb09 1102 	mla	r1, r9, r2, r1
 800db2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800db2e:	4567      	cmp	r7, ip
 800db30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db34:	d8e6      	bhi.n	800db04 <__multiply+0x10c>
 800db36:	9a01      	ldr	r2, [sp, #4]
 800db38:	50a9      	str	r1, [r5, r2]
 800db3a:	3504      	adds	r5, #4
 800db3c:	e79a      	b.n	800da74 <__multiply+0x7c>
 800db3e:	3e01      	subs	r6, #1
 800db40:	e79c      	b.n	800da7c <__multiply+0x84>
 800db42:	bf00      	nop
 800db44:	08010a53 	.word	0x08010a53
 800db48:	08010a64 	.word	0x08010a64

0800db4c <__pow5mult>:
 800db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db50:	4615      	mov	r5, r2
 800db52:	f012 0203 	ands.w	r2, r2, #3
 800db56:	4606      	mov	r6, r0
 800db58:	460f      	mov	r7, r1
 800db5a:	d007      	beq.n	800db6c <__pow5mult+0x20>
 800db5c:	4c25      	ldr	r4, [pc, #148]	; (800dbf4 <__pow5mult+0xa8>)
 800db5e:	3a01      	subs	r2, #1
 800db60:	2300      	movs	r3, #0
 800db62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db66:	f7ff fe9b 	bl	800d8a0 <__multadd>
 800db6a:	4607      	mov	r7, r0
 800db6c:	10ad      	asrs	r5, r5, #2
 800db6e:	d03d      	beq.n	800dbec <__pow5mult+0xa0>
 800db70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db72:	b97c      	cbnz	r4, 800db94 <__pow5mult+0x48>
 800db74:	2010      	movs	r0, #16
 800db76:	f7ff fe29 	bl	800d7cc <malloc>
 800db7a:	4602      	mov	r2, r0
 800db7c:	6270      	str	r0, [r6, #36]	; 0x24
 800db7e:	b928      	cbnz	r0, 800db8c <__pow5mult+0x40>
 800db80:	4b1d      	ldr	r3, [pc, #116]	; (800dbf8 <__pow5mult+0xac>)
 800db82:	481e      	ldr	r0, [pc, #120]	; (800dbfc <__pow5mult+0xb0>)
 800db84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db88:	f000 fc0e 	bl	800e3a8 <__assert_func>
 800db8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db90:	6004      	str	r4, [r0, #0]
 800db92:	60c4      	str	r4, [r0, #12]
 800db94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db9c:	b94c      	cbnz	r4, 800dbb2 <__pow5mult+0x66>
 800db9e:	f240 2171 	movw	r1, #625	; 0x271
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7ff ff12 	bl	800d9cc <__i2b>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbae:	4604      	mov	r4, r0
 800dbb0:	6003      	str	r3, [r0, #0]
 800dbb2:	f04f 0900 	mov.w	r9, #0
 800dbb6:	07eb      	lsls	r3, r5, #31
 800dbb8:	d50a      	bpl.n	800dbd0 <__pow5mult+0x84>
 800dbba:	4639      	mov	r1, r7
 800dbbc:	4622      	mov	r2, r4
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f7ff ff1a 	bl	800d9f8 <__multiply>
 800dbc4:	4639      	mov	r1, r7
 800dbc6:	4680      	mov	r8, r0
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7ff fe47 	bl	800d85c <_Bfree>
 800dbce:	4647      	mov	r7, r8
 800dbd0:	106d      	asrs	r5, r5, #1
 800dbd2:	d00b      	beq.n	800dbec <__pow5mult+0xa0>
 800dbd4:	6820      	ldr	r0, [r4, #0]
 800dbd6:	b938      	cbnz	r0, 800dbe8 <__pow5mult+0x9c>
 800dbd8:	4622      	mov	r2, r4
 800dbda:	4621      	mov	r1, r4
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f7ff ff0b 	bl	800d9f8 <__multiply>
 800dbe2:	6020      	str	r0, [r4, #0]
 800dbe4:	f8c0 9000 	str.w	r9, [r0]
 800dbe8:	4604      	mov	r4, r0
 800dbea:	e7e4      	b.n	800dbb6 <__pow5mult+0x6a>
 800dbec:	4638      	mov	r0, r7
 800dbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf2:	bf00      	nop
 800dbf4:	08010bb0 	.word	0x08010bb0
 800dbf8:	080109e1 	.word	0x080109e1
 800dbfc:	08010a64 	.word	0x08010a64

0800dc00 <__lshift>:
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	460c      	mov	r4, r1
 800dc06:	6849      	ldr	r1, [r1, #4]
 800dc08:	6923      	ldr	r3, [r4, #16]
 800dc0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	4607      	mov	r7, r0
 800dc12:	4691      	mov	r9, r2
 800dc14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc18:	f108 0601 	add.w	r6, r8, #1
 800dc1c:	42b3      	cmp	r3, r6
 800dc1e:	db0b      	blt.n	800dc38 <__lshift+0x38>
 800dc20:	4638      	mov	r0, r7
 800dc22:	f7ff fddb 	bl	800d7dc <_Balloc>
 800dc26:	4605      	mov	r5, r0
 800dc28:	b948      	cbnz	r0, 800dc3e <__lshift+0x3e>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4b2a      	ldr	r3, [pc, #168]	; (800dcd8 <__lshift+0xd8>)
 800dc2e:	482b      	ldr	r0, [pc, #172]	; (800dcdc <__lshift+0xdc>)
 800dc30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dc34:	f000 fbb8 	bl	800e3a8 <__assert_func>
 800dc38:	3101      	adds	r1, #1
 800dc3a:	005b      	lsls	r3, r3, #1
 800dc3c:	e7ee      	b.n	800dc1c <__lshift+0x1c>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	f100 0114 	add.w	r1, r0, #20
 800dc44:	f100 0210 	add.w	r2, r0, #16
 800dc48:	4618      	mov	r0, r3
 800dc4a:	4553      	cmp	r3, sl
 800dc4c:	db37      	blt.n	800dcbe <__lshift+0xbe>
 800dc4e:	6920      	ldr	r0, [r4, #16]
 800dc50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc54:	f104 0314 	add.w	r3, r4, #20
 800dc58:	f019 091f 	ands.w	r9, r9, #31
 800dc5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc64:	d02f      	beq.n	800dcc6 <__lshift+0xc6>
 800dc66:	f1c9 0e20 	rsb	lr, r9, #32
 800dc6a:	468a      	mov	sl, r1
 800dc6c:	f04f 0c00 	mov.w	ip, #0
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	fa02 f209 	lsl.w	r2, r2, r9
 800dc76:	ea42 020c 	orr.w	r2, r2, ip
 800dc7a:	f84a 2b04 	str.w	r2, [sl], #4
 800dc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc82:	4298      	cmp	r0, r3
 800dc84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc88:	d8f2      	bhi.n	800dc70 <__lshift+0x70>
 800dc8a:	1b03      	subs	r3, r0, r4
 800dc8c:	3b15      	subs	r3, #21
 800dc8e:	f023 0303 	bic.w	r3, r3, #3
 800dc92:	3304      	adds	r3, #4
 800dc94:	f104 0215 	add.w	r2, r4, #21
 800dc98:	4290      	cmp	r0, r2
 800dc9a:	bf38      	it	cc
 800dc9c:	2304      	movcc	r3, #4
 800dc9e:	f841 c003 	str.w	ip, [r1, r3]
 800dca2:	f1bc 0f00 	cmp.w	ip, #0
 800dca6:	d001      	beq.n	800dcac <__lshift+0xac>
 800dca8:	f108 0602 	add.w	r6, r8, #2
 800dcac:	3e01      	subs	r6, #1
 800dcae:	4638      	mov	r0, r7
 800dcb0:	612e      	str	r6, [r5, #16]
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	f7ff fdd2 	bl	800d85c <_Bfree>
 800dcb8:	4628      	mov	r0, r5
 800dcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	e7c1      	b.n	800dc4a <__lshift+0x4a>
 800dcc6:	3904      	subs	r1, #4
 800dcc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dccc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dcd0:	4298      	cmp	r0, r3
 800dcd2:	d8f9      	bhi.n	800dcc8 <__lshift+0xc8>
 800dcd4:	e7ea      	b.n	800dcac <__lshift+0xac>
 800dcd6:	bf00      	nop
 800dcd8:	08010a53 	.word	0x08010a53
 800dcdc:	08010a64 	.word	0x08010a64

0800dce0 <__mcmp>:
 800dce0:	b530      	push	{r4, r5, lr}
 800dce2:	6902      	ldr	r2, [r0, #16]
 800dce4:	690c      	ldr	r4, [r1, #16]
 800dce6:	1b12      	subs	r2, r2, r4
 800dce8:	d10e      	bne.n	800dd08 <__mcmp+0x28>
 800dcea:	f100 0314 	add.w	r3, r0, #20
 800dcee:	3114      	adds	r1, #20
 800dcf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dcf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dcf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dcfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd00:	42a5      	cmp	r5, r4
 800dd02:	d003      	beq.n	800dd0c <__mcmp+0x2c>
 800dd04:	d305      	bcc.n	800dd12 <__mcmp+0x32>
 800dd06:	2201      	movs	r2, #1
 800dd08:	4610      	mov	r0, r2
 800dd0a:	bd30      	pop	{r4, r5, pc}
 800dd0c:	4283      	cmp	r3, r0
 800dd0e:	d3f3      	bcc.n	800dcf8 <__mcmp+0x18>
 800dd10:	e7fa      	b.n	800dd08 <__mcmp+0x28>
 800dd12:	f04f 32ff 	mov.w	r2, #4294967295
 800dd16:	e7f7      	b.n	800dd08 <__mcmp+0x28>

0800dd18 <__mdiff>:
 800dd18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	4606      	mov	r6, r0
 800dd20:	4611      	mov	r1, r2
 800dd22:	4620      	mov	r0, r4
 800dd24:	4690      	mov	r8, r2
 800dd26:	f7ff ffdb 	bl	800dce0 <__mcmp>
 800dd2a:	1e05      	subs	r5, r0, #0
 800dd2c:	d110      	bne.n	800dd50 <__mdiff+0x38>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	4630      	mov	r0, r6
 800dd32:	f7ff fd53 	bl	800d7dc <_Balloc>
 800dd36:	b930      	cbnz	r0, 800dd46 <__mdiff+0x2e>
 800dd38:	4b3a      	ldr	r3, [pc, #232]	; (800de24 <__mdiff+0x10c>)
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	f240 2132 	movw	r1, #562	; 0x232
 800dd40:	4839      	ldr	r0, [pc, #228]	; (800de28 <__mdiff+0x110>)
 800dd42:	f000 fb31 	bl	800e3a8 <__assert_func>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd50:	bfa4      	itt	ge
 800dd52:	4643      	movge	r3, r8
 800dd54:	46a0      	movge	r8, r4
 800dd56:	4630      	mov	r0, r6
 800dd58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd5c:	bfa6      	itte	ge
 800dd5e:	461c      	movge	r4, r3
 800dd60:	2500      	movge	r5, #0
 800dd62:	2501      	movlt	r5, #1
 800dd64:	f7ff fd3a 	bl	800d7dc <_Balloc>
 800dd68:	b920      	cbnz	r0, 800dd74 <__mdiff+0x5c>
 800dd6a:	4b2e      	ldr	r3, [pc, #184]	; (800de24 <__mdiff+0x10c>)
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd72:	e7e5      	b.n	800dd40 <__mdiff+0x28>
 800dd74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd78:	6926      	ldr	r6, [r4, #16]
 800dd7a:	60c5      	str	r5, [r0, #12]
 800dd7c:	f104 0914 	add.w	r9, r4, #20
 800dd80:	f108 0514 	add.w	r5, r8, #20
 800dd84:	f100 0e14 	add.w	lr, r0, #20
 800dd88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd90:	f108 0210 	add.w	r2, r8, #16
 800dd94:	46f2      	mov	sl, lr
 800dd96:	2100      	movs	r1, #0
 800dd98:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dda0:	fa1f f883 	uxth.w	r8, r3
 800dda4:	fa11 f18b 	uxtah	r1, r1, fp
 800dda8:	0c1b      	lsrs	r3, r3, #16
 800ddaa:	eba1 0808 	sub.w	r8, r1, r8
 800ddae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ddb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ddb6:	fa1f f888 	uxth.w	r8, r8
 800ddba:	1419      	asrs	r1, r3, #16
 800ddbc:	454e      	cmp	r6, r9
 800ddbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ddc2:	f84a 3b04 	str.w	r3, [sl], #4
 800ddc6:	d8e7      	bhi.n	800dd98 <__mdiff+0x80>
 800ddc8:	1b33      	subs	r3, r6, r4
 800ddca:	3b15      	subs	r3, #21
 800ddcc:	f023 0303 	bic.w	r3, r3, #3
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	3415      	adds	r4, #21
 800ddd4:	42a6      	cmp	r6, r4
 800ddd6:	bf38      	it	cc
 800ddd8:	2304      	movcc	r3, #4
 800ddda:	441d      	add	r5, r3
 800dddc:	4473      	add	r3, lr
 800ddde:	469e      	mov	lr, r3
 800dde0:	462e      	mov	r6, r5
 800dde2:	4566      	cmp	r6, ip
 800dde4:	d30e      	bcc.n	800de04 <__mdiff+0xec>
 800dde6:	f10c 0203 	add.w	r2, ip, #3
 800ddea:	1b52      	subs	r2, r2, r5
 800ddec:	f022 0203 	bic.w	r2, r2, #3
 800ddf0:	3d03      	subs	r5, #3
 800ddf2:	45ac      	cmp	ip, r5
 800ddf4:	bf38      	it	cc
 800ddf6:	2200      	movcc	r2, #0
 800ddf8:	441a      	add	r2, r3
 800ddfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ddfe:	b17b      	cbz	r3, 800de20 <__mdiff+0x108>
 800de00:	6107      	str	r7, [r0, #16]
 800de02:	e7a3      	b.n	800dd4c <__mdiff+0x34>
 800de04:	f856 8b04 	ldr.w	r8, [r6], #4
 800de08:	fa11 f288 	uxtah	r2, r1, r8
 800de0c:	1414      	asrs	r4, r2, #16
 800de0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de12:	b292      	uxth	r2, r2
 800de14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de18:	f84e 2b04 	str.w	r2, [lr], #4
 800de1c:	1421      	asrs	r1, r4, #16
 800de1e:	e7e0      	b.n	800dde2 <__mdiff+0xca>
 800de20:	3f01      	subs	r7, #1
 800de22:	e7ea      	b.n	800ddfa <__mdiff+0xe2>
 800de24:	08010a53 	.word	0x08010a53
 800de28:	08010a64 	.word	0x08010a64

0800de2c <__d2b>:
 800de2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de30:	4689      	mov	r9, r1
 800de32:	2101      	movs	r1, #1
 800de34:	ec57 6b10 	vmov	r6, r7, d0
 800de38:	4690      	mov	r8, r2
 800de3a:	f7ff fccf 	bl	800d7dc <_Balloc>
 800de3e:	4604      	mov	r4, r0
 800de40:	b930      	cbnz	r0, 800de50 <__d2b+0x24>
 800de42:	4602      	mov	r2, r0
 800de44:	4b25      	ldr	r3, [pc, #148]	; (800dedc <__d2b+0xb0>)
 800de46:	4826      	ldr	r0, [pc, #152]	; (800dee0 <__d2b+0xb4>)
 800de48:	f240 310a 	movw	r1, #778	; 0x30a
 800de4c:	f000 faac 	bl	800e3a8 <__assert_func>
 800de50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de58:	bb35      	cbnz	r5, 800dea8 <__d2b+0x7c>
 800de5a:	2e00      	cmp	r6, #0
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	d028      	beq.n	800deb2 <__d2b+0x86>
 800de60:	4668      	mov	r0, sp
 800de62:	9600      	str	r6, [sp, #0]
 800de64:	f7ff fd82 	bl	800d96c <__lo0bits>
 800de68:	9900      	ldr	r1, [sp, #0]
 800de6a:	b300      	cbz	r0, 800deae <__d2b+0x82>
 800de6c:	9a01      	ldr	r2, [sp, #4]
 800de6e:	f1c0 0320 	rsb	r3, r0, #32
 800de72:	fa02 f303 	lsl.w	r3, r2, r3
 800de76:	430b      	orrs	r3, r1
 800de78:	40c2      	lsrs	r2, r0
 800de7a:	6163      	str	r3, [r4, #20]
 800de7c:	9201      	str	r2, [sp, #4]
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	61a3      	str	r3, [r4, #24]
 800de82:	2b00      	cmp	r3, #0
 800de84:	bf14      	ite	ne
 800de86:	2202      	movne	r2, #2
 800de88:	2201      	moveq	r2, #1
 800de8a:	6122      	str	r2, [r4, #16]
 800de8c:	b1d5      	cbz	r5, 800dec4 <__d2b+0x98>
 800de8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de92:	4405      	add	r5, r0
 800de94:	f8c9 5000 	str.w	r5, [r9]
 800de98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de9c:	f8c8 0000 	str.w	r0, [r8]
 800dea0:	4620      	mov	r0, r4
 800dea2:	b003      	add	sp, #12
 800dea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800deac:	e7d5      	b.n	800de5a <__d2b+0x2e>
 800deae:	6161      	str	r1, [r4, #20]
 800deb0:	e7e5      	b.n	800de7e <__d2b+0x52>
 800deb2:	a801      	add	r0, sp, #4
 800deb4:	f7ff fd5a 	bl	800d96c <__lo0bits>
 800deb8:	9b01      	ldr	r3, [sp, #4]
 800deba:	6163      	str	r3, [r4, #20]
 800debc:	2201      	movs	r2, #1
 800debe:	6122      	str	r2, [r4, #16]
 800dec0:	3020      	adds	r0, #32
 800dec2:	e7e3      	b.n	800de8c <__d2b+0x60>
 800dec4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dec8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800decc:	f8c9 0000 	str.w	r0, [r9]
 800ded0:	6918      	ldr	r0, [r3, #16]
 800ded2:	f7ff fd2b 	bl	800d92c <__hi0bits>
 800ded6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800deda:	e7df      	b.n	800de9c <__d2b+0x70>
 800dedc:	08010a53 	.word	0x08010a53
 800dee0:	08010a64 	.word	0x08010a64

0800dee4 <_calloc_r>:
 800dee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dee6:	fba1 2402 	umull	r2, r4, r1, r2
 800deea:	b94c      	cbnz	r4, 800df00 <_calloc_r+0x1c>
 800deec:	4611      	mov	r1, r2
 800deee:	9201      	str	r2, [sp, #4]
 800def0:	f000 f87a 	bl	800dfe8 <_malloc_r>
 800def4:	9a01      	ldr	r2, [sp, #4]
 800def6:	4605      	mov	r5, r0
 800def8:	b930      	cbnz	r0, 800df08 <_calloc_r+0x24>
 800defa:	4628      	mov	r0, r5
 800defc:	b003      	add	sp, #12
 800defe:	bd30      	pop	{r4, r5, pc}
 800df00:	220c      	movs	r2, #12
 800df02:	6002      	str	r2, [r0, #0]
 800df04:	2500      	movs	r5, #0
 800df06:	e7f8      	b.n	800defa <_calloc_r+0x16>
 800df08:	4621      	mov	r1, r4
 800df0a:	f7fe f94f 	bl	800c1ac <memset>
 800df0e:	e7f4      	b.n	800defa <_calloc_r+0x16>

0800df10 <_free_r>:
 800df10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df12:	2900      	cmp	r1, #0
 800df14:	d044      	beq.n	800dfa0 <_free_r+0x90>
 800df16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df1a:	9001      	str	r0, [sp, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f1a1 0404 	sub.w	r4, r1, #4
 800df22:	bfb8      	it	lt
 800df24:	18e4      	addlt	r4, r4, r3
 800df26:	f000 fa9b 	bl	800e460 <__malloc_lock>
 800df2a:	4a1e      	ldr	r2, [pc, #120]	; (800dfa4 <_free_r+0x94>)
 800df2c:	9801      	ldr	r0, [sp, #4]
 800df2e:	6813      	ldr	r3, [r2, #0]
 800df30:	b933      	cbnz	r3, 800df40 <_free_r+0x30>
 800df32:	6063      	str	r3, [r4, #4]
 800df34:	6014      	str	r4, [r2, #0]
 800df36:	b003      	add	sp, #12
 800df38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df3c:	f000 ba96 	b.w	800e46c <__malloc_unlock>
 800df40:	42a3      	cmp	r3, r4
 800df42:	d908      	bls.n	800df56 <_free_r+0x46>
 800df44:	6825      	ldr	r5, [r4, #0]
 800df46:	1961      	adds	r1, r4, r5
 800df48:	428b      	cmp	r3, r1
 800df4a:	bf01      	itttt	eq
 800df4c:	6819      	ldreq	r1, [r3, #0]
 800df4e:	685b      	ldreq	r3, [r3, #4]
 800df50:	1949      	addeq	r1, r1, r5
 800df52:	6021      	streq	r1, [r4, #0]
 800df54:	e7ed      	b.n	800df32 <_free_r+0x22>
 800df56:	461a      	mov	r2, r3
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	b10b      	cbz	r3, 800df60 <_free_r+0x50>
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d9fa      	bls.n	800df56 <_free_r+0x46>
 800df60:	6811      	ldr	r1, [r2, #0]
 800df62:	1855      	adds	r5, r2, r1
 800df64:	42a5      	cmp	r5, r4
 800df66:	d10b      	bne.n	800df80 <_free_r+0x70>
 800df68:	6824      	ldr	r4, [r4, #0]
 800df6a:	4421      	add	r1, r4
 800df6c:	1854      	adds	r4, r2, r1
 800df6e:	42a3      	cmp	r3, r4
 800df70:	6011      	str	r1, [r2, #0]
 800df72:	d1e0      	bne.n	800df36 <_free_r+0x26>
 800df74:	681c      	ldr	r4, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	6053      	str	r3, [r2, #4]
 800df7a:	4421      	add	r1, r4
 800df7c:	6011      	str	r1, [r2, #0]
 800df7e:	e7da      	b.n	800df36 <_free_r+0x26>
 800df80:	d902      	bls.n	800df88 <_free_r+0x78>
 800df82:	230c      	movs	r3, #12
 800df84:	6003      	str	r3, [r0, #0]
 800df86:	e7d6      	b.n	800df36 <_free_r+0x26>
 800df88:	6825      	ldr	r5, [r4, #0]
 800df8a:	1961      	adds	r1, r4, r5
 800df8c:	428b      	cmp	r3, r1
 800df8e:	bf04      	itt	eq
 800df90:	6819      	ldreq	r1, [r3, #0]
 800df92:	685b      	ldreq	r3, [r3, #4]
 800df94:	6063      	str	r3, [r4, #4]
 800df96:	bf04      	itt	eq
 800df98:	1949      	addeq	r1, r1, r5
 800df9a:	6021      	streq	r1, [r4, #0]
 800df9c:	6054      	str	r4, [r2, #4]
 800df9e:	e7ca      	b.n	800df36 <_free_r+0x26>
 800dfa0:	b003      	add	sp, #12
 800dfa2:	bd30      	pop	{r4, r5, pc}
 800dfa4:	200061b0 	.word	0x200061b0

0800dfa8 <sbrk_aligned>:
 800dfa8:	b570      	push	{r4, r5, r6, lr}
 800dfaa:	4e0e      	ldr	r6, [pc, #56]	; (800dfe4 <sbrk_aligned+0x3c>)
 800dfac:	460c      	mov	r4, r1
 800dfae:	6831      	ldr	r1, [r6, #0]
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	b911      	cbnz	r1, 800dfba <sbrk_aligned+0x12>
 800dfb4:	f000 f9e8 	bl	800e388 <_sbrk_r>
 800dfb8:	6030      	str	r0, [r6, #0]
 800dfba:	4621      	mov	r1, r4
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	f000 f9e3 	bl	800e388 <_sbrk_r>
 800dfc2:	1c43      	adds	r3, r0, #1
 800dfc4:	d00a      	beq.n	800dfdc <sbrk_aligned+0x34>
 800dfc6:	1cc4      	adds	r4, r0, #3
 800dfc8:	f024 0403 	bic.w	r4, r4, #3
 800dfcc:	42a0      	cmp	r0, r4
 800dfce:	d007      	beq.n	800dfe0 <sbrk_aligned+0x38>
 800dfd0:	1a21      	subs	r1, r4, r0
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f000 f9d8 	bl	800e388 <_sbrk_r>
 800dfd8:	3001      	adds	r0, #1
 800dfda:	d101      	bne.n	800dfe0 <sbrk_aligned+0x38>
 800dfdc:	f04f 34ff 	mov.w	r4, #4294967295
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}
 800dfe4:	200061b4 	.word	0x200061b4

0800dfe8 <_malloc_r>:
 800dfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfec:	1ccd      	adds	r5, r1, #3
 800dfee:	f025 0503 	bic.w	r5, r5, #3
 800dff2:	3508      	adds	r5, #8
 800dff4:	2d0c      	cmp	r5, #12
 800dff6:	bf38      	it	cc
 800dff8:	250c      	movcc	r5, #12
 800dffa:	2d00      	cmp	r5, #0
 800dffc:	4607      	mov	r7, r0
 800dffe:	db01      	blt.n	800e004 <_malloc_r+0x1c>
 800e000:	42a9      	cmp	r1, r5
 800e002:	d905      	bls.n	800e010 <_malloc_r+0x28>
 800e004:	230c      	movs	r3, #12
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	2600      	movs	r6, #0
 800e00a:	4630      	mov	r0, r6
 800e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e010:	4e2e      	ldr	r6, [pc, #184]	; (800e0cc <_malloc_r+0xe4>)
 800e012:	f000 fa25 	bl	800e460 <__malloc_lock>
 800e016:	6833      	ldr	r3, [r6, #0]
 800e018:	461c      	mov	r4, r3
 800e01a:	bb34      	cbnz	r4, 800e06a <_malloc_r+0x82>
 800e01c:	4629      	mov	r1, r5
 800e01e:	4638      	mov	r0, r7
 800e020:	f7ff ffc2 	bl	800dfa8 <sbrk_aligned>
 800e024:	1c43      	adds	r3, r0, #1
 800e026:	4604      	mov	r4, r0
 800e028:	d14d      	bne.n	800e0c6 <_malloc_r+0xde>
 800e02a:	6834      	ldr	r4, [r6, #0]
 800e02c:	4626      	mov	r6, r4
 800e02e:	2e00      	cmp	r6, #0
 800e030:	d140      	bne.n	800e0b4 <_malloc_r+0xcc>
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	4631      	mov	r1, r6
 800e036:	4638      	mov	r0, r7
 800e038:	eb04 0803 	add.w	r8, r4, r3
 800e03c:	f000 f9a4 	bl	800e388 <_sbrk_r>
 800e040:	4580      	cmp	r8, r0
 800e042:	d13a      	bne.n	800e0ba <_malloc_r+0xd2>
 800e044:	6821      	ldr	r1, [r4, #0]
 800e046:	3503      	adds	r5, #3
 800e048:	1a6d      	subs	r5, r5, r1
 800e04a:	f025 0503 	bic.w	r5, r5, #3
 800e04e:	3508      	adds	r5, #8
 800e050:	2d0c      	cmp	r5, #12
 800e052:	bf38      	it	cc
 800e054:	250c      	movcc	r5, #12
 800e056:	4629      	mov	r1, r5
 800e058:	4638      	mov	r0, r7
 800e05a:	f7ff ffa5 	bl	800dfa8 <sbrk_aligned>
 800e05e:	3001      	adds	r0, #1
 800e060:	d02b      	beq.n	800e0ba <_malloc_r+0xd2>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	442b      	add	r3, r5
 800e066:	6023      	str	r3, [r4, #0]
 800e068:	e00e      	b.n	800e088 <_malloc_r+0xa0>
 800e06a:	6822      	ldr	r2, [r4, #0]
 800e06c:	1b52      	subs	r2, r2, r5
 800e06e:	d41e      	bmi.n	800e0ae <_malloc_r+0xc6>
 800e070:	2a0b      	cmp	r2, #11
 800e072:	d916      	bls.n	800e0a2 <_malloc_r+0xba>
 800e074:	1961      	adds	r1, r4, r5
 800e076:	42a3      	cmp	r3, r4
 800e078:	6025      	str	r5, [r4, #0]
 800e07a:	bf18      	it	ne
 800e07c:	6059      	strne	r1, [r3, #4]
 800e07e:	6863      	ldr	r3, [r4, #4]
 800e080:	bf08      	it	eq
 800e082:	6031      	streq	r1, [r6, #0]
 800e084:	5162      	str	r2, [r4, r5]
 800e086:	604b      	str	r3, [r1, #4]
 800e088:	4638      	mov	r0, r7
 800e08a:	f104 060b 	add.w	r6, r4, #11
 800e08e:	f000 f9ed 	bl	800e46c <__malloc_unlock>
 800e092:	f026 0607 	bic.w	r6, r6, #7
 800e096:	1d23      	adds	r3, r4, #4
 800e098:	1af2      	subs	r2, r6, r3
 800e09a:	d0b6      	beq.n	800e00a <_malloc_r+0x22>
 800e09c:	1b9b      	subs	r3, r3, r6
 800e09e:	50a3      	str	r3, [r4, r2]
 800e0a0:	e7b3      	b.n	800e00a <_malloc_r+0x22>
 800e0a2:	6862      	ldr	r2, [r4, #4]
 800e0a4:	42a3      	cmp	r3, r4
 800e0a6:	bf0c      	ite	eq
 800e0a8:	6032      	streq	r2, [r6, #0]
 800e0aa:	605a      	strne	r2, [r3, #4]
 800e0ac:	e7ec      	b.n	800e088 <_malloc_r+0xa0>
 800e0ae:	4623      	mov	r3, r4
 800e0b0:	6864      	ldr	r4, [r4, #4]
 800e0b2:	e7b2      	b.n	800e01a <_malloc_r+0x32>
 800e0b4:	4634      	mov	r4, r6
 800e0b6:	6876      	ldr	r6, [r6, #4]
 800e0b8:	e7b9      	b.n	800e02e <_malloc_r+0x46>
 800e0ba:	230c      	movs	r3, #12
 800e0bc:	603b      	str	r3, [r7, #0]
 800e0be:	4638      	mov	r0, r7
 800e0c0:	f000 f9d4 	bl	800e46c <__malloc_unlock>
 800e0c4:	e7a1      	b.n	800e00a <_malloc_r+0x22>
 800e0c6:	6025      	str	r5, [r4, #0]
 800e0c8:	e7de      	b.n	800e088 <_malloc_r+0xa0>
 800e0ca:	bf00      	nop
 800e0cc:	200061b0 	.word	0x200061b0

0800e0d0 <__ssputs_r>:
 800e0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d4:	688e      	ldr	r6, [r1, #8]
 800e0d6:	429e      	cmp	r6, r3
 800e0d8:	4682      	mov	sl, r0
 800e0da:	460c      	mov	r4, r1
 800e0dc:	4690      	mov	r8, r2
 800e0de:	461f      	mov	r7, r3
 800e0e0:	d838      	bhi.n	800e154 <__ssputs_r+0x84>
 800e0e2:	898a      	ldrh	r2, [r1, #12]
 800e0e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0e8:	d032      	beq.n	800e150 <__ssputs_r+0x80>
 800e0ea:	6825      	ldr	r5, [r4, #0]
 800e0ec:	6909      	ldr	r1, [r1, #16]
 800e0ee:	eba5 0901 	sub.w	r9, r5, r1
 800e0f2:	6965      	ldr	r5, [r4, #20]
 800e0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	444b      	add	r3, r9
 800e100:	106d      	asrs	r5, r5, #1
 800e102:	429d      	cmp	r5, r3
 800e104:	bf38      	it	cc
 800e106:	461d      	movcc	r5, r3
 800e108:	0553      	lsls	r3, r2, #21
 800e10a:	d531      	bpl.n	800e170 <__ssputs_r+0xa0>
 800e10c:	4629      	mov	r1, r5
 800e10e:	f7ff ff6b 	bl	800dfe8 <_malloc_r>
 800e112:	4606      	mov	r6, r0
 800e114:	b950      	cbnz	r0, 800e12c <__ssputs_r+0x5c>
 800e116:	230c      	movs	r3, #12
 800e118:	f8ca 3000 	str.w	r3, [sl]
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e122:	81a3      	strh	r3, [r4, #12]
 800e124:	f04f 30ff 	mov.w	r0, #4294967295
 800e128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12c:	6921      	ldr	r1, [r4, #16]
 800e12e:	464a      	mov	r2, r9
 800e130:	f7fe f82e 	bl	800c190 <memcpy>
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e13e:	81a3      	strh	r3, [r4, #12]
 800e140:	6126      	str	r6, [r4, #16]
 800e142:	6165      	str	r5, [r4, #20]
 800e144:	444e      	add	r6, r9
 800e146:	eba5 0509 	sub.w	r5, r5, r9
 800e14a:	6026      	str	r6, [r4, #0]
 800e14c:	60a5      	str	r5, [r4, #8]
 800e14e:	463e      	mov	r6, r7
 800e150:	42be      	cmp	r6, r7
 800e152:	d900      	bls.n	800e156 <__ssputs_r+0x86>
 800e154:	463e      	mov	r6, r7
 800e156:	6820      	ldr	r0, [r4, #0]
 800e158:	4632      	mov	r2, r6
 800e15a:	4641      	mov	r1, r8
 800e15c:	f000 f966 	bl	800e42c <memmove>
 800e160:	68a3      	ldr	r3, [r4, #8]
 800e162:	1b9b      	subs	r3, r3, r6
 800e164:	60a3      	str	r3, [r4, #8]
 800e166:	6823      	ldr	r3, [r4, #0]
 800e168:	4433      	add	r3, r6
 800e16a:	6023      	str	r3, [r4, #0]
 800e16c:	2000      	movs	r0, #0
 800e16e:	e7db      	b.n	800e128 <__ssputs_r+0x58>
 800e170:	462a      	mov	r2, r5
 800e172:	f000 f981 	bl	800e478 <_realloc_r>
 800e176:	4606      	mov	r6, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d1e1      	bne.n	800e140 <__ssputs_r+0x70>
 800e17c:	6921      	ldr	r1, [r4, #16]
 800e17e:	4650      	mov	r0, sl
 800e180:	f7ff fec6 	bl	800df10 <_free_r>
 800e184:	e7c7      	b.n	800e116 <__ssputs_r+0x46>
	...

0800e188 <_svfiprintf_r>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	4698      	mov	r8, r3
 800e18e:	898b      	ldrh	r3, [r1, #12]
 800e190:	061b      	lsls	r3, r3, #24
 800e192:	b09d      	sub	sp, #116	; 0x74
 800e194:	4607      	mov	r7, r0
 800e196:	460d      	mov	r5, r1
 800e198:	4614      	mov	r4, r2
 800e19a:	d50e      	bpl.n	800e1ba <_svfiprintf_r+0x32>
 800e19c:	690b      	ldr	r3, [r1, #16]
 800e19e:	b963      	cbnz	r3, 800e1ba <_svfiprintf_r+0x32>
 800e1a0:	2140      	movs	r1, #64	; 0x40
 800e1a2:	f7ff ff21 	bl	800dfe8 <_malloc_r>
 800e1a6:	6028      	str	r0, [r5, #0]
 800e1a8:	6128      	str	r0, [r5, #16]
 800e1aa:	b920      	cbnz	r0, 800e1b6 <_svfiprintf_r+0x2e>
 800e1ac:	230c      	movs	r3, #12
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b4:	e0d1      	b.n	800e35a <_svfiprintf_r+0x1d2>
 800e1b6:	2340      	movs	r3, #64	; 0x40
 800e1b8:	616b      	str	r3, [r5, #20]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1be:	2320      	movs	r3, #32
 800e1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c8:	2330      	movs	r3, #48	; 0x30
 800e1ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e374 <_svfiprintf_r+0x1ec>
 800e1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1d2:	f04f 0901 	mov.w	r9, #1
 800e1d6:	4623      	mov	r3, r4
 800e1d8:	469a      	mov	sl, r3
 800e1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1de:	b10a      	cbz	r2, 800e1e4 <_svfiprintf_r+0x5c>
 800e1e0:	2a25      	cmp	r2, #37	; 0x25
 800e1e2:	d1f9      	bne.n	800e1d8 <_svfiprintf_r+0x50>
 800e1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e8:	d00b      	beq.n	800e202 <_svfiprintf_r+0x7a>
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7ff ff6d 	bl	800e0d0 <__ssputs_r>
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f000 80aa 	beq.w	800e350 <_svfiprintf_r+0x1c8>
 800e1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1fe:	445a      	add	r2, fp
 800e200:	9209      	str	r2, [sp, #36]	; 0x24
 800e202:	f89a 3000 	ldrb.w	r3, [sl]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 80a2 	beq.w	800e350 <_svfiprintf_r+0x1c8>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e216:	f10a 0a01 	add.w	sl, sl, #1
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	9307      	str	r3, [sp, #28]
 800e21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e222:	931a      	str	r3, [sp, #104]	; 0x68
 800e224:	4654      	mov	r4, sl
 800e226:	2205      	movs	r2, #5
 800e228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22c:	4851      	ldr	r0, [pc, #324]	; (800e374 <_svfiprintf_r+0x1ec>)
 800e22e:	f7f1 ffef 	bl	8000210 <memchr>
 800e232:	9a04      	ldr	r2, [sp, #16]
 800e234:	b9d8      	cbnz	r0, 800e26e <_svfiprintf_r+0xe6>
 800e236:	06d0      	lsls	r0, r2, #27
 800e238:	bf44      	itt	mi
 800e23a:	2320      	movmi	r3, #32
 800e23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e240:	0711      	lsls	r1, r2, #28
 800e242:	bf44      	itt	mi
 800e244:	232b      	movmi	r3, #43	; 0x2b
 800e246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e24a:	f89a 3000 	ldrb.w	r3, [sl]
 800e24e:	2b2a      	cmp	r3, #42	; 0x2a
 800e250:	d015      	beq.n	800e27e <_svfiprintf_r+0xf6>
 800e252:	9a07      	ldr	r2, [sp, #28]
 800e254:	4654      	mov	r4, sl
 800e256:	2000      	movs	r0, #0
 800e258:	f04f 0c0a 	mov.w	ip, #10
 800e25c:	4621      	mov	r1, r4
 800e25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e262:	3b30      	subs	r3, #48	; 0x30
 800e264:	2b09      	cmp	r3, #9
 800e266:	d94e      	bls.n	800e306 <_svfiprintf_r+0x17e>
 800e268:	b1b0      	cbz	r0, 800e298 <_svfiprintf_r+0x110>
 800e26a:	9207      	str	r2, [sp, #28]
 800e26c:	e014      	b.n	800e298 <_svfiprintf_r+0x110>
 800e26e:	eba0 0308 	sub.w	r3, r0, r8
 800e272:	fa09 f303 	lsl.w	r3, r9, r3
 800e276:	4313      	orrs	r3, r2
 800e278:	9304      	str	r3, [sp, #16]
 800e27a:	46a2      	mov	sl, r4
 800e27c:	e7d2      	b.n	800e224 <_svfiprintf_r+0x9c>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	1d19      	adds	r1, r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	9103      	str	r1, [sp, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	bfbb      	ittet	lt
 800e28a:	425b      	neglt	r3, r3
 800e28c:	f042 0202 	orrlt.w	r2, r2, #2
 800e290:	9307      	strge	r3, [sp, #28]
 800e292:	9307      	strlt	r3, [sp, #28]
 800e294:	bfb8      	it	lt
 800e296:	9204      	strlt	r2, [sp, #16]
 800e298:	7823      	ldrb	r3, [r4, #0]
 800e29a:	2b2e      	cmp	r3, #46	; 0x2e
 800e29c:	d10c      	bne.n	800e2b8 <_svfiprintf_r+0x130>
 800e29e:	7863      	ldrb	r3, [r4, #1]
 800e2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2a2:	d135      	bne.n	800e310 <_svfiprintf_r+0x188>
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	1d1a      	adds	r2, r3, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	9203      	str	r2, [sp, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	bfb8      	it	lt
 800e2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2b4:	3402      	adds	r4, #2
 800e2b6:	9305      	str	r3, [sp, #20]
 800e2b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e384 <_svfiprintf_r+0x1fc>
 800e2bc:	7821      	ldrb	r1, [r4, #0]
 800e2be:	2203      	movs	r2, #3
 800e2c0:	4650      	mov	r0, sl
 800e2c2:	f7f1 ffa5 	bl	8000210 <memchr>
 800e2c6:	b140      	cbz	r0, 800e2da <_svfiprintf_r+0x152>
 800e2c8:	2340      	movs	r3, #64	; 0x40
 800e2ca:	eba0 000a 	sub.w	r0, r0, sl
 800e2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800e2d2:	9b04      	ldr	r3, [sp, #16]
 800e2d4:	4303      	orrs	r3, r0
 800e2d6:	3401      	adds	r4, #1
 800e2d8:	9304      	str	r3, [sp, #16]
 800e2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2de:	4826      	ldr	r0, [pc, #152]	; (800e378 <_svfiprintf_r+0x1f0>)
 800e2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2e4:	2206      	movs	r2, #6
 800e2e6:	f7f1 ff93 	bl	8000210 <memchr>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d038      	beq.n	800e360 <_svfiprintf_r+0x1d8>
 800e2ee:	4b23      	ldr	r3, [pc, #140]	; (800e37c <_svfiprintf_r+0x1f4>)
 800e2f0:	bb1b      	cbnz	r3, 800e33a <_svfiprintf_r+0x1b2>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	3307      	adds	r3, #7
 800e2f6:	f023 0307 	bic.w	r3, r3, #7
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	9303      	str	r3, [sp, #12]
 800e2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e300:	4433      	add	r3, r6
 800e302:	9309      	str	r3, [sp, #36]	; 0x24
 800e304:	e767      	b.n	800e1d6 <_svfiprintf_r+0x4e>
 800e306:	fb0c 3202 	mla	r2, ip, r2, r3
 800e30a:	460c      	mov	r4, r1
 800e30c:	2001      	movs	r0, #1
 800e30e:	e7a5      	b.n	800e25c <_svfiprintf_r+0xd4>
 800e310:	2300      	movs	r3, #0
 800e312:	3401      	adds	r4, #1
 800e314:	9305      	str	r3, [sp, #20]
 800e316:	4619      	mov	r1, r3
 800e318:	f04f 0c0a 	mov.w	ip, #10
 800e31c:	4620      	mov	r0, r4
 800e31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e322:	3a30      	subs	r2, #48	; 0x30
 800e324:	2a09      	cmp	r2, #9
 800e326:	d903      	bls.n	800e330 <_svfiprintf_r+0x1a8>
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0c5      	beq.n	800e2b8 <_svfiprintf_r+0x130>
 800e32c:	9105      	str	r1, [sp, #20]
 800e32e:	e7c3      	b.n	800e2b8 <_svfiprintf_r+0x130>
 800e330:	fb0c 2101 	mla	r1, ip, r1, r2
 800e334:	4604      	mov	r4, r0
 800e336:	2301      	movs	r3, #1
 800e338:	e7f0      	b.n	800e31c <_svfiprintf_r+0x194>
 800e33a:	ab03      	add	r3, sp, #12
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	462a      	mov	r2, r5
 800e340:	4b0f      	ldr	r3, [pc, #60]	; (800e380 <_svfiprintf_r+0x1f8>)
 800e342:	a904      	add	r1, sp, #16
 800e344:	4638      	mov	r0, r7
 800e346:	f7fd ffd9 	bl	800c2fc <_printf_float>
 800e34a:	1c42      	adds	r2, r0, #1
 800e34c:	4606      	mov	r6, r0
 800e34e:	d1d6      	bne.n	800e2fe <_svfiprintf_r+0x176>
 800e350:	89ab      	ldrh	r3, [r5, #12]
 800e352:	065b      	lsls	r3, r3, #25
 800e354:	f53f af2c 	bmi.w	800e1b0 <_svfiprintf_r+0x28>
 800e358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e35a:	b01d      	add	sp, #116	; 0x74
 800e35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e360:	ab03      	add	r3, sp, #12
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	462a      	mov	r2, r5
 800e366:	4b06      	ldr	r3, [pc, #24]	; (800e380 <_svfiprintf_r+0x1f8>)
 800e368:	a904      	add	r1, sp, #16
 800e36a:	4638      	mov	r0, r7
 800e36c:	f7fe fa6a 	bl	800c844 <_printf_i>
 800e370:	e7eb      	b.n	800e34a <_svfiprintf_r+0x1c2>
 800e372:	bf00      	nop
 800e374:	08010bbc 	.word	0x08010bbc
 800e378:	08010bc6 	.word	0x08010bc6
 800e37c:	0800c2fd 	.word	0x0800c2fd
 800e380:	0800e0d1 	.word	0x0800e0d1
 800e384:	08010bc2 	.word	0x08010bc2

0800e388 <_sbrk_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d06      	ldr	r5, [pc, #24]	; (800e3a4 <_sbrk_r+0x1c>)
 800e38c:	2300      	movs	r3, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	602b      	str	r3, [r5, #0]
 800e394:	f7f6 fdac 	bl	8004ef0 <_sbrk>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_sbrk_r+0x1a>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_sbrk_r+0x1a>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	200061b8 	.word	0x200061b8

0800e3a8 <__assert_func>:
 800e3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3aa:	4614      	mov	r4, r2
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	4b09      	ldr	r3, [pc, #36]	; (800e3d4 <__assert_func+0x2c>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	68d8      	ldr	r0, [r3, #12]
 800e3b6:	b14c      	cbz	r4, 800e3cc <__assert_func+0x24>
 800e3b8:	4b07      	ldr	r3, [pc, #28]	; (800e3d8 <__assert_func+0x30>)
 800e3ba:	9100      	str	r1, [sp, #0]
 800e3bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3c0:	4906      	ldr	r1, [pc, #24]	; (800e3dc <__assert_func+0x34>)
 800e3c2:	462b      	mov	r3, r5
 800e3c4:	f000 f80e 	bl	800e3e4 <fiprintf>
 800e3c8:	f000 faac 	bl	800e924 <abort>
 800e3cc:	4b04      	ldr	r3, [pc, #16]	; (800e3e0 <__assert_func+0x38>)
 800e3ce:	461c      	mov	r4, r3
 800e3d0:	e7f3      	b.n	800e3ba <__assert_func+0x12>
 800e3d2:	bf00      	nop
 800e3d4:	20000010 	.word	0x20000010
 800e3d8:	08010bcd 	.word	0x08010bcd
 800e3dc:	08010bda 	.word	0x08010bda
 800e3e0:	08010c08 	.word	0x08010c08

0800e3e4 <fiprintf>:
 800e3e4:	b40e      	push	{r1, r2, r3}
 800e3e6:	b503      	push	{r0, r1, lr}
 800e3e8:	4601      	mov	r1, r0
 800e3ea:	ab03      	add	r3, sp, #12
 800e3ec:	4805      	ldr	r0, [pc, #20]	; (800e404 <fiprintf+0x20>)
 800e3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f2:	6800      	ldr	r0, [r0, #0]
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	f000 f897 	bl	800e528 <_vfiprintf_r>
 800e3fa:	b002      	add	sp, #8
 800e3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e400:	b003      	add	sp, #12
 800e402:	4770      	bx	lr
 800e404:	20000010 	.word	0x20000010

0800e408 <__ascii_mbtowc>:
 800e408:	b082      	sub	sp, #8
 800e40a:	b901      	cbnz	r1, 800e40e <__ascii_mbtowc+0x6>
 800e40c:	a901      	add	r1, sp, #4
 800e40e:	b142      	cbz	r2, 800e422 <__ascii_mbtowc+0x1a>
 800e410:	b14b      	cbz	r3, 800e426 <__ascii_mbtowc+0x1e>
 800e412:	7813      	ldrb	r3, [r2, #0]
 800e414:	600b      	str	r3, [r1, #0]
 800e416:	7812      	ldrb	r2, [r2, #0]
 800e418:	1e10      	subs	r0, r2, #0
 800e41a:	bf18      	it	ne
 800e41c:	2001      	movne	r0, #1
 800e41e:	b002      	add	sp, #8
 800e420:	4770      	bx	lr
 800e422:	4610      	mov	r0, r2
 800e424:	e7fb      	b.n	800e41e <__ascii_mbtowc+0x16>
 800e426:	f06f 0001 	mvn.w	r0, #1
 800e42a:	e7f8      	b.n	800e41e <__ascii_mbtowc+0x16>

0800e42c <memmove>:
 800e42c:	4288      	cmp	r0, r1
 800e42e:	b510      	push	{r4, lr}
 800e430:	eb01 0402 	add.w	r4, r1, r2
 800e434:	d902      	bls.n	800e43c <memmove+0x10>
 800e436:	4284      	cmp	r4, r0
 800e438:	4623      	mov	r3, r4
 800e43a:	d807      	bhi.n	800e44c <memmove+0x20>
 800e43c:	1e43      	subs	r3, r0, #1
 800e43e:	42a1      	cmp	r1, r4
 800e440:	d008      	beq.n	800e454 <memmove+0x28>
 800e442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e44a:	e7f8      	b.n	800e43e <memmove+0x12>
 800e44c:	4402      	add	r2, r0
 800e44e:	4601      	mov	r1, r0
 800e450:	428a      	cmp	r2, r1
 800e452:	d100      	bne.n	800e456 <memmove+0x2a>
 800e454:	bd10      	pop	{r4, pc}
 800e456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e45e:	e7f7      	b.n	800e450 <memmove+0x24>

0800e460 <__malloc_lock>:
 800e460:	4801      	ldr	r0, [pc, #4]	; (800e468 <__malloc_lock+0x8>)
 800e462:	f000 bc1f 	b.w	800eca4 <__retarget_lock_acquire_recursive>
 800e466:	bf00      	nop
 800e468:	200061bc 	.word	0x200061bc

0800e46c <__malloc_unlock>:
 800e46c:	4801      	ldr	r0, [pc, #4]	; (800e474 <__malloc_unlock+0x8>)
 800e46e:	f000 bc1a 	b.w	800eca6 <__retarget_lock_release_recursive>
 800e472:	bf00      	nop
 800e474:	200061bc 	.word	0x200061bc

0800e478 <_realloc_r>:
 800e478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47c:	4680      	mov	r8, r0
 800e47e:	4614      	mov	r4, r2
 800e480:	460e      	mov	r6, r1
 800e482:	b921      	cbnz	r1, 800e48e <_realloc_r+0x16>
 800e484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	4611      	mov	r1, r2
 800e48a:	f7ff bdad 	b.w	800dfe8 <_malloc_r>
 800e48e:	b92a      	cbnz	r2, 800e49c <_realloc_r+0x24>
 800e490:	f7ff fd3e 	bl	800df10 <_free_r>
 800e494:	4625      	mov	r5, r4
 800e496:	4628      	mov	r0, r5
 800e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49c:	f000 fc6a 	bl	800ed74 <_malloc_usable_size_r>
 800e4a0:	4284      	cmp	r4, r0
 800e4a2:	4607      	mov	r7, r0
 800e4a4:	d802      	bhi.n	800e4ac <_realloc_r+0x34>
 800e4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4aa:	d812      	bhi.n	800e4d2 <_realloc_r+0x5a>
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	f7ff fd9a 	bl	800dfe8 <_malloc_r>
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d0ed      	beq.n	800e496 <_realloc_r+0x1e>
 800e4ba:	42bc      	cmp	r4, r7
 800e4bc:	4622      	mov	r2, r4
 800e4be:	4631      	mov	r1, r6
 800e4c0:	bf28      	it	cs
 800e4c2:	463a      	movcs	r2, r7
 800e4c4:	f7fd fe64 	bl	800c190 <memcpy>
 800e4c8:	4631      	mov	r1, r6
 800e4ca:	4640      	mov	r0, r8
 800e4cc:	f7ff fd20 	bl	800df10 <_free_r>
 800e4d0:	e7e1      	b.n	800e496 <_realloc_r+0x1e>
 800e4d2:	4635      	mov	r5, r6
 800e4d4:	e7df      	b.n	800e496 <_realloc_r+0x1e>

0800e4d6 <__sfputc_r>:
 800e4d6:	6893      	ldr	r3, [r2, #8]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	b410      	push	{r4}
 800e4de:	6093      	str	r3, [r2, #8]
 800e4e0:	da08      	bge.n	800e4f4 <__sfputc_r+0x1e>
 800e4e2:	6994      	ldr	r4, [r2, #24]
 800e4e4:	42a3      	cmp	r3, r4
 800e4e6:	db01      	blt.n	800e4ec <__sfputc_r+0x16>
 800e4e8:	290a      	cmp	r1, #10
 800e4ea:	d103      	bne.n	800e4f4 <__sfputc_r+0x1e>
 800e4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f0:	f000 b94a 	b.w	800e788 <__swbuf_r>
 800e4f4:	6813      	ldr	r3, [r2, #0]
 800e4f6:	1c58      	adds	r0, r3, #1
 800e4f8:	6010      	str	r0, [r2, #0]
 800e4fa:	7019      	strb	r1, [r3, #0]
 800e4fc:	4608      	mov	r0, r1
 800e4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <__sfputs_r>:
 800e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e506:	4606      	mov	r6, r0
 800e508:	460f      	mov	r7, r1
 800e50a:	4614      	mov	r4, r2
 800e50c:	18d5      	adds	r5, r2, r3
 800e50e:	42ac      	cmp	r4, r5
 800e510:	d101      	bne.n	800e516 <__sfputs_r+0x12>
 800e512:	2000      	movs	r0, #0
 800e514:	e007      	b.n	800e526 <__sfputs_r+0x22>
 800e516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e51a:	463a      	mov	r2, r7
 800e51c:	4630      	mov	r0, r6
 800e51e:	f7ff ffda 	bl	800e4d6 <__sfputc_r>
 800e522:	1c43      	adds	r3, r0, #1
 800e524:	d1f3      	bne.n	800e50e <__sfputs_r+0xa>
 800e526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e528 <_vfiprintf_r>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	460d      	mov	r5, r1
 800e52e:	b09d      	sub	sp, #116	; 0x74
 800e530:	4614      	mov	r4, r2
 800e532:	4698      	mov	r8, r3
 800e534:	4606      	mov	r6, r0
 800e536:	b118      	cbz	r0, 800e540 <_vfiprintf_r+0x18>
 800e538:	6983      	ldr	r3, [r0, #24]
 800e53a:	b90b      	cbnz	r3, 800e540 <_vfiprintf_r+0x18>
 800e53c:	f000 fb14 	bl	800eb68 <__sinit>
 800e540:	4b89      	ldr	r3, [pc, #548]	; (800e768 <_vfiprintf_r+0x240>)
 800e542:	429d      	cmp	r5, r3
 800e544:	d11b      	bne.n	800e57e <_vfiprintf_r+0x56>
 800e546:	6875      	ldr	r5, [r6, #4]
 800e548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e54a:	07d9      	lsls	r1, r3, #31
 800e54c:	d405      	bmi.n	800e55a <_vfiprintf_r+0x32>
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	059a      	lsls	r2, r3, #22
 800e552:	d402      	bmi.n	800e55a <_vfiprintf_r+0x32>
 800e554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e556:	f000 fba5 	bl	800eca4 <__retarget_lock_acquire_recursive>
 800e55a:	89ab      	ldrh	r3, [r5, #12]
 800e55c:	071b      	lsls	r3, r3, #28
 800e55e:	d501      	bpl.n	800e564 <_vfiprintf_r+0x3c>
 800e560:	692b      	ldr	r3, [r5, #16]
 800e562:	b9eb      	cbnz	r3, 800e5a0 <_vfiprintf_r+0x78>
 800e564:	4629      	mov	r1, r5
 800e566:	4630      	mov	r0, r6
 800e568:	f000 f96e 	bl	800e848 <__swsetup_r>
 800e56c:	b1c0      	cbz	r0, 800e5a0 <_vfiprintf_r+0x78>
 800e56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e570:	07dc      	lsls	r4, r3, #31
 800e572:	d50e      	bpl.n	800e592 <_vfiprintf_r+0x6a>
 800e574:	f04f 30ff 	mov.w	r0, #4294967295
 800e578:	b01d      	add	sp, #116	; 0x74
 800e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57e:	4b7b      	ldr	r3, [pc, #492]	; (800e76c <_vfiprintf_r+0x244>)
 800e580:	429d      	cmp	r5, r3
 800e582:	d101      	bne.n	800e588 <_vfiprintf_r+0x60>
 800e584:	68b5      	ldr	r5, [r6, #8]
 800e586:	e7df      	b.n	800e548 <_vfiprintf_r+0x20>
 800e588:	4b79      	ldr	r3, [pc, #484]	; (800e770 <_vfiprintf_r+0x248>)
 800e58a:	429d      	cmp	r5, r3
 800e58c:	bf08      	it	eq
 800e58e:	68f5      	ldreq	r5, [r6, #12]
 800e590:	e7da      	b.n	800e548 <_vfiprintf_r+0x20>
 800e592:	89ab      	ldrh	r3, [r5, #12]
 800e594:	0598      	lsls	r0, r3, #22
 800e596:	d4ed      	bmi.n	800e574 <_vfiprintf_r+0x4c>
 800e598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e59a:	f000 fb84 	bl	800eca6 <__retarget_lock_release_recursive>
 800e59e:	e7e9      	b.n	800e574 <_vfiprintf_r+0x4c>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5a4:	2320      	movs	r3, #32
 800e5a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5ae:	2330      	movs	r3, #48	; 0x30
 800e5b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e774 <_vfiprintf_r+0x24c>
 800e5b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5b8:	f04f 0901 	mov.w	r9, #1
 800e5bc:	4623      	mov	r3, r4
 800e5be:	469a      	mov	sl, r3
 800e5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5c4:	b10a      	cbz	r2, 800e5ca <_vfiprintf_r+0xa2>
 800e5c6:	2a25      	cmp	r2, #37	; 0x25
 800e5c8:	d1f9      	bne.n	800e5be <_vfiprintf_r+0x96>
 800e5ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e5ce:	d00b      	beq.n	800e5e8 <_vfiprintf_r+0xc0>
 800e5d0:	465b      	mov	r3, fp
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f7ff ff94 	bl	800e504 <__sfputs_r>
 800e5dc:	3001      	adds	r0, #1
 800e5de:	f000 80aa 	beq.w	800e736 <_vfiprintf_r+0x20e>
 800e5e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5e4:	445a      	add	r2, fp
 800e5e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 80a2 	beq.w	800e736 <_vfiprintf_r+0x20e>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5fc:	f10a 0a01 	add.w	sl, sl, #1
 800e600:	9304      	str	r3, [sp, #16]
 800e602:	9307      	str	r3, [sp, #28]
 800e604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e608:	931a      	str	r3, [sp, #104]	; 0x68
 800e60a:	4654      	mov	r4, sl
 800e60c:	2205      	movs	r2, #5
 800e60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e612:	4858      	ldr	r0, [pc, #352]	; (800e774 <_vfiprintf_r+0x24c>)
 800e614:	f7f1 fdfc 	bl	8000210 <memchr>
 800e618:	9a04      	ldr	r2, [sp, #16]
 800e61a:	b9d8      	cbnz	r0, 800e654 <_vfiprintf_r+0x12c>
 800e61c:	06d1      	lsls	r1, r2, #27
 800e61e:	bf44      	itt	mi
 800e620:	2320      	movmi	r3, #32
 800e622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e626:	0713      	lsls	r3, r2, #28
 800e628:	bf44      	itt	mi
 800e62a:	232b      	movmi	r3, #43	; 0x2b
 800e62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e630:	f89a 3000 	ldrb.w	r3, [sl]
 800e634:	2b2a      	cmp	r3, #42	; 0x2a
 800e636:	d015      	beq.n	800e664 <_vfiprintf_r+0x13c>
 800e638:	9a07      	ldr	r2, [sp, #28]
 800e63a:	4654      	mov	r4, sl
 800e63c:	2000      	movs	r0, #0
 800e63e:	f04f 0c0a 	mov.w	ip, #10
 800e642:	4621      	mov	r1, r4
 800e644:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e648:	3b30      	subs	r3, #48	; 0x30
 800e64a:	2b09      	cmp	r3, #9
 800e64c:	d94e      	bls.n	800e6ec <_vfiprintf_r+0x1c4>
 800e64e:	b1b0      	cbz	r0, 800e67e <_vfiprintf_r+0x156>
 800e650:	9207      	str	r2, [sp, #28]
 800e652:	e014      	b.n	800e67e <_vfiprintf_r+0x156>
 800e654:	eba0 0308 	sub.w	r3, r0, r8
 800e658:	fa09 f303 	lsl.w	r3, r9, r3
 800e65c:	4313      	orrs	r3, r2
 800e65e:	9304      	str	r3, [sp, #16]
 800e660:	46a2      	mov	sl, r4
 800e662:	e7d2      	b.n	800e60a <_vfiprintf_r+0xe2>
 800e664:	9b03      	ldr	r3, [sp, #12]
 800e666:	1d19      	adds	r1, r3, #4
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	9103      	str	r1, [sp, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	bfbb      	ittet	lt
 800e670:	425b      	neglt	r3, r3
 800e672:	f042 0202 	orrlt.w	r2, r2, #2
 800e676:	9307      	strge	r3, [sp, #28]
 800e678:	9307      	strlt	r3, [sp, #28]
 800e67a:	bfb8      	it	lt
 800e67c:	9204      	strlt	r2, [sp, #16]
 800e67e:	7823      	ldrb	r3, [r4, #0]
 800e680:	2b2e      	cmp	r3, #46	; 0x2e
 800e682:	d10c      	bne.n	800e69e <_vfiprintf_r+0x176>
 800e684:	7863      	ldrb	r3, [r4, #1]
 800e686:	2b2a      	cmp	r3, #42	; 0x2a
 800e688:	d135      	bne.n	800e6f6 <_vfiprintf_r+0x1ce>
 800e68a:	9b03      	ldr	r3, [sp, #12]
 800e68c:	1d1a      	adds	r2, r3, #4
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	9203      	str	r2, [sp, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	bfb8      	it	lt
 800e696:	f04f 33ff 	movlt.w	r3, #4294967295
 800e69a:	3402      	adds	r4, #2
 800e69c:	9305      	str	r3, [sp, #20]
 800e69e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e784 <_vfiprintf_r+0x25c>
 800e6a2:	7821      	ldrb	r1, [r4, #0]
 800e6a4:	2203      	movs	r2, #3
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	f7f1 fdb2 	bl	8000210 <memchr>
 800e6ac:	b140      	cbz	r0, 800e6c0 <_vfiprintf_r+0x198>
 800e6ae:	2340      	movs	r3, #64	; 0x40
 800e6b0:	eba0 000a 	sub.w	r0, r0, sl
 800e6b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e6b8:	9b04      	ldr	r3, [sp, #16]
 800e6ba:	4303      	orrs	r3, r0
 800e6bc:	3401      	adds	r4, #1
 800e6be:	9304      	str	r3, [sp, #16]
 800e6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c4:	482c      	ldr	r0, [pc, #176]	; (800e778 <_vfiprintf_r+0x250>)
 800e6c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6ca:	2206      	movs	r2, #6
 800e6cc:	f7f1 fda0 	bl	8000210 <memchr>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d03f      	beq.n	800e754 <_vfiprintf_r+0x22c>
 800e6d4:	4b29      	ldr	r3, [pc, #164]	; (800e77c <_vfiprintf_r+0x254>)
 800e6d6:	bb1b      	cbnz	r3, 800e720 <_vfiprintf_r+0x1f8>
 800e6d8:	9b03      	ldr	r3, [sp, #12]
 800e6da:	3307      	adds	r3, #7
 800e6dc:	f023 0307 	bic.w	r3, r3, #7
 800e6e0:	3308      	adds	r3, #8
 800e6e2:	9303      	str	r3, [sp, #12]
 800e6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6e6:	443b      	add	r3, r7
 800e6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ea:	e767      	b.n	800e5bc <_vfiprintf_r+0x94>
 800e6ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	2001      	movs	r0, #1
 800e6f4:	e7a5      	b.n	800e642 <_vfiprintf_r+0x11a>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	3401      	adds	r4, #1
 800e6fa:	9305      	str	r3, [sp, #20]
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	f04f 0c0a 	mov.w	ip, #10
 800e702:	4620      	mov	r0, r4
 800e704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e708:	3a30      	subs	r2, #48	; 0x30
 800e70a:	2a09      	cmp	r2, #9
 800e70c:	d903      	bls.n	800e716 <_vfiprintf_r+0x1ee>
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0c5      	beq.n	800e69e <_vfiprintf_r+0x176>
 800e712:	9105      	str	r1, [sp, #20]
 800e714:	e7c3      	b.n	800e69e <_vfiprintf_r+0x176>
 800e716:	fb0c 2101 	mla	r1, ip, r1, r2
 800e71a:	4604      	mov	r4, r0
 800e71c:	2301      	movs	r3, #1
 800e71e:	e7f0      	b.n	800e702 <_vfiprintf_r+0x1da>
 800e720:	ab03      	add	r3, sp, #12
 800e722:	9300      	str	r3, [sp, #0]
 800e724:	462a      	mov	r2, r5
 800e726:	4b16      	ldr	r3, [pc, #88]	; (800e780 <_vfiprintf_r+0x258>)
 800e728:	a904      	add	r1, sp, #16
 800e72a:	4630      	mov	r0, r6
 800e72c:	f7fd fde6 	bl	800c2fc <_printf_float>
 800e730:	4607      	mov	r7, r0
 800e732:	1c78      	adds	r0, r7, #1
 800e734:	d1d6      	bne.n	800e6e4 <_vfiprintf_r+0x1bc>
 800e736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e738:	07d9      	lsls	r1, r3, #31
 800e73a:	d405      	bmi.n	800e748 <_vfiprintf_r+0x220>
 800e73c:	89ab      	ldrh	r3, [r5, #12]
 800e73e:	059a      	lsls	r2, r3, #22
 800e740:	d402      	bmi.n	800e748 <_vfiprintf_r+0x220>
 800e742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e744:	f000 faaf 	bl	800eca6 <__retarget_lock_release_recursive>
 800e748:	89ab      	ldrh	r3, [r5, #12]
 800e74a:	065b      	lsls	r3, r3, #25
 800e74c:	f53f af12 	bmi.w	800e574 <_vfiprintf_r+0x4c>
 800e750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e752:	e711      	b.n	800e578 <_vfiprintf_r+0x50>
 800e754:	ab03      	add	r3, sp, #12
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	462a      	mov	r2, r5
 800e75a:	4b09      	ldr	r3, [pc, #36]	; (800e780 <_vfiprintf_r+0x258>)
 800e75c:	a904      	add	r1, sp, #16
 800e75e:	4630      	mov	r0, r6
 800e760:	f7fe f870 	bl	800c844 <_printf_i>
 800e764:	e7e4      	b.n	800e730 <_vfiprintf_r+0x208>
 800e766:	bf00      	nop
 800e768:	08010d34 	.word	0x08010d34
 800e76c:	08010d54 	.word	0x08010d54
 800e770:	08010d14 	.word	0x08010d14
 800e774:	08010bbc 	.word	0x08010bbc
 800e778:	08010bc6 	.word	0x08010bc6
 800e77c:	0800c2fd 	.word	0x0800c2fd
 800e780:	0800e505 	.word	0x0800e505
 800e784:	08010bc2 	.word	0x08010bc2

0800e788 <__swbuf_r>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	460e      	mov	r6, r1
 800e78c:	4614      	mov	r4, r2
 800e78e:	4605      	mov	r5, r0
 800e790:	b118      	cbz	r0, 800e79a <__swbuf_r+0x12>
 800e792:	6983      	ldr	r3, [r0, #24]
 800e794:	b90b      	cbnz	r3, 800e79a <__swbuf_r+0x12>
 800e796:	f000 f9e7 	bl	800eb68 <__sinit>
 800e79a:	4b21      	ldr	r3, [pc, #132]	; (800e820 <__swbuf_r+0x98>)
 800e79c:	429c      	cmp	r4, r3
 800e79e:	d12b      	bne.n	800e7f8 <__swbuf_r+0x70>
 800e7a0:	686c      	ldr	r4, [r5, #4]
 800e7a2:	69a3      	ldr	r3, [r4, #24]
 800e7a4:	60a3      	str	r3, [r4, #8]
 800e7a6:	89a3      	ldrh	r3, [r4, #12]
 800e7a8:	071a      	lsls	r2, r3, #28
 800e7aa:	d52f      	bpl.n	800e80c <__swbuf_r+0x84>
 800e7ac:	6923      	ldr	r3, [r4, #16]
 800e7ae:	b36b      	cbz	r3, 800e80c <__swbuf_r+0x84>
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	6820      	ldr	r0, [r4, #0]
 800e7b4:	1ac0      	subs	r0, r0, r3
 800e7b6:	6963      	ldr	r3, [r4, #20]
 800e7b8:	b2f6      	uxtb	r6, r6
 800e7ba:	4283      	cmp	r3, r0
 800e7bc:	4637      	mov	r7, r6
 800e7be:	dc04      	bgt.n	800e7ca <__swbuf_r+0x42>
 800e7c0:	4621      	mov	r1, r4
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f000 f93c 	bl	800ea40 <_fflush_r>
 800e7c8:	bb30      	cbnz	r0, 800e818 <__swbuf_r+0x90>
 800e7ca:	68a3      	ldr	r3, [r4, #8]
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	60a3      	str	r3, [r4, #8]
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	6022      	str	r2, [r4, #0]
 800e7d6:	701e      	strb	r6, [r3, #0]
 800e7d8:	6963      	ldr	r3, [r4, #20]
 800e7da:	3001      	adds	r0, #1
 800e7dc:	4283      	cmp	r3, r0
 800e7de:	d004      	beq.n	800e7ea <__swbuf_r+0x62>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	07db      	lsls	r3, r3, #31
 800e7e4:	d506      	bpl.n	800e7f4 <__swbuf_r+0x6c>
 800e7e6:	2e0a      	cmp	r6, #10
 800e7e8:	d104      	bne.n	800e7f4 <__swbuf_r+0x6c>
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f000 f927 	bl	800ea40 <_fflush_r>
 800e7f2:	b988      	cbnz	r0, 800e818 <__swbuf_r+0x90>
 800e7f4:	4638      	mov	r0, r7
 800e7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f8:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <__swbuf_r+0x9c>)
 800e7fa:	429c      	cmp	r4, r3
 800e7fc:	d101      	bne.n	800e802 <__swbuf_r+0x7a>
 800e7fe:	68ac      	ldr	r4, [r5, #8]
 800e800:	e7cf      	b.n	800e7a2 <__swbuf_r+0x1a>
 800e802:	4b09      	ldr	r3, [pc, #36]	; (800e828 <__swbuf_r+0xa0>)
 800e804:	429c      	cmp	r4, r3
 800e806:	bf08      	it	eq
 800e808:	68ec      	ldreq	r4, [r5, #12]
 800e80a:	e7ca      	b.n	800e7a2 <__swbuf_r+0x1a>
 800e80c:	4621      	mov	r1, r4
 800e80e:	4628      	mov	r0, r5
 800e810:	f000 f81a 	bl	800e848 <__swsetup_r>
 800e814:	2800      	cmp	r0, #0
 800e816:	d0cb      	beq.n	800e7b0 <__swbuf_r+0x28>
 800e818:	f04f 37ff 	mov.w	r7, #4294967295
 800e81c:	e7ea      	b.n	800e7f4 <__swbuf_r+0x6c>
 800e81e:	bf00      	nop
 800e820:	08010d34 	.word	0x08010d34
 800e824:	08010d54 	.word	0x08010d54
 800e828:	08010d14 	.word	0x08010d14

0800e82c <__ascii_wctomb>:
 800e82c:	b149      	cbz	r1, 800e842 <__ascii_wctomb+0x16>
 800e82e:	2aff      	cmp	r2, #255	; 0xff
 800e830:	bf85      	ittet	hi
 800e832:	238a      	movhi	r3, #138	; 0x8a
 800e834:	6003      	strhi	r3, [r0, #0]
 800e836:	700a      	strbls	r2, [r1, #0]
 800e838:	f04f 30ff 	movhi.w	r0, #4294967295
 800e83c:	bf98      	it	ls
 800e83e:	2001      	movls	r0, #1
 800e840:	4770      	bx	lr
 800e842:	4608      	mov	r0, r1
 800e844:	4770      	bx	lr
	...

0800e848 <__swsetup_r>:
 800e848:	4b32      	ldr	r3, [pc, #200]	; (800e914 <__swsetup_r+0xcc>)
 800e84a:	b570      	push	{r4, r5, r6, lr}
 800e84c:	681d      	ldr	r5, [r3, #0]
 800e84e:	4606      	mov	r6, r0
 800e850:	460c      	mov	r4, r1
 800e852:	b125      	cbz	r5, 800e85e <__swsetup_r+0x16>
 800e854:	69ab      	ldr	r3, [r5, #24]
 800e856:	b913      	cbnz	r3, 800e85e <__swsetup_r+0x16>
 800e858:	4628      	mov	r0, r5
 800e85a:	f000 f985 	bl	800eb68 <__sinit>
 800e85e:	4b2e      	ldr	r3, [pc, #184]	; (800e918 <__swsetup_r+0xd0>)
 800e860:	429c      	cmp	r4, r3
 800e862:	d10f      	bne.n	800e884 <__swsetup_r+0x3c>
 800e864:	686c      	ldr	r4, [r5, #4]
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e86c:	0719      	lsls	r1, r3, #28
 800e86e:	d42c      	bmi.n	800e8ca <__swsetup_r+0x82>
 800e870:	06dd      	lsls	r5, r3, #27
 800e872:	d411      	bmi.n	800e898 <__swsetup_r+0x50>
 800e874:	2309      	movs	r3, #9
 800e876:	6033      	str	r3, [r6, #0]
 800e878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e87c:	81a3      	strh	r3, [r4, #12]
 800e87e:	f04f 30ff 	mov.w	r0, #4294967295
 800e882:	e03e      	b.n	800e902 <__swsetup_r+0xba>
 800e884:	4b25      	ldr	r3, [pc, #148]	; (800e91c <__swsetup_r+0xd4>)
 800e886:	429c      	cmp	r4, r3
 800e888:	d101      	bne.n	800e88e <__swsetup_r+0x46>
 800e88a:	68ac      	ldr	r4, [r5, #8]
 800e88c:	e7eb      	b.n	800e866 <__swsetup_r+0x1e>
 800e88e:	4b24      	ldr	r3, [pc, #144]	; (800e920 <__swsetup_r+0xd8>)
 800e890:	429c      	cmp	r4, r3
 800e892:	bf08      	it	eq
 800e894:	68ec      	ldreq	r4, [r5, #12]
 800e896:	e7e6      	b.n	800e866 <__swsetup_r+0x1e>
 800e898:	0758      	lsls	r0, r3, #29
 800e89a:	d512      	bpl.n	800e8c2 <__swsetup_r+0x7a>
 800e89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e89e:	b141      	cbz	r1, 800e8b2 <__swsetup_r+0x6a>
 800e8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8a4:	4299      	cmp	r1, r3
 800e8a6:	d002      	beq.n	800e8ae <__swsetup_r+0x66>
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7ff fb31 	bl	800df10 <_free_r>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	6363      	str	r3, [r4, #52]	; 0x34
 800e8b2:	89a3      	ldrh	r3, [r4, #12]
 800e8b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8b8:	81a3      	strh	r3, [r4, #12]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	6063      	str	r3, [r4, #4]
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	f043 0308 	orr.w	r3, r3, #8
 800e8c8:	81a3      	strh	r3, [r4, #12]
 800e8ca:	6923      	ldr	r3, [r4, #16]
 800e8cc:	b94b      	cbnz	r3, 800e8e2 <__swsetup_r+0x9a>
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8d8:	d003      	beq.n	800e8e2 <__swsetup_r+0x9a>
 800e8da:	4621      	mov	r1, r4
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f000 fa09 	bl	800ecf4 <__smakebuf_r>
 800e8e2:	89a0      	ldrh	r0, [r4, #12]
 800e8e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8e8:	f010 0301 	ands.w	r3, r0, #1
 800e8ec:	d00a      	beq.n	800e904 <__swsetup_r+0xbc>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	60a3      	str	r3, [r4, #8]
 800e8f2:	6963      	ldr	r3, [r4, #20]
 800e8f4:	425b      	negs	r3, r3
 800e8f6:	61a3      	str	r3, [r4, #24]
 800e8f8:	6923      	ldr	r3, [r4, #16]
 800e8fa:	b943      	cbnz	r3, 800e90e <__swsetup_r+0xc6>
 800e8fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e900:	d1ba      	bne.n	800e878 <__swsetup_r+0x30>
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	0781      	lsls	r1, r0, #30
 800e906:	bf58      	it	pl
 800e908:	6963      	ldrpl	r3, [r4, #20]
 800e90a:	60a3      	str	r3, [r4, #8]
 800e90c:	e7f4      	b.n	800e8f8 <__swsetup_r+0xb0>
 800e90e:	2000      	movs	r0, #0
 800e910:	e7f7      	b.n	800e902 <__swsetup_r+0xba>
 800e912:	bf00      	nop
 800e914:	20000010 	.word	0x20000010
 800e918:	08010d34 	.word	0x08010d34
 800e91c:	08010d54 	.word	0x08010d54
 800e920:	08010d14 	.word	0x08010d14

0800e924 <abort>:
 800e924:	b508      	push	{r3, lr}
 800e926:	2006      	movs	r0, #6
 800e928:	f000 fa54 	bl	800edd4 <raise>
 800e92c:	2001      	movs	r0, #1
 800e92e:	f7f6 fa67 	bl	8004e00 <_exit>
	...

0800e934 <__sflush_r>:
 800e934:	898a      	ldrh	r2, [r1, #12]
 800e936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93a:	4605      	mov	r5, r0
 800e93c:	0710      	lsls	r0, r2, #28
 800e93e:	460c      	mov	r4, r1
 800e940:	d458      	bmi.n	800e9f4 <__sflush_r+0xc0>
 800e942:	684b      	ldr	r3, [r1, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	dc05      	bgt.n	800e954 <__sflush_r+0x20>
 800e948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	dc02      	bgt.n	800e954 <__sflush_r+0x20>
 800e94e:	2000      	movs	r0, #0
 800e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e956:	2e00      	cmp	r6, #0
 800e958:	d0f9      	beq.n	800e94e <__sflush_r+0x1a>
 800e95a:	2300      	movs	r3, #0
 800e95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e960:	682f      	ldr	r7, [r5, #0]
 800e962:	602b      	str	r3, [r5, #0]
 800e964:	d032      	beq.n	800e9cc <__sflush_r+0x98>
 800e966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e968:	89a3      	ldrh	r3, [r4, #12]
 800e96a:	075a      	lsls	r2, r3, #29
 800e96c:	d505      	bpl.n	800e97a <__sflush_r+0x46>
 800e96e:	6863      	ldr	r3, [r4, #4]
 800e970:	1ac0      	subs	r0, r0, r3
 800e972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e974:	b10b      	cbz	r3, 800e97a <__sflush_r+0x46>
 800e976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e978:	1ac0      	subs	r0, r0, r3
 800e97a:	2300      	movs	r3, #0
 800e97c:	4602      	mov	r2, r0
 800e97e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e980:	6a21      	ldr	r1, [r4, #32]
 800e982:	4628      	mov	r0, r5
 800e984:	47b0      	blx	r6
 800e986:	1c43      	adds	r3, r0, #1
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	d106      	bne.n	800e99a <__sflush_r+0x66>
 800e98c:	6829      	ldr	r1, [r5, #0]
 800e98e:	291d      	cmp	r1, #29
 800e990:	d82c      	bhi.n	800e9ec <__sflush_r+0xb8>
 800e992:	4a2a      	ldr	r2, [pc, #168]	; (800ea3c <__sflush_r+0x108>)
 800e994:	40ca      	lsrs	r2, r1
 800e996:	07d6      	lsls	r6, r2, #31
 800e998:	d528      	bpl.n	800e9ec <__sflush_r+0xb8>
 800e99a:	2200      	movs	r2, #0
 800e99c:	6062      	str	r2, [r4, #4]
 800e99e:	04d9      	lsls	r1, r3, #19
 800e9a0:	6922      	ldr	r2, [r4, #16]
 800e9a2:	6022      	str	r2, [r4, #0]
 800e9a4:	d504      	bpl.n	800e9b0 <__sflush_r+0x7c>
 800e9a6:	1c42      	adds	r2, r0, #1
 800e9a8:	d101      	bne.n	800e9ae <__sflush_r+0x7a>
 800e9aa:	682b      	ldr	r3, [r5, #0]
 800e9ac:	b903      	cbnz	r3, 800e9b0 <__sflush_r+0x7c>
 800e9ae:	6560      	str	r0, [r4, #84]	; 0x54
 800e9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9b2:	602f      	str	r7, [r5, #0]
 800e9b4:	2900      	cmp	r1, #0
 800e9b6:	d0ca      	beq.n	800e94e <__sflush_r+0x1a>
 800e9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	d002      	beq.n	800e9c6 <__sflush_r+0x92>
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	f7ff faa5 	bl	800df10 <_free_r>
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	6360      	str	r0, [r4, #52]	; 0x34
 800e9ca:	e7c1      	b.n	800e950 <__sflush_r+0x1c>
 800e9cc:	6a21      	ldr	r1, [r4, #32]
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	47b0      	blx	r6
 800e9d4:	1c41      	adds	r1, r0, #1
 800e9d6:	d1c7      	bne.n	800e968 <__sflush_r+0x34>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0c4      	beq.n	800e968 <__sflush_r+0x34>
 800e9de:	2b1d      	cmp	r3, #29
 800e9e0:	d001      	beq.n	800e9e6 <__sflush_r+0xb2>
 800e9e2:	2b16      	cmp	r3, #22
 800e9e4:	d101      	bne.n	800e9ea <__sflush_r+0xb6>
 800e9e6:	602f      	str	r7, [r5, #0]
 800e9e8:	e7b1      	b.n	800e94e <__sflush_r+0x1a>
 800e9ea:	89a3      	ldrh	r3, [r4, #12]
 800e9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f0:	81a3      	strh	r3, [r4, #12]
 800e9f2:	e7ad      	b.n	800e950 <__sflush_r+0x1c>
 800e9f4:	690f      	ldr	r7, [r1, #16]
 800e9f6:	2f00      	cmp	r7, #0
 800e9f8:	d0a9      	beq.n	800e94e <__sflush_r+0x1a>
 800e9fa:	0793      	lsls	r3, r2, #30
 800e9fc:	680e      	ldr	r6, [r1, #0]
 800e9fe:	bf08      	it	eq
 800ea00:	694b      	ldreq	r3, [r1, #20]
 800ea02:	600f      	str	r7, [r1, #0]
 800ea04:	bf18      	it	ne
 800ea06:	2300      	movne	r3, #0
 800ea08:	eba6 0807 	sub.w	r8, r6, r7
 800ea0c:	608b      	str	r3, [r1, #8]
 800ea0e:	f1b8 0f00 	cmp.w	r8, #0
 800ea12:	dd9c      	ble.n	800e94e <__sflush_r+0x1a>
 800ea14:	6a21      	ldr	r1, [r4, #32]
 800ea16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea18:	4643      	mov	r3, r8
 800ea1a:	463a      	mov	r2, r7
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	47b0      	blx	r6
 800ea20:	2800      	cmp	r0, #0
 800ea22:	dc06      	bgt.n	800ea32 <__sflush_r+0xfe>
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2a:	81a3      	strh	r3, [r4, #12]
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea30:	e78e      	b.n	800e950 <__sflush_r+0x1c>
 800ea32:	4407      	add	r7, r0
 800ea34:	eba8 0800 	sub.w	r8, r8, r0
 800ea38:	e7e9      	b.n	800ea0e <__sflush_r+0xda>
 800ea3a:	bf00      	nop
 800ea3c:	20400001 	.word	0x20400001

0800ea40 <_fflush_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	690b      	ldr	r3, [r1, #16]
 800ea44:	4605      	mov	r5, r0
 800ea46:	460c      	mov	r4, r1
 800ea48:	b913      	cbnz	r3, 800ea50 <_fflush_r+0x10>
 800ea4a:	2500      	movs	r5, #0
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}
 800ea50:	b118      	cbz	r0, 800ea5a <_fflush_r+0x1a>
 800ea52:	6983      	ldr	r3, [r0, #24]
 800ea54:	b90b      	cbnz	r3, 800ea5a <_fflush_r+0x1a>
 800ea56:	f000 f887 	bl	800eb68 <__sinit>
 800ea5a:	4b14      	ldr	r3, [pc, #80]	; (800eaac <_fflush_r+0x6c>)
 800ea5c:	429c      	cmp	r4, r3
 800ea5e:	d11b      	bne.n	800ea98 <_fflush_r+0x58>
 800ea60:	686c      	ldr	r4, [r5, #4]
 800ea62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d0ef      	beq.n	800ea4a <_fflush_r+0xa>
 800ea6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea6c:	07d0      	lsls	r0, r2, #31
 800ea6e:	d404      	bmi.n	800ea7a <_fflush_r+0x3a>
 800ea70:	0599      	lsls	r1, r3, #22
 800ea72:	d402      	bmi.n	800ea7a <_fflush_r+0x3a>
 800ea74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea76:	f000 f915 	bl	800eca4 <__retarget_lock_acquire_recursive>
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	4621      	mov	r1, r4
 800ea7e:	f7ff ff59 	bl	800e934 <__sflush_r>
 800ea82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea84:	07da      	lsls	r2, r3, #31
 800ea86:	4605      	mov	r5, r0
 800ea88:	d4e0      	bmi.n	800ea4c <_fflush_r+0xc>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	059b      	lsls	r3, r3, #22
 800ea8e:	d4dd      	bmi.n	800ea4c <_fflush_r+0xc>
 800ea90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea92:	f000 f908 	bl	800eca6 <__retarget_lock_release_recursive>
 800ea96:	e7d9      	b.n	800ea4c <_fflush_r+0xc>
 800ea98:	4b05      	ldr	r3, [pc, #20]	; (800eab0 <_fflush_r+0x70>)
 800ea9a:	429c      	cmp	r4, r3
 800ea9c:	d101      	bne.n	800eaa2 <_fflush_r+0x62>
 800ea9e:	68ac      	ldr	r4, [r5, #8]
 800eaa0:	e7df      	b.n	800ea62 <_fflush_r+0x22>
 800eaa2:	4b04      	ldr	r3, [pc, #16]	; (800eab4 <_fflush_r+0x74>)
 800eaa4:	429c      	cmp	r4, r3
 800eaa6:	bf08      	it	eq
 800eaa8:	68ec      	ldreq	r4, [r5, #12]
 800eaaa:	e7da      	b.n	800ea62 <_fflush_r+0x22>
 800eaac:	08010d34 	.word	0x08010d34
 800eab0:	08010d54 	.word	0x08010d54
 800eab4:	08010d14 	.word	0x08010d14

0800eab8 <std>:
 800eab8:	2300      	movs	r3, #0
 800eaba:	b510      	push	{r4, lr}
 800eabc:	4604      	mov	r4, r0
 800eabe:	e9c0 3300 	strd	r3, r3, [r0]
 800eac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eac6:	6083      	str	r3, [r0, #8]
 800eac8:	8181      	strh	r1, [r0, #12]
 800eaca:	6643      	str	r3, [r0, #100]	; 0x64
 800eacc:	81c2      	strh	r2, [r0, #14]
 800eace:	6183      	str	r3, [r0, #24]
 800ead0:	4619      	mov	r1, r3
 800ead2:	2208      	movs	r2, #8
 800ead4:	305c      	adds	r0, #92	; 0x5c
 800ead6:	f7fd fb69 	bl	800c1ac <memset>
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <std+0x38>)
 800eadc:	6263      	str	r3, [r4, #36]	; 0x24
 800eade:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <std+0x3c>)
 800eae0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <std+0x40>)
 800eae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eae6:	4b05      	ldr	r3, [pc, #20]	; (800eafc <std+0x44>)
 800eae8:	6224      	str	r4, [r4, #32]
 800eaea:	6323      	str	r3, [r4, #48]	; 0x30
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop
 800eaf0:	0800ee0d 	.word	0x0800ee0d
 800eaf4:	0800ee2f 	.word	0x0800ee2f
 800eaf8:	0800ee67 	.word	0x0800ee67
 800eafc:	0800ee8b 	.word	0x0800ee8b

0800eb00 <_cleanup_r>:
 800eb00:	4901      	ldr	r1, [pc, #4]	; (800eb08 <_cleanup_r+0x8>)
 800eb02:	f000 b8af 	b.w	800ec64 <_fwalk_reent>
 800eb06:	bf00      	nop
 800eb08:	0800ea41 	.word	0x0800ea41

0800eb0c <__sfmoreglue>:
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	2268      	movs	r2, #104	; 0x68
 800eb10:	1e4d      	subs	r5, r1, #1
 800eb12:	4355      	muls	r5, r2
 800eb14:	460e      	mov	r6, r1
 800eb16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb1a:	f7ff fa65 	bl	800dfe8 <_malloc_r>
 800eb1e:	4604      	mov	r4, r0
 800eb20:	b140      	cbz	r0, 800eb34 <__sfmoreglue+0x28>
 800eb22:	2100      	movs	r1, #0
 800eb24:	e9c0 1600 	strd	r1, r6, [r0]
 800eb28:	300c      	adds	r0, #12
 800eb2a:	60a0      	str	r0, [r4, #8]
 800eb2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb30:	f7fd fb3c 	bl	800c1ac <memset>
 800eb34:	4620      	mov	r0, r4
 800eb36:	bd70      	pop	{r4, r5, r6, pc}

0800eb38 <__sfp_lock_acquire>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sfp_lock_acquire+0x8>)
 800eb3a:	f000 b8b3 	b.w	800eca4 <__retarget_lock_acquire_recursive>
 800eb3e:	bf00      	nop
 800eb40:	200061bd 	.word	0x200061bd

0800eb44 <__sfp_lock_release>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__sfp_lock_release+0x8>)
 800eb46:	f000 b8ae 	b.w	800eca6 <__retarget_lock_release_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	200061bd 	.word	0x200061bd

0800eb50 <__sinit_lock_acquire>:
 800eb50:	4801      	ldr	r0, [pc, #4]	; (800eb58 <__sinit_lock_acquire+0x8>)
 800eb52:	f000 b8a7 	b.w	800eca4 <__retarget_lock_acquire_recursive>
 800eb56:	bf00      	nop
 800eb58:	200061be 	.word	0x200061be

0800eb5c <__sinit_lock_release>:
 800eb5c:	4801      	ldr	r0, [pc, #4]	; (800eb64 <__sinit_lock_release+0x8>)
 800eb5e:	f000 b8a2 	b.w	800eca6 <__retarget_lock_release_recursive>
 800eb62:	bf00      	nop
 800eb64:	200061be 	.word	0x200061be

0800eb68 <__sinit>:
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	f7ff fff0 	bl	800eb50 <__sinit_lock_acquire>
 800eb70:	69a3      	ldr	r3, [r4, #24]
 800eb72:	b11b      	cbz	r3, 800eb7c <__sinit+0x14>
 800eb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb78:	f7ff bff0 	b.w	800eb5c <__sinit_lock_release>
 800eb7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb80:	6523      	str	r3, [r4, #80]	; 0x50
 800eb82:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <__sinit+0x68>)
 800eb84:	4a13      	ldr	r2, [pc, #76]	; (800ebd4 <__sinit+0x6c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb8a:	42a3      	cmp	r3, r4
 800eb8c:	bf04      	itt	eq
 800eb8e:	2301      	moveq	r3, #1
 800eb90:	61a3      	streq	r3, [r4, #24]
 800eb92:	4620      	mov	r0, r4
 800eb94:	f000 f820 	bl	800ebd8 <__sfp>
 800eb98:	6060      	str	r0, [r4, #4]
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f000 f81c 	bl	800ebd8 <__sfp>
 800eba0:	60a0      	str	r0, [r4, #8]
 800eba2:	4620      	mov	r0, r4
 800eba4:	f000 f818 	bl	800ebd8 <__sfp>
 800eba8:	2200      	movs	r2, #0
 800ebaa:	60e0      	str	r0, [r4, #12]
 800ebac:	2104      	movs	r1, #4
 800ebae:	6860      	ldr	r0, [r4, #4]
 800ebb0:	f7ff ff82 	bl	800eab8 <std>
 800ebb4:	68a0      	ldr	r0, [r4, #8]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	2109      	movs	r1, #9
 800ebba:	f7ff ff7d 	bl	800eab8 <std>
 800ebbe:	68e0      	ldr	r0, [r4, #12]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	2112      	movs	r1, #18
 800ebc4:	f7ff ff78 	bl	800eab8 <std>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	61a3      	str	r3, [r4, #24]
 800ebcc:	e7d2      	b.n	800eb74 <__sinit+0xc>
 800ebce:	bf00      	nop
 800ebd0:	0801099c 	.word	0x0801099c
 800ebd4:	0800eb01 	.word	0x0800eb01

0800ebd8 <__sfp>:
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	4607      	mov	r7, r0
 800ebdc:	f7ff ffac 	bl	800eb38 <__sfp_lock_acquire>
 800ebe0:	4b1e      	ldr	r3, [pc, #120]	; (800ec5c <__sfp+0x84>)
 800ebe2:	681e      	ldr	r6, [r3, #0]
 800ebe4:	69b3      	ldr	r3, [r6, #24]
 800ebe6:	b913      	cbnz	r3, 800ebee <__sfp+0x16>
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f7ff ffbd 	bl	800eb68 <__sinit>
 800ebee:	3648      	adds	r6, #72	; 0x48
 800ebf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	d503      	bpl.n	800ec00 <__sfp+0x28>
 800ebf8:	6833      	ldr	r3, [r6, #0]
 800ebfa:	b30b      	cbz	r3, 800ec40 <__sfp+0x68>
 800ebfc:	6836      	ldr	r6, [r6, #0]
 800ebfe:	e7f7      	b.n	800ebf0 <__sfp+0x18>
 800ec00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec04:	b9d5      	cbnz	r5, 800ec3c <__sfp+0x64>
 800ec06:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <__sfp+0x88>)
 800ec08:	60e3      	str	r3, [r4, #12]
 800ec0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ec10:	f000 f847 	bl	800eca2 <__retarget_lock_init_recursive>
 800ec14:	f7ff ff96 	bl	800eb44 <__sfp_lock_release>
 800ec18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec20:	6025      	str	r5, [r4, #0]
 800ec22:	61a5      	str	r5, [r4, #24]
 800ec24:	2208      	movs	r2, #8
 800ec26:	4629      	mov	r1, r5
 800ec28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec2c:	f7fd fabe 	bl	800c1ac <memset>
 800ec30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec38:	4620      	mov	r0, r4
 800ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec3c:	3468      	adds	r4, #104	; 0x68
 800ec3e:	e7d9      	b.n	800ebf4 <__sfp+0x1c>
 800ec40:	2104      	movs	r1, #4
 800ec42:	4638      	mov	r0, r7
 800ec44:	f7ff ff62 	bl	800eb0c <__sfmoreglue>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	6030      	str	r0, [r6, #0]
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d1d5      	bne.n	800ebfc <__sfp+0x24>
 800ec50:	f7ff ff78 	bl	800eb44 <__sfp_lock_release>
 800ec54:	230c      	movs	r3, #12
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	e7ee      	b.n	800ec38 <__sfp+0x60>
 800ec5a:	bf00      	nop
 800ec5c:	0801099c 	.word	0x0801099c
 800ec60:	ffff0001 	.word	0xffff0001

0800ec64 <_fwalk_reent>:
 800ec64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec68:	4606      	mov	r6, r0
 800ec6a:	4688      	mov	r8, r1
 800ec6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec70:	2700      	movs	r7, #0
 800ec72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec76:	f1b9 0901 	subs.w	r9, r9, #1
 800ec7a:	d505      	bpl.n	800ec88 <_fwalk_reent+0x24>
 800ec7c:	6824      	ldr	r4, [r4, #0]
 800ec7e:	2c00      	cmp	r4, #0
 800ec80:	d1f7      	bne.n	800ec72 <_fwalk_reent+0xe>
 800ec82:	4638      	mov	r0, r7
 800ec84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec88:	89ab      	ldrh	r3, [r5, #12]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d907      	bls.n	800ec9e <_fwalk_reent+0x3a>
 800ec8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec92:	3301      	adds	r3, #1
 800ec94:	d003      	beq.n	800ec9e <_fwalk_reent+0x3a>
 800ec96:	4629      	mov	r1, r5
 800ec98:	4630      	mov	r0, r6
 800ec9a:	47c0      	blx	r8
 800ec9c:	4307      	orrs	r7, r0
 800ec9e:	3568      	adds	r5, #104	; 0x68
 800eca0:	e7e9      	b.n	800ec76 <_fwalk_reent+0x12>

0800eca2 <__retarget_lock_init_recursive>:
 800eca2:	4770      	bx	lr

0800eca4 <__retarget_lock_acquire_recursive>:
 800eca4:	4770      	bx	lr

0800eca6 <__retarget_lock_release_recursive>:
 800eca6:	4770      	bx	lr

0800eca8 <__swhatbuf_r>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	460e      	mov	r6, r1
 800ecac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb0:	2900      	cmp	r1, #0
 800ecb2:	b096      	sub	sp, #88	; 0x58
 800ecb4:	4614      	mov	r4, r2
 800ecb6:	461d      	mov	r5, r3
 800ecb8:	da08      	bge.n	800eccc <__swhatbuf_r+0x24>
 800ecba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	602a      	str	r2, [r5, #0]
 800ecc2:	061a      	lsls	r2, r3, #24
 800ecc4:	d410      	bmi.n	800ece8 <__swhatbuf_r+0x40>
 800ecc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecca:	e00e      	b.n	800ecea <__swhatbuf_r+0x42>
 800eccc:	466a      	mov	r2, sp
 800ecce:	f000 f903 	bl	800eed8 <_fstat_r>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	dbf1      	blt.n	800ecba <__swhatbuf_r+0x12>
 800ecd6:	9a01      	ldr	r2, [sp, #4]
 800ecd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ecdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ece0:	425a      	negs	r2, r3
 800ece2:	415a      	adcs	r2, r3
 800ece4:	602a      	str	r2, [r5, #0]
 800ece6:	e7ee      	b.n	800ecc6 <__swhatbuf_r+0x1e>
 800ece8:	2340      	movs	r3, #64	; 0x40
 800ecea:	2000      	movs	r0, #0
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	b016      	add	sp, #88	; 0x58
 800ecf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ecf4 <__smakebuf_r>:
 800ecf4:	898b      	ldrh	r3, [r1, #12]
 800ecf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecf8:	079d      	lsls	r5, r3, #30
 800ecfa:	4606      	mov	r6, r0
 800ecfc:	460c      	mov	r4, r1
 800ecfe:	d507      	bpl.n	800ed10 <__smakebuf_r+0x1c>
 800ed00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed04:	6023      	str	r3, [r4, #0]
 800ed06:	6123      	str	r3, [r4, #16]
 800ed08:	2301      	movs	r3, #1
 800ed0a:	6163      	str	r3, [r4, #20]
 800ed0c:	b002      	add	sp, #8
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
 800ed10:	ab01      	add	r3, sp, #4
 800ed12:	466a      	mov	r2, sp
 800ed14:	f7ff ffc8 	bl	800eca8 <__swhatbuf_r>
 800ed18:	9900      	ldr	r1, [sp, #0]
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f7ff f963 	bl	800dfe8 <_malloc_r>
 800ed22:	b948      	cbnz	r0, 800ed38 <__smakebuf_r+0x44>
 800ed24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed28:	059a      	lsls	r2, r3, #22
 800ed2a:	d4ef      	bmi.n	800ed0c <__smakebuf_r+0x18>
 800ed2c:	f023 0303 	bic.w	r3, r3, #3
 800ed30:	f043 0302 	orr.w	r3, r3, #2
 800ed34:	81a3      	strh	r3, [r4, #12]
 800ed36:	e7e3      	b.n	800ed00 <__smakebuf_r+0xc>
 800ed38:	4b0d      	ldr	r3, [pc, #52]	; (800ed70 <__smakebuf_r+0x7c>)
 800ed3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	6020      	str	r0, [r4, #0]
 800ed40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed44:	81a3      	strh	r3, [r4, #12]
 800ed46:	9b00      	ldr	r3, [sp, #0]
 800ed48:	6163      	str	r3, [r4, #20]
 800ed4a:	9b01      	ldr	r3, [sp, #4]
 800ed4c:	6120      	str	r0, [r4, #16]
 800ed4e:	b15b      	cbz	r3, 800ed68 <__smakebuf_r+0x74>
 800ed50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed54:	4630      	mov	r0, r6
 800ed56:	f000 f8d1 	bl	800eefc <_isatty_r>
 800ed5a:	b128      	cbz	r0, 800ed68 <__smakebuf_r+0x74>
 800ed5c:	89a3      	ldrh	r3, [r4, #12]
 800ed5e:	f023 0303 	bic.w	r3, r3, #3
 800ed62:	f043 0301 	orr.w	r3, r3, #1
 800ed66:	81a3      	strh	r3, [r4, #12]
 800ed68:	89a0      	ldrh	r0, [r4, #12]
 800ed6a:	4305      	orrs	r5, r0
 800ed6c:	81a5      	strh	r5, [r4, #12]
 800ed6e:	e7cd      	b.n	800ed0c <__smakebuf_r+0x18>
 800ed70:	0800eb01 	.word	0x0800eb01

0800ed74 <_malloc_usable_size_r>:
 800ed74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed78:	1f18      	subs	r0, r3, #4
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	bfbc      	itt	lt
 800ed7e:	580b      	ldrlt	r3, [r1, r0]
 800ed80:	18c0      	addlt	r0, r0, r3
 800ed82:	4770      	bx	lr

0800ed84 <_raise_r>:
 800ed84:	291f      	cmp	r1, #31
 800ed86:	b538      	push	{r3, r4, r5, lr}
 800ed88:	4604      	mov	r4, r0
 800ed8a:	460d      	mov	r5, r1
 800ed8c:	d904      	bls.n	800ed98 <_raise_r+0x14>
 800ed8e:	2316      	movs	r3, #22
 800ed90:	6003      	str	r3, [r0, #0]
 800ed92:	f04f 30ff 	mov.w	r0, #4294967295
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ed9a:	b112      	cbz	r2, 800eda2 <_raise_r+0x1e>
 800ed9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eda0:	b94b      	cbnz	r3, 800edb6 <_raise_r+0x32>
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 f830 	bl	800ee08 <_getpid_r>
 800eda8:	462a      	mov	r2, r5
 800edaa:	4601      	mov	r1, r0
 800edac:	4620      	mov	r0, r4
 800edae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edb2:	f000 b817 	b.w	800ede4 <_kill_r>
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d00a      	beq.n	800edd0 <_raise_r+0x4c>
 800edba:	1c59      	adds	r1, r3, #1
 800edbc:	d103      	bne.n	800edc6 <_raise_r+0x42>
 800edbe:	2316      	movs	r3, #22
 800edc0:	6003      	str	r3, [r0, #0]
 800edc2:	2001      	movs	r0, #1
 800edc4:	e7e7      	b.n	800ed96 <_raise_r+0x12>
 800edc6:	2400      	movs	r4, #0
 800edc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edcc:	4628      	mov	r0, r5
 800edce:	4798      	blx	r3
 800edd0:	2000      	movs	r0, #0
 800edd2:	e7e0      	b.n	800ed96 <_raise_r+0x12>

0800edd4 <raise>:
 800edd4:	4b02      	ldr	r3, [pc, #8]	; (800ede0 <raise+0xc>)
 800edd6:	4601      	mov	r1, r0
 800edd8:	6818      	ldr	r0, [r3, #0]
 800edda:	f7ff bfd3 	b.w	800ed84 <_raise_r>
 800edde:	bf00      	nop
 800ede0:	20000010 	.word	0x20000010

0800ede4 <_kill_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d07      	ldr	r5, [pc, #28]	; (800ee04 <_kill_r+0x20>)
 800ede8:	2300      	movs	r3, #0
 800edea:	4604      	mov	r4, r0
 800edec:	4608      	mov	r0, r1
 800edee:	4611      	mov	r1, r2
 800edf0:	602b      	str	r3, [r5, #0]
 800edf2:	f7f5 fff5 	bl	8004de0 <_kill>
 800edf6:	1c43      	adds	r3, r0, #1
 800edf8:	d102      	bne.n	800ee00 <_kill_r+0x1c>
 800edfa:	682b      	ldr	r3, [r5, #0]
 800edfc:	b103      	cbz	r3, 800ee00 <_kill_r+0x1c>
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	bd38      	pop	{r3, r4, r5, pc}
 800ee02:	bf00      	nop
 800ee04:	200061b8 	.word	0x200061b8

0800ee08 <_getpid_r>:
 800ee08:	f7f5 bfe2 	b.w	8004dd0 <_getpid>

0800ee0c <__sread>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	460c      	mov	r4, r1
 800ee10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee14:	f000 f894 	bl	800ef40 <_read_r>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	bfab      	itete	ge
 800ee1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee1e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee20:	181b      	addge	r3, r3, r0
 800ee22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee26:	bfac      	ite	ge
 800ee28:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee2a:	81a3      	strhlt	r3, [r4, #12]
 800ee2c:	bd10      	pop	{r4, pc}

0800ee2e <__swrite>:
 800ee2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee32:	461f      	mov	r7, r3
 800ee34:	898b      	ldrh	r3, [r1, #12]
 800ee36:	05db      	lsls	r3, r3, #23
 800ee38:	4605      	mov	r5, r0
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	4616      	mov	r6, r2
 800ee3e:	d505      	bpl.n	800ee4c <__swrite+0x1e>
 800ee40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee44:	2302      	movs	r3, #2
 800ee46:	2200      	movs	r2, #0
 800ee48:	f000 f868 	bl	800ef1c <_lseek_r>
 800ee4c:	89a3      	ldrh	r3, [r4, #12]
 800ee4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee56:	81a3      	strh	r3, [r4, #12]
 800ee58:	4632      	mov	r2, r6
 800ee5a:	463b      	mov	r3, r7
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee62:	f000 b817 	b.w	800ee94 <_write_r>

0800ee66 <__sseek>:
 800ee66:	b510      	push	{r4, lr}
 800ee68:	460c      	mov	r4, r1
 800ee6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6e:	f000 f855 	bl	800ef1c <_lseek_r>
 800ee72:	1c43      	adds	r3, r0, #1
 800ee74:	89a3      	ldrh	r3, [r4, #12]
 800ee76:	bf15      	itete	ne
 800ee78:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee82:	81a3      	strheq	r3, [r4, #12]
 800ee84:	bf18      	it	ne
 800ee86:	81a3      	strhne	r3, [r4, #12]
 800ee88:	bd10      	pop	{r4, pc}

0800ee8a <__sclose>:
 800ee8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee8e:	f000 b813 	b.w	800eeb8 <_close_r>
	...

0800ee94 <_write_r>:
 800ee94:	b538      	push	{r3, r4, r5, lr}
 800ee96:	4d07      	ldr	r5, [pc, #28]	; (800eeb4 <_write_r+0x20>)
 800ee98:	4604      	mov	r4, r0
 800ee9a:	4608      	mov	r0, r1
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	2200      	movs	r2, #0
 800eea0:	602a      	str	r2, [r5, #0]
 800eea2:	461a      	mov	r2, r3
 800eea4:	f7f5 ffd3 	bl	8004e4e <_write>
 800eea8:	1c43      	adds	r3, r0, #1
 800eeaa:	d102      	bne.n	800eeb2 <_write_r+0x1e>
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	b103      	cbz	r3, 800eeb2 <_write_r+0x1e>
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	bd38      	pop	{r3, r4, r5, pc}
 800eeb4:	200061b8 	.word	0x200061b8

0800eeb8 <_close_r>:
 800eeb8:	b538      	push	{r3, r4, r5, lr}
 800eeba:	4d06      	ldr	r5, [pc, #24]	; (800eed4 <_close_r+0x1c>)
 800eebc:	2300      	movs	r3, #0
 800eebe:	4604      	mov	r4, r0
 800eec0:	4608      	mov	r0, r1
 800eec2:	602b      	str	r3, [r5, #0]
 800eec4:	f7f5 ffdf 	bl	8004e86 <_close>
 800eec8:	1c43      	adds	r3, r0, #1
 800eeca:	d102      	bne.n	800eed2 <_close_r+0x1a>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	b103      	cbz	r3, 800eed2 <_close_r+0x1a>
 800eed0:	6023      	str	r3, [r4, #0]
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	200061b8 	.word	0x200061b8

0800eed8 <_fstat_r>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	4d07      	ldr	r5, [pc, #28]	; (800eef8 <_fstat_r+0x20>)
 800eedc:	2300      	movs	r3, #0
 800eede:	4604      	mov	r4, r0
 800eee0:	4608      	mov	r0, r1
 800eee2:	4611      	mov	r1, r2
 800eee4:	602b      	str	r3, [r5, #0]
 800eee6:	f7f5 ffda 	bl	8004e9e <_fstat>
 800eeea:	1c43      	adds	r3, r0, #1
 800eeec:	d102      	bne.n	800eef4 <_fstat_r+0x1c>
 800eeee:	682b      	ldr	r3, [r5, #0]
 800eef0:	b103      	cbz	r3, 800eef4 <_fstat_r+0x1c>
 800eef2:	6023      	str	r3, [r4, #0]
 800eef4:	bd38      	pop	{r3, r4, r5, pc}
 800eef6:	bf00      	nop
 800eef8:	200061b8 	.word	0x200061b8

0800eefc <_isatty_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4d06      	ldr	r5, [pc, #24]	; (800ef18 <_isatty_r+0x1c>)
 800ef00:	2300      	movs	r3, #0
 800ef02:	4604      	mov	r4, r0
 800ef04:	4608      	mov	r0, r1
 800ef06:	602b      	str	r3, [r5, #0]
 800ef08:	f7f5 ffd9 	bl	8004ebe <_isatty>
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	d102      	bne.n	800ef16 <_isatty_r+0x1a>
 800ef10:	682b      	ldr	r3, [r5, #0]
 800ef12:	b103      	cbz	r3, 800ef16 <_isatty_r+0x1a>
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	200061b8 	.word	0x200061b8

0800ef1c <_lseek_r>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	4d07      	ldr	r5, [pc, #28]	; (800ef3c <_lseek_r+0x20>)
 800ef20:	4604      	mov	r4, r0
 800ef22:	4608      	mov	r0, r1
 800ef24:	4611      	mov	r1, r2
 800ef26:	2200      	movs	r2, #0
 800ef28:	602a      	str	r2, [r5, #0]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f7f5 ffd2 	bl	8004ed4 <_lseek>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d102      	bne.n	800ef3a <_lseek_r+0x1e>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	b103      	cbz	r3, 800ef3a <_lseek_r+0x1e>
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	200061b8 	.word	0x200061b8

0800ef40 <_read_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	; (800ef60 <_read_r+0x20>)
 800ef44:	4604      	mov	r4, r0
 800ef46:	4608      	mov	r0, r1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	602a      	str	r2, [r5, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f7f5 ff60 	bl	8004e14 <_read>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_read_r+0x1e>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_read_r+0x1e>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	200061b8 	.word	0x200061b8

0800ef64 <cosf>:
 800ef64:	ee10 3a10 	vmov	r3, s0
 800ef68:	b507      	push	{r0, r1, r2, lr}
 800ef6a:	4a1e      	ldr	r2, [pc, #120]	; (800efe4 <cosf+0x80>)
 800ef6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef70:	4293      	cmp	r3, r2
 800ef72:	dc06      	bgt.n	800ef82 <cosf+0x1e>
 800ef74:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800efe8 <cosf+0x84>
 800ef78:	b003      	add	sp, #12
 800ef7a:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef7e:	f000 be95 	b.w	800fcac <__kernel_cosf>
 800ef82:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ef86:	db04      	blt.n	800ef92 <cosf+0x2e>
 800ef88:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ef8c:	b003      	add	sp, #12
 800ef8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef92:	4668      	mov	r0, sp
 800ef94:	f000 fd4a 	bl	800fa2c <__ieee754_rem_pio2f>
 800ef98:	f000 0003 	and.w	r0, r0, #3
 800ef9c:	2801      	cmp	r0, #1
 800ef9e:	d009      	beq.n	800efb4 <cosf+0x50>
 800efa0:	2802      	cmp	r0, #2
 800efa2:	d010      	beq.n	800efc6 <cosf+0x62>
 800efa4:	b9b0      	cbnz	r0, 800efd4 <cosf+0x70>
 800efa6:	eddd 0a01 	vldr	s1, [sp, #4]
 800efaa:	ed9d 0a00 	vldr	s0, [sp]
 800efae:	f000 fe7d 	bl	800fcac <__kernel_cosf>
 800efb2:	e7eb      	b.n	800ef8c <cosf+0x28>
 800efb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800efb8:	ed9d 0a00 	vldr	s0, [sp]
 800efbc:	f001 f94c 	bl	8010258 <__kernel_sinf>
 800efc0:	eeb1 0a40 	vneg.f32	s0, s0
 800efc4:	e7e2      	b.n	800ef8c <cosf+0x28>
 800efc6:	eddd 0a01 	vldr	s1, [sp, #4]
 800efca:	ed9d 0a00 	vldr	s0, [sp]
 800efce:	f000 fe6d 	bl	800fcac <__kernel_cosf>
 800efd2:	e7f5      	b.n	800efc0 <cosf+0x5c>
 800efd4:	eddd 0a01 	vldr	s1, [sp, #4]
 800efd8:	ed9d 0a00 	vldr	s0, [sp]
 800efdc:	2001      	movs	r0, #1
 800efde:	f001 f93b 	bl	8010258 <__kernel_sinf>
 800efe2:	e7d3      	b.n	800ef8c <cosf+0x28>
 800efe4:	3f490fd8 	.word	0x3f490fd8
 800efe8:	00000000 	.word	0x00000000

0800efec <sinf>:
 800efec:	ee10 3a10 	vmov	r3, s0
 800eff0:	b507      	push	{r0, r1, r2, lr}
 800eff2:	4a1f      	ldr	r2, [pc, #124]	; (800f070 <sinf+0x84>)
 800eff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eff8:	4293      	cmp	r3, r2
 800effa:	dc07      	bgt.n	800f00c <sinf+0x20>
 800effc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f074 <sinf+0x88>
 800f000:	2000      	movs	r0, #0
 800f002:	b003      	add	sp, #12
 800f004:	f85d eb04 	ldr.w	lr, [sp], #4
 800f008:	f001 b926 	b.w	8010258 <__kernel_sinf>
 800f00c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f010:	db04      	blt.n	800f01c <sinf+0x30>
 800f012:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f016:	b003      	add	sp, #12
 800f018:	f85d fb04 	ldr.w	pc, [sp], #4
 800f01c:	4668      	mov	r0, sp
 800f01e:	f000 fd05 	bl	800fa2c <__ieee754_rem_pio2f>
 800f022:	f000 0003 	and.w	r0, r0, #3
 800f026:	2801      	cmp	r0, #1
 800f028:	d00a      	beq.n	800f040 <sinf+0x54>
 800f02a:	2802      	cmp	r0, #2
 800f02c:	d00f      	beq.n	800f04e <sinf+0x62>
 800f02e:	b9c0      	cbnz	r0, 800f062 <sinf+0x76>
 800f030:	eddd 0a01 	vldr	s1, [sp, #4]
 800f034:	ed9d 0a00 	vldr	s0, [sp]
 800f038:	2001      	movs	r0, #1
 800f03a:	f001 f90d 	bl	8010258 <__kernel_sinf>
 800f03e:	e7ea      	b.n	800f016 <sinf+0x2a>
 800f040:	eddd 0a01 	vldr	s1, [sp, #4]
 800f044:	ed9d 0a00 	vldr	s0, [sp]
 800f048:	f000 fe30 	bl	800fcac <__kernel_cosf>
 800f04c:	e7e3      	b.n	800f016 <sinf+0x2a>
 800f04e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f052:	ed9d 0a00 	vldr	s0, [sp]
 800f056:	2001      	movs	r0, #1
 800f058:	f001 f8fe 	bl	8010258 <__kernel_sinf>
 800f05c:	eeb1 0a40 	vneg.f32	s0, s0
 800f060:	e7d9      	b.n	800f016 <sinf+0x2a>
 800f062:	eddd 0a01 	vldr	s1, [sp, #4]
 800f066:	ed9d 0a00 	vldr	s0, [sp]
 800f06a:	f000 fe1f 	bl	800fcac <__kernel_cosf>
 800f06e:	e7f5      	b.n	800f05c <sinf+0x70>
 800f070:	3f490fd8 	.word	0x3f490fd8
 800f074:	00000000 	.word	0x00000000

0800f078 <asinf>:
 800f078:	b508      	push	{r3, lr}
 800f07a:	ed2d 8b02 	vpush	{d8}
 800f07e:	eeb0 8a40 	vmov.f32	s16, s0
 800f082:	f000 f87f 	bl	800f184 <__ieee754_asinf>
 800f086:	eeb4 8a48 	vcmp.f32	s16, s16
 800f08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08e:	eef0 8a40 	vmov.f32	s17, s0
 800f092:	d615      	bvs.n	800f0c0 <asinf+0x48>
 800f094:	eeb0 0a48 	vmov.f32	s0, s16
 800f098:	f001 fa1c 	bl	80104d4 <fabsf>
 800f09c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f0a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a8:	dd0a      	ble.n	800f0c0 <asinf+0x48>
 800f0aa:	f7fd f847 	bl	800c13c <__errno>
 800f0ae:	ecbd 8b02 	vpop	{d8}
 800f0b2:	2321      	movs	r3, #33	; 0x21
 800f0b4:	6003      	str	r3, [r0, #0]
 800f0b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f0ba:	4804      	ldr	r0, [pc, #16]	; (800f0cc <asinf+0x54>)
 800f0bc:	f001 ba60 	b.w	8010580 <nanf>
 800f0c0:	eeb0 0a68 	vmov.f32	s0, s17
 800f0c4:	ecbd 8b02 	vpop	{d8}
 800f0c8:	bd08      	pop	{r3, pc}
 800f0ca:	bf00      	nop
 800f0cc:	08010c08 	.word	0x08010c08

0800f0d0 <atan2f>:
 800f0d0:	f000 b93e 	b.w	800f350 <__ieee754_atan2f>

0800f0d4 <powf>:
 800f0d4:	b508      	push	{r3, lr}
 800f0d6:	ed2d 8b04 	vpush	{d8-d9}
 800f0da:	eeb0 8a60 	vmov.f32	s16, s1
 800f0de:	eeb0 9a40 	vmov.f32	s18, s0
 800f0e2:	f000 f9d5 	bl	800f490 <__ieee754_powf>
 800f0e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ee:	eef0 8a40 	vmov.f32	s17, s0
 800f0f2:	d63e      	bvs.n	800f172 <powf+0x9e>
 800f0f4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fc:	d112      	bne.n	800f124 <powf+0x50>
 800f0fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f106:	d039      	beq.n	800f17c <powf+0xa8>
 800f108:	eeb0 0a48 	vmov.f32	s0, s16
 800f10c:	f001 f9e9 	bl	80104e2 <finitef>
 800f110:	b378      	cbz	r0, 800f172 <powf+0x9e>
 800f112:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11a:	d52a      	bpl.n	800f172 <powf+0x9e>
 800f11c:	f7fd f80e 	bl	800c13c <__errno>
 800f120:	2322      	movs	r3, #34	; 0x22
 800f122:	e014      	b.n	800f14e <powf+0x7a>
 800f124:	f001 f9dd 	bl	80104e2 <finitef>
 800f128:	b998      	cbnz	r0, 800f152 <powf+0x7e>
 800f12a:	eeb0 0a49 	vmov.f32	s0, s18
 800f12e:	f001 f9d8 	bl	80104e2 <finitef>
 800f132:	b170      	cbz	r0, 800f152 <powf+0x7e>
 800f134:	eeb0 0a48 	vmov.f32	s0, s16
 800f138:	f001 f9d3 	bl	80104e2 <finitef>
 800f13c:	b148      	cbz	r0, 800f152 <powf+0x7e>
 800f13e:	eef4 8a68 	vcmp.f32	s17, s17
 800f142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f146:	d7e9      	bvc.n	800f11c <powf+0x48>
 800f148:	f7fc fff8 	bl	800c13c <__errno>
 800f14c:	2321      	movs	r3, #33	; 0x21
 800f14e:	6003      	str	r3, [r0, #0]
 800f150:	e00f      	b.n	800f172 <powf+0x9e>
 800f152:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15a:	d10a      	bne.n	800f172 <powf+0x9e>
 800f15c:	eeb0 0a49 	vmov.f32	s0, s18
 800f160:	f001 f9bf 	bl	80104e2 <finitef>
 800f164:	b128      	cbz	r0, 800f172 <powf+0x9e>
 800f166:	eeb0 0a48 	vmov.f32	s0, s16
 800f16a:	f001 f9ba 	bl	80104e2 <finitef>
 800f16e:	2800      	cmp	r0, #0
 800f170:	d1d4      	bne.n	800f11c <powf+0x48>
 800f172:	eeb0 0a68 	vmov.f32	s0, s17
 800f176:	ecbd 8b04 	vpop	{d8-d9}
 800f17a:	bd08      	pop	{r3, pc}
 800f17c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f180:	e7f7      	b.n	800f172 <powf+0x9e>
	...

0800f184 <__ieee754_asinf>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	ee10 5a10 	vmov	r5, s0
 800f18a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f18e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f192:	ed2d 8b04 	vpush	{d8-d9}
 800f196:	d10c      	bne.n	800f1b2 <__ieee754_asinf+0x2e>
 800f198:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f310 <__ieee754_asinf+0x18c>
 800f19c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f314 <__ieee754_asinf+0x190>
 800f1a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f1a4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f1a8:	eeb0 0a67 	vmov.f32	s0, s15
 800f1ac:	ecbd 8b04 	vpop	{d8-d9}
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	dd04      	ble.n	800f1be <__ieee754_asinf+0x3a>
 800f1b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f1b8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f1bc:	e7f6      	b.n	800f1ac <__ieee754_asinf+0x28>
 800f1be:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f1c2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f1c6:	da0b      	bge.n	800f1e0 <__ieee754_asinf+0x5c>
 800f1c8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f1cc:	da52      	bge.n	800f274 <__ieee754_asinf+0xf0>
 800f1ce:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f318 <__ieee754_asinf+0x194>
 800f1d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f1d6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1de:	dce5      	bgt.n	800f1ac <__ieee754_asinf+0x28>
 800f1e0:	f001 f978 	bl	80104d4 <fabsf>
 800f1e4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f1e8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f1ec:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f1f0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f31c <__ieee754_asinf+0x198>
 800f1f4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f320 <__ieee754_asinf+0x19c>
 800f1f8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f324 <__ieee754_asinf+0x1a0>
 800f1fc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f200:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f328 <__ieee754_asinf+0x1a4>
 800f204:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f208:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f32c <__ieee754_asinf+0x1a8>
 800f20c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f210:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f330 <__ieee754_asinf+0x1ac>
 800f214:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f218:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f334 <__ieee754_asinf+0x1b0>
 800f21c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f220:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f338 <__ieee754_asinf+0x1b4>
 800f224:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f228:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f33c <__ieee754_asinf+0x1b8>
 800f22c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f230:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f340 <__ieee754_asinf+0x1bc>
 800f234:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f238:	eeb0 0a48 	vmov.f32	s0, s16
 800f23c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f240:	f000 fd30 	bl	800fca4 <__ieee754_sqrtf>
 800f244:	4b3f      	ldr	r3, [pc, #252]	; (800f344 <__ieee754_asinf+0x1c0>)
 800f246:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f24a:	429c      	cmp	r4, r3
 800f24c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f250:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f254:	dd3d      	ble.n	800f2d2 <__ieee754_asinf+0x14e>
 800f256:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f25a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f348 <__ieee754_asinf+0x1c4>
 800f25e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f262:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f314 <__ieee754_asinf+0x190>
 800f266:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f26a:	2d00      	cmp	r5, #0
 800f26c:	bfd8      	it	le
 800f26e:	eeb1 0a40 	vnegle.f32	s0, s0
 800f272:	e79b      	b.n	800f1ac <__ieee754_asinf+0x28>
 800f274:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f278:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f31c <__ieee754_asinf+0x198>
 800f27c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f320 <__ieee754_asinf+0x19c>
 800f280:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f334 <__ieee754_asinf+0x1b0>
 800f284:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f288:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f328 <__ieee754_asinf+0x1a4>
 800f28c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f290:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f32c <__ieee754_asinf+0x1a8>
 800f294:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f298:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f330 <__ieee754_asinf+0x1ac>
 800f29c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f2a0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f324 <__ieee754_asinf+0x1a0>
 800f2a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f2a8:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f338 <__ieee754_asinf+0x1b4>
 800f2ac:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f2b0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f33c <__ieee754_asinf+0x1b8>
 800f2b4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f2b8:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f340 <__ieee754_asinf+0x1bc>
 800f2bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f2c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2c4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f2c8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f2cc:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f2d0:	e76c      	b.n	800f1ac <__ieee754_asinf+0x28>
 800f2d2:	ee10 3a10 	vmov	r3, s0
 800f2d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f2da:	f023 030f 	bic.w	r3, r3, #15
 800f2de:	ee07 3a10 	vmov	s14, r3
 800f2e2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f2e6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f2ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f2ee:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f2f2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f310 <__ieee754_asinf+0x18c>
 800f2f6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f2fa:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f2fe:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f34c <__ieee754_asinf+0x1c8>
 800f302:	eeb0 6a40 	vmov.f32	s12, s0
 800f306:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f30a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f30e:	e7aa      	b.n	800f266 <__ieee754_asinf+0xe2>
 800f310:	b33bbd2e 	.word	0xb33bbd2e
 800f314:	3fc90fdb 	.word	0x3fc90fdb
 800f318:	7149f2ca 	.word	0x7149f2ca
 800f31c:	3811ef08 	.word	0x3811ef08
 800f320:	3a4f7f04 	.word	0x3a4f7f04
 800f324:	3e2aaaab 	.word	0x3e2aaaab
 800f328:	bd241146 	.word	0xbd241146
 800f32c:	3e4e0aa8 	.word	0x3e4e0aa8
 800f330:	bea6b090 	.word	0xbea6b090
 800f334:	3d9dc62e 	.word	0x3d9dc62e
 800f338:	bf303361 	.word	0xbf303361
 800f33c:	4001572d 	.word	0x4001572d
 800f340:	c019d139 	.word	0xc019d139
 800f344:	3f799999 	.word	0x3f799999
 800f348:	333bbd2e 	.word	0x333bbd2e
 800f34c:	3f490fdb 	.word	0x3f490fdb

0800f350 <__ieee754_atan2f>:
 800f350:	ee10 2a90 	vmov	r2, s1
 800f354:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f358:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f35c:	b510      	push	{r4, lr}
 800f35e:	eef0 7a40 	vmov.f32	s15, s0
 800f362:	dc06      	bgt.n	800f372 <__ieee754_atan2f+0x22>
 800f364:	ee10 0a10 	vmov	r0, s0
 800f368:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f36c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f370:	dd04      	ble.n	800f37c <__ieee754_atan2f+0x2c>
 800f372:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f376:	eeb0 0a67 	vmov.f32	s0, s15
 800f37a:	bd10      	pop	{r4, pc}
 800f37c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f380:	d103      	bne.n	800f38a <__ieee754_atan2f+0x3a>
 800f382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f386:	f000 bfd1 	b.w	801032c <atanf>
 800f38a:	1794      	asrs	r4, r2, #30
 800f38c:	f004 0402 	and.w	r4, r4, #2
 800f390:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f394:	b943      	cbnz	r3, 800f3a8 <__ieee754_atan2f+0x58>
 800f396:	2c02      	cmp	r4, #2
 800f398:	d05e      	beq.n	800f458 <__ieee754_atan2f+0x108>
 800f39a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f46c <__ieee754_atan2f+0x11c>
 800f39e:	2c03      	cmp	r4, #3
 800f3a0:	bf08      	it	eq
 800f3a2:	eef0 7a47 	vmoveq.f32	s15, s14
 800f3a6:	e7e6      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f3a8:	b941      	cbnz	r1, 800f3bc <__ieee754_atan2f+0x6c>
 800f3aa:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f470 <__ieee754_atan2f+0x120>
 800f3ae:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f474 <__ieee754_atan2f+0x124>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	bfb8      	it	lt
 800f3b6:	eef0 7a40 	vmovlt.f32	s15, s0
 800f3ba:	e7dc      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f3bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f3c0:	d110      	bne.n	800f3e4 <__ieee754_atan2f+0x94>
 800f3c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f3ca:	d107      	bne.n	800f3dc <__ieee754_atan2f+0x8c>
 800f3cc:	2c02      	cmp	r4, #2
 800f3ce:	d846      	bhi.n	800f45e <__ieee754_atan2f+0x10e>
 800f3d0:	4b29      	ldr	r3, [pc, #164]	; (800f478 <__ieee754_atan2f+0x128>)
 800f3d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f3d6:	edd4 7a00 	vldr	s15, [r4]
 800f3da:	e7cc      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f3dc:	2c02      	cmp	r4, #2
 800f3de:	d841      	bhi.n	800f464 <__ieee754_atan2f+0x114>
 800f3e0:	4b26      	ldr	r3, [pc, #152]	; (800f47c <__ieee754_atan2f+0x12c>)
 800f3e2:	e7f6      	b.n	800f3d2 <__ieee754_atan2f+0x82>
 800f3e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3e8:	d0df      	beq.n	800f3aa <__ieee754_atan2f+0x5a>
 800f3ea:	1a5b      	subs	r3, r3, r1
 800f3ec:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f3f0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f3f4:	da1a      	bge.n	800f42c <__ieee754_atan2f+0xdc>
 800f3f6:	2a00      	cmp	r2, #0
 800f3f8:	da01      	bge.n	800f3fe <__ieee754_atan2f+0xae>
 800f3fa:	313c      	adds	r1, #60	; 0x3c
 800f3fc:	db19      	blt.n	800f432 <__ieee754_atan2f+0xe2>
 800f3fe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f402:	f001 f867 	bl	80104d4 <fabsf>
 800f406:	f000 ff91 	bl	801032c <atanf>
 800f40a:	eef0 7a40 	vmov.f32	s15, s0
 800f40e:	2c01      	cmp	r4, #1
 800f410:	d012      	beq.n	800f438 <__ieee754_atan2f+0xe8>
 800f412:	2c02      	cmp	r4, #2
 800f414:	d017      	beq.n	800f446 <__ieee754_atan2f+0xf6>
 800f416:	2c00      	cmp	r4, #0
 800f418:	d0ad      	beq.n	800f376 <__ieee754_atan2f+0x26>
 800f41a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f480 <__ieee754_atan2f+0x130>
 800f41e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f422:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f484 <__ieee754_atan2f+0x134>
 800f426:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f42a:	e7a4      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f42c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f470 <__ieee754_atan2f+0x120>
 800f430:	e7ed      	b.n	800f40e <__ieee754_atan2f+0xbe>
 800f432:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f488 <__ieee754_atan2f+0x138>
 800f436:	e7ea      	b.n	800f40e <__ieee754_atan2f+0xbe>
 800f438:	ee17 3a90 	vmov	r3, s15
 800f43c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f440:	ee07 3a90 	vmov	s15, r3
 800f444:	e797      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f446:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f480 <__ieee754_atan2f+0x130>
 800f44a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f44e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f484 <__ieee754_atan2f+0x134>
 800f452:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f456:	e78e      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f458:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f484 <__ieee754_atan2f+0x134>
 800f45c:	e78b      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f45e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f48c <__ieee754_atan2f+0x13c>
 800f462:	e788      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f464:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f488 <__ieee754_atan2f+0x138>
 800f468:	e785      	b.n	800f376 <__ieee754_atan2f+0x26>
 800f46a:	bf00      	nop
 800f46c:	c0490fdb 	.word	0xc0490fdb
 800f470:	3fc90fdb 	.word	0x3fc90fdb
 800f474:	bfc90fdb 	.word	0xbfc90fdb
 800f478:	08010d74 	.word	0x08010d74
 800f47c:	08010d80 	.word	0x08010d80
 800f480:	33bbbd2e 	.word	0x33bbbd2e
 800f484:	40490fdb 	.word	0x40490fdb
 800f488:	00000000 	.word	0x00000000
 800f48c:	3f490fdb 	.word	0x3f490fdb

0800f490 <__ieee754_powf>:
 800f490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f494:	ee10 4a90 	vmov	r4, s1
 800f498:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f49c:	ed2d 8b02 	vpush	{d8}
 800f4a0:	ee10 6a10 	vmov	r6, s0
 800f4a4:	eeb0 8a40 	vmov.f32	s16, s0
 800f4a8:	eef0 8a60 	vmov.f32	s17, s1
 800f4ac:	d10c      	bne.n	800f4c8 <__ieee754_powf+0x38>
 800f4ae:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f4b2:	0076      	lsls	r6, r6, #1
 800f4b4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f4b8:	f240 8296 	bls.w	800f9e8 <__ieee754_powf+0x558>
 800f4bc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f4c0:	ecbd 8b02 	vpop	{d8}
 800f4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f4cc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f4d0:	dcf4      	bgt.n	800f4bc <__ieee754_powf+0x2c>
 800f4d2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f4d6:	dd08      	ble.n	800f4ea <__ieee754_powf+0x5a>
 800f4d8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f4dc:	d1ee      	bne.n	800f4bc <__ieee754_powf+0x2c>
 800f4de:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f4e2:	0064      	lsls	r4, r4, #1
 800f4e4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f4e8:	e7e6      	b.n	800f4b8 <__ieee754_powf+0x28>
 800f4ea:	2e00      	cmp	r6, #0
 800f4ec:	da20      	bge.n	800f530 <__ieee754_powf+0xa0>
 800f4ee:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f4f2:	da2d      	bge.n	800f550 <__ieee754_powf+0xc0>
 800f4f4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f4f8:	f2c0 827f 	blt.w	800f9fa <__ieee754_powf+0x56a>
 800f4fc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f500:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f504:	fa48 f703 	asr.w	r7, r8, r3
 800f508:	fa07 f303 	lsl.w	r3, r7, r3
 800f50c:	4543      	cmp	r3, r8
 800f50e:	f040 8274 	bne.w	800f9fa <__ieee754_powf+0x56a>
 800f512:	f007 0701 	and.w	r7, r7, #1
 800f516:	f1c7 0702 	rsb	r7, r7, #2
 800f51a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f51e:	d11f      	bne.n	800f560 <__ieee754_powf+0xd0>
 800f520:	2c00      	cmp	r4, #0
 800f522:	f280 8267 	bge.w	800f9f4 <__ieee754_powf+0x564>
 800f526:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f52a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f52e:	e7c7      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f530:	2700      	movs	r7, #0
 800f532:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f536:	d1f0      	bne.n	800f51a <__ieee754_powf+0x8a>
 800f538:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f53c:	f000 8254 	beq.w	800f9e8 <__ieee754_powf+0x558>
 800f540:	dd08      	ble.n	800f554 <__ieee754_powf+0xc4>
 800f542:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800f84c <__ieee754_powf+0x3bc>
 800f546:	2c00      	cmp	r4, #0
 800f548:	bfa8      	it	ge
 800f54a:	eeb0 0a68 	vmovge.f32	s0, s17
 800f54e:	e7b7      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f550:	2702      	movs	r7, #2
 800f552:	e7ee      	b.n	800f532 <__ieee754_powf+0xa2>
 800f554:	2c00      	cmp	r4, #0
 800f556:	f280 824a 	bge.w	800f9ee <__ieee754_powf+0x55e>
 800f55a:	eeb1 0a68 	vneg.f32	s0, s17
 800f55e:	e7af      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f560:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f564:	d102      	bne.n	800f56c <__ieee754_powf+0xdc>
 800f566:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f56a:	e7a9      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f56c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f570:	eeb0 0a48 	vmov.f32	s0, s16
 800f574:	d107      	bne.n	800f586 <__ieee754_powf+0xf6>
 800f576:	2e00      	cmp	r6, #0
 800f578:	db05      	blt.n	800f586 <__ieee754_powf+0xf6>
 800f57a:	ecbd 8b02 	vpop	{d8}
 800f57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f582:	f000 bb8f 	b.w	800fca4 <__ieee754_sqrtf>
 800f586:	f000 ffa5 	bl	80104d4 <fabsf>
 800f58a:	b125      	cbz	r5, 800f596 <__ieee754_powf+0x106>
 800f58c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800f590:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f594:	d116      	bne.n	800f5c4 <__ieee754_powf+0x134>
 800f596:	2c00      	cmp	r4, #0
 800f598:	bfbc      	itt	lt
 800f59a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f59e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f5a2:	2e00      	cmp	r6, #0
 800f5a4:	da8c      	bge.n	800f4c0 <__ieee754_powf+0x30>
 800f5a6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f5aa:	ea55 0307 	orrs.w	r3, r5, r7
 800f5ae:	d104      	bne.n	800f5ba <__ieee754_powf+0x12a>
 800f5b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f5b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f5b8:	e782      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f5ba:	2f01      	cmp	r7, #1
 800f5bc:	d180      	bne.n	800f4c0 <__ieee754_powf+0x30>
 800f5be:	eeb1 0a40 	vneg.f32	s0, s0
 800f5c2:	e77d      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f5c4:	0ff0      	lsrs	r0, r6, #31
 800f5c6:	3801      	subs	r0, #1
 800f5c8:	ea57 0300 	orrs.w	r3, r7, r0
 800f5cc:	d104      	bne.n	800f5d8 <__ieee754_powf+0x148>
 800f5ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f5d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f5d6:	e773      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f5d8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f5dc:	dd74      	ble.n	800f6c8 <__ieee754_powf+0x238>
 800f5de:	4b9c      	ldr	r3, [pc, #624]	; (800f850 <__ieee754_powf+0x3c0>)
 800f5e0:	429d      	cmp	r5, r3
 800f5e2:	dc08      	bgt.n	800f5f6 <__ieee754_powf+0x166>
 800f5e4:	2c00      	cmp	r4, #0
 800f5e6:	da0b      	bge.n	800f600 <__ieee754_powf+0x170>
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	ecbd 8b02 	vpop	{d8}
 800f5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f2:	f000 be95 	b.w	8010320 <__math_oflowf>
 800f5f6:	4b97      	ldr	r3, [pc, #604]	; (800f854 <__ieee754_powf+0x3c4>)
 800f5f8:	429d      	cmp	r5, r3
 800f5fa:	dd08      	ble.n	800f60e <__ieee754_powf+0x17e>
 800f5fc:	2c00      	cmp	r4, #0
 800f5fe:	dcf3      	bgt.n	800f5e8 <__ieee754_powf+0x158>
 800f600:	2000      	movs	r0, #0
 800f602:	ecbd 8b02 	vpop	{d8}
 800f606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f60a:	f000 be83 	b.w	8010314 <__math_uflowf>
 800f60e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f612:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f616:	eddf 6a90 	vldr	s13, [pc, #576]	; 800f858 <__ieee754_powf+0x3c8>
 800f61a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f61e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f622:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f626:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f62a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f632:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f85c <__ieee754_powf+0x3cc>
 800f636:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f63a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800f860 <__ieee754_powf+0x3d0>
 800f63e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f642:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800f864 <__ieee754_powf+0x3d4>
 800f646:	eef0 6a67 	vmov.f32	s13, s15
 800f64a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f64e:	ee16 3a90 	vmov	r3, s13
 800f652:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f656:	f023 030f 	bic.w	r3, r3, #15
 800f65a:	ee00 3a90 	vmov	s1, r3
 800f65e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f662:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f666:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f66a:	f024 040f 	bic.w	r4, r4, #15
 800f66e:	ee07 4a10 	vmov	s14, r4
 800f672:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f676:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f67a:	ee07 3a90 	vmov	s15, r3
 800f67e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f682:	3f01      	subs	r7, #1
 800f684:	ea57 0200 	orrs.w	r2, r7, r0
 800f688:	ee07 4a10 	vmov	s14, r4
 800f68c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f690:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f694:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f698:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f69c:	ee17 4a10 	vmov	r4, s14
 800f6a0:	bf08      	it	eq
 800f6a2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f6a6:	2c00      	cmp	r4, #0
 800f6a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f6ac:	f340 817e 	ble.w	800f9ac <__ieee754_powf+0x51c>
 800f6b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f6b4:	f340 80f8 	ble.w	800f8a8 <__ieee754_powf+0x418>
 800f6b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c0:	bf4c      	ite	mi
 800f6c2:	2001      	movmi	r0, #1
 800f6c4:	2000      	movpl	r0, #0
 800f6c6:	e790      	b.n	800f5ea <__ieee754_powf+0x15a>
 800f6c8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800f6cc:	bf01      	itttt	eq
 800f6ce:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800f868 <__ieee754_powf+0x3d8>
 800f6d2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f6d6:	f06f 0217 	mvneq.w	r2, #23
 800f6da:	ee17 5a90 	vmoveq	r5, s15
 800f6de:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f6e2:	bf18      	it	ne
 800f6e4:	2200      	movne	r2, #0
 800f6e6:	3b7f      	subs	r3, #127	; 0x7f
 800f6e8:	4413      	add	r3, r2
 800f6ea:	4a60      	ldr	r2, [pc, #384]	; (800f86c <__ieee754_powf+0x3dc>)
 800f6ec:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f6f0:	4295      	cmp	r5, r2
 800f6f2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f6f6:	dd06      	ble.n	800f706 <__ieee754_powf+0x276>
 800f6f8:	4a5d      	ldr	r2, [pc, #372]	; (800f870 <__ieee754_powf+0x3e0>)
 800f6fa:	4295      	cmp	r5, r2
 800f6fc:	f340 80a4 	ble.w	800f848 <__ieee754_powf+0x3b8>
 800f700:	3301      	adds	r3, #1
 800f702:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f706:	2500      	movs	r5, #0
 800f708:	4a5a      	ldr	r2, [pc, #360]	; (800f874 <__ieee754_powf+0x3e4>)
 800f70a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f70e:	ee07 1a90 	vmov	s15, r1
 800f712:	ed92 7a00 	vldr	s14, [r2]
 800f716:	4a58      	ldr	r2, [pc, #352]	; (800f878 <__ieee754_powf+0x3e8>)
 800f718:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f71c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f720:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f724:	1049      	asrs	r1, r1, #1
 800f726:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f72a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f72e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800f732:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f736:	ee06 1a10 	vmov	s12, r1
 800f73a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f73e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f742:	ee14 6a90 	vmov	r6, s9
 800f746:	4016      	ands	r6, r2
 800f748:	ee05 6a90 	vmov	s11, r6
 800f74c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800f750:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f754:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f87c <__ieee754_powf+0x3ec>
 800f758:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800f75c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f760:	ee25 6a26 	vmul.f32	s12, s10, s13
 800f764:	eddf 6a46 	vldr	s13, [pc, #280]	; 800f880 <__ieee754_powf+0x3f0>
 800f768:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f76c:	eddf 6a45 	vldr	s13, [pc, #276]	; 800f884 <__ieee754_powf+0x3f4>
 800f770:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f774:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f858 <__ieee754_powf+0x3c8>
 800f778:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f77c:	eddf 6a42 	vldr	s13, [pc, #264]	; 800f888 <__ieee754_powf+0x3f8>
 800f780:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f784:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f88c <__ieee754_powf+0x3fc>
 800f788:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f78c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800f790:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800f794:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f798:	eee5 6a07 	vfma.f32	s13, s10, s14
 800f79c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800f7a0:	eef0 7a45 	vmov.f32	s15, s10
 800f7a4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f7a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7ac:	ee17 1a90 	vmov	r1, s15
 800f7b0:	4011      	ands	r1, r2
 800f7b2:	ee07 1a90 	vmov	s15, r1
 800f7b6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800f7ba:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800f7be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f7c2:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f7c6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f7ca:	eeb0 6a47 	vmov.f32	s12, s14
 800f7ce:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f7d2:	ee16 1a10 	vmov	r1, s12
 800f7d6:	4011      	ands	r1, r2
 800f7d8:	ee06 1a90 	vmov	s13, r1
 800f7dc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800f7e0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f890 <__ieee754_powf+0x400>
 800f7e4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800f894 <__ieee754_powf+0x404>
 800f7e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f7ec:	ee06 1a10 	vmov	s12, r1
 800f7f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7f4:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f898 <__ieee754_powf+0x408>
 800f7f8:	4928      	ldr	r1, [pc, #160]	; (800f89c <__ieee754_powf+0x40c>)
 800f7fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f7fe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800f802:	edd1 7a00 	vldr	s15, [r1]
 800f806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f80a:	ee07 3a90 	vmov	s15, r3
 800f80e:	4b24      	ldr	r3, [pc, #144]	; (800f8a0 <__ieee754_powf+0x410>)
 800f810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f814:	eef0 7a47 	vmov.f32	s15, s14
 800f818:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f81c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800f820:	edd5 0a00 	vldr	s1, [r5]
 800f824:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f82c:	ee17 3a90 	vmov	r3, s15
 800f830:	4013      	ands	r3, r2
 800f832:	ee07 3a90 	vmov	s15, r3
 800f836:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f83a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800f83e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f842:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f846:	e70e      	b.n	800f666 <__ieee754_powf+0x1d6>
 800f848:	2501      	movs	r5, #1
 800f84a:	e75d      	b.n	800f708 <__ieee754_powf+0x278>
 800f84c:	00000000 	.word	0x00000000
 800f850:	3f7ffff3 	.word	0x3f7ffff3
 800f854:	3f800007 	.word	0x3f800007
 800f858:	3eaaaaab 	.word	0x3eaaaaab
 800f85c:	3fb8aa3b 	.word	0x3fb8aa3b
 800f860:	36eca570 	.word	0x36eca570
 800f864:	3fb8aa00 	.word	0x3fb8aa00
 800f868:	4b800000 	.word	0x4b800000
 800f86c:	001cc471 	.word	0x001cc471
 800f870:	005db3d6 	.word	0x005db3d6
 800f874:	08010d8c 	.word	0x08010d8c
 800f878:	fffff000 	.word	0xfffff000
 800f87c:	3e6c3255 	.word	0x3e6c3255
 800f880:	3e53f142 	.word	0x3e53f142
 800f884:	3e8ba305 	.word	0x3e8ba305
 800f888:	3edb6db7 	.word	0x3edb6db7
 800f88c:	3f19999a 	.word	0x3f19999a
 800f890:	3f76384f 	.word	0x3f76384f
 800f894:	3f763800 	.word	0x3f763800
 800f898:	369dc3a0 	.word	0x369dc3a0
 800f89c:	08010d9c 	.word	0x08010d9c
 800f8a0:	08010d94 	.word	0x08010d94
 800f8a4:	3338aa3c 	.word	0x3338aa3c
 800f8a8:	f040 8095 	bne.w	800f9d6 <__ieee754_powf+0x546>
 800f8ac:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f8a4 <__ieee754_powf+0x414>
 800f8b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8b4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f8b8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c0:	f73f aefa 	bgt.w	800f6b8 <__ieee754_powf+0x228>
 800f8c4:	15db      	asrs	r3, r3, #23
 800f8c6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f8ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f8ce:	4103      	asrs	r3, r0
 800f8d0:	4423      	add	r3, r4
 800f8d2:	494b      	ldr	r1, [pc, #300]	; (800fa00 <__ieee754_powf+0x570>)
 800f8d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f8d8:	3a7f      	subs	r2, #127	; 0x7f
 800f8da:	4111      	asrs	r1, r2
 800f8dc:	ea23 0101 	bic.w	r1, r3, r1
 800f8e0:	ee07 1a10 	vmov	s14, r1
 800f8e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f8e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f8ec:	f1c2 0217 	rsb	r2, r2, #23
 800f8f0:	4110      	asrs	r0, r2
 800f8f2:	2c00      	cmp	r4, #0
 800f8f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8f8:	bfb8      	it	lt
 800f8fa:	4240      	neglt	r0, r0
 800f8fc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f900:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800fa04 <__ieee754_powf+0x574>
 800f904:	eddf 6a40 	vldr	s13, [pc, #256]	; 800fa08 <__ieee754_powf+0x578>
 800f908:	ee17 3a10 	vmov	r3, s14
 800f90c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f910:	f023 030f 	bic.w	r3, r3, #15
 800f914:	ee07 3a10 	vmov	s14, r3
 800f918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f91c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800f920:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f924:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fa0c <__ieee754_powf+0x57c>
 800f928:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800f92c:	eef0 7a40 	vmov.f32	s15, s0
 800f930:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f934:	eeb0 6a67 	vmov.f32	s12, s15
 800f938:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f93c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f940:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f944:	eddf 6a32 	vldr	s13, [pc, #200]	; 800fa10 <__ieee754_powf+0x580>
 800f948:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800fa14 <__ieee754_powf+0x584>
 800f94c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f950:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800fa18 <__ieee754_powf+0x588>
 800f954:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f958:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fa1c <__ieee754_powf+0x58c>
 800f95c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f960:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fa20 <__ieee754_powf+0x590>
 800f964:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f968:	eef0 6a67 	vmov.f32	s13, s15
 800f96c:	eee6 6a47 	vfms.f32	s13, s12, s14
 800f970:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f974:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800f978:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800f97c:	eea7 0a80 	vfma.f32	s0, s15, s0
 800f980:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f984:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f988:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f98c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f990:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f994:	ee10 3a10 	vmov	r3, s0
 800f998:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f99c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f9a0:	da1f      	bge.n	800f9e2 <__ieee754_powf+0x552>
 800f9a2:	f000 fdf3 	bl	801058c <scalbnf>
 800f9a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f9aa:	e589      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f9ac:	4a1d      	ldr	r2, [pc, #116]	; (800fa24 <__ieee754_powf+0x594>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	dd07      	ble.n	800f9c2 <__ieee754_powf+0x532>
 800f9b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ba:	bf4c      	ite	mi
 800f9bc:	2001      	movmi	r0, #1
 800f9be:	2000      	movpl	r0, #0
 800f9c0:	e61f      	b.n	800f602 <__ieee754_powf+0x172>
 800f9c2:	d108      	bne.n	800f9d6 <__ieee754_powf+0x546>
 800f9c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9c8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d0:	f6ff af78 	blt.w	800f8c4 <__ieee754_powf+0x434>
 800f9d4:	e7ed      	b.n	800f9b2 <__ieee754_powf+0x522>
 800f9d6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800f9da:	f73f af73 	bgt.w	800f8c4 <__ieee754_powf+0x434>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	e78c      	b.n	800f8fc <__ieee754_powf+0x46c>
 800f9e2:	ee00 3a10 	vmov	s0, r3
 800f9e6:	e7de      	b.n	800f9a6 <__ieee754_powf+0x516>
 800f9e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f9ec:	e568      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f9ee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fa28 <__ieee754_powf+0x598>
 800f9f2:	e565      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f9f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f9f8:	e562      	b.n	800f4c0 <__ieee754_powf+0x30>
 800f9fa:	2700      	movs	r7, #0
 800f9fc:	e58d      	b.n	800f51a <__ieee754_powf+0x8a>
 800f9fe:	bf00      	nop
 800fa00:	007fffff 	.word	0x007fffff
 800fa04:	35bfbe8c 	.word	0x35bfbe8c
 800fa08:	3f317200 	.word	0x3f317200
 800fa0c:	3f317218 	.word	0x3f317218
 800fa10:	b5ddea0e 	.word	0xb5ddea0e
 800fa14:	3331bb4c 	.word	0x3331bb4c
 800fa18:	388ab355 	.word	0x388ab355
 800fa1c:	bb360b61 	.word	0xbb360b61
 800fa20:	3e2aaaab 	.word	0x3e2aaaab
 800fa24:	43160000 	.word	0x43160000
 800fa28:	00000000 	.word	0x00000000

0800fa2c <__ieee754_rem_pio2f>:
 800fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2e:	ee10 6a10 	vmov	r6, s0
 800fa32:	4b8e      	ldr	r3, [pc, #568]	; (800fc6c <__ieee754_rem_pio2f+0x240>)
 800fa34:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800fa38:	429d      	cmp	r5, r3
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	eef0 7a40 	vmov.f32	s15, s0
 800fa40:	4604      	mov	r4, r0
 800fa42:	dc05      	bgt.n	800fa50 <__ieee754_rem_pio2f+0x24>
 800fa44:	2300      	movs	r3, #0
 800fa46:	ed80 0a00 	vstr	s0, [r0]
 800fa4a:	6043      	str	r3, [r0, #4]
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e01a      	b.n	800fa86 <__ieee754_rem_pio2f+0x5a>
 800fa50:	4b87      	ldr	r3, [pc, #540]	; (800fc70 <__ieee754_rem_pio2f+0x244>)
 800fa52:	429d      	cmp	r5, r3
 800fa54:	dc46      	bgt.n	800fae4 <__ieee754_rem_pio2f+0xb8>
 800fa56:	2e00      	cmp	r6, #0
 800fa58:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800fc74 <__ieee754_rem_pio2f+0x248>
 800fa5c:	4b86      	ldr	r3, [pc, #536]	; (800fc78 <__ieee754_rem_pio2f+0x24c>)
 800fa5e:	f025 050f 	bic.w	r5, r5, #15
 800fa62:	dd1f      	ble.n	800faa4 <__ieee754_rem_pio2f+0x78>
 800fa64:	429d      	cmp	r5, r3
 800fa66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fa6a:	d00e      	beq.n	800fa8a <__ieee754_rem_pio2f+0x5e>
 800fa6c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800fc7c <__ieee754_rem_pio2f+0x250>
 800fa70:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800fa74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fa78:	ed80 0a00 	vstr	s0, [r0]
 800fa7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa80:	2001      	movs	r0, #1
 800fa82:	edc4 7a01 	vstr	s15, [r4, #4]
 800fa86:	b007      	add	sp, #28
 800fa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa8a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800fc80 <__ieee754_rem_pio2f+0x254>
 800fa8e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800fc84 <__ieee754_rem_pio2f+0x258>
 800fa92:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fa96:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800fa9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fa9e:	edc0 6a00 	vstr	s13, [r0]
 800faa2:	e7eb      	b.n	800fa7c <__ieee754_rem_pio2f+0x50>
 800faa4:	429d      	cmp	r5, r3
 800faa6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800faaa:	d00e      	beq.n	800faca <__ieee754_rem_pio2f+0x9e>
 800faac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800fc7c <__ieee754_rem_pio2f+0x250>
 800fab0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800fab4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fab8:	ed80 0a00 	vstr	s0, [r0]
 800fabc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fac0:	f04f 30ff 	mov.w	r0, #4294967295
 800fac4:	edc4 7a01 	vstr	s15, [r4, #4]
 800fac8:	e7dd      	b.n	800fa86 <__ieee754_rem_pio2f+0x5a>
 800faca:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800fc80 <__ieee754_rem_pio2f+0x254>
 800face:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800fc84 <__ieee754_rem_pio2f+0x258>
 800fad2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fad6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800fada:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fade:	edc0 6a00 	vstr	s13, [r0]
 800fae2:	e7eb      	b.n	800fabc <__ieee754_rem_pio2f+0x90>
 800fae4:	4b68      	ldr	r3, [pc, #416]	; (800fc88 <__ieee754_rem_pio2f+0x25c>)
 800fae6:	429d      	cmp	r5, r3
 800fae8:	dc72      	bgt.n	800fbd0 <__ieee754_rem_pio2f+0x1a4>
 800faea:	f000 fcf3 	bl	80104d4 <fabsf>
 800faee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fc8c <__ieee754_rem_pio2f+0x260>
 800faf2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800faf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fafa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fafe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fb02:	ee17 0a90 	vmov	r0, s15
 800fb06:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fc74 <__ieee754_rem_pio2f+0x248>
 800fb0a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800fb0e:	281f      	cmp	r0, #31
 800fb10:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800fc7c <__ieee754_rem_pio2f+0x250>
 800fb14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb18:	eeb1 6a47 	vneg.f32	s12, s14
 800fb1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fb20:	ee16 2a90 	vmov	r2, s13
 800fb24:	dc1c      	bgt.n	800fb60 <__ieee754_rem_pio2f+0x134>
 800fb26:	495a      	ldr	r1, [pc, #360]	; (800fc90 <__ieee754_rem_pio2f+0x264>)
 800fb28:	1e47      	subs	r7, r0, #1
 800fb2a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800fb2e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800fb32:	428b      	cmp	r3, r1
 800fb34:	d014      	beq.n	800fb60 <__ieee754_rem_pio2f+0x134>
 800fb36:	6022      	str	r2, [r4, #0]
 800fb38:	ed94 7a00 	vldr	s14, [r4]
 800fb3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fb40:	2e00      	cmp	r6, #0
 800fb42:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb46:	ed84 0a01 	vstr	s0, [r4, #4]
 800fb4a:	da9c      	bge.n	800fa86 <__ieee754_rem_pio2f+0x5a>
 800fb4c:	eeb1 7a47 	vneg.f32	s14, s14
 800fb50:	eeb1 0a40 	vneg.f32	s0, s0
 800fb54:	ed84 7a00 	vstr	s14, [r4]
 800fb58:	ed84 0a01 	vstr	s0, [r4, #4]
 800fb5c:	4240      	negs	r0, r0
 800fb5e:	e792      	b.n	800fa86 <__ieee754_rem_pio2f+0x5a>
 800fb60:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fb64:	15eb      	asrs	r3, r5, #23
 800fb66:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800fb6a:	2d08      	cmp	r5, #8
 800fb6c:	dde3      	ble.n	800fb36 <__ieee754_rem_pio2f+0x10a>
 800fb6e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800fc80 <__ieee754_rem_pio2f+0x254>
 800fb72:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fc84 <__ieee754_rem_pio2f+0x258>
 800fb76:	eef0 6a40 	vmov.f32	s13, s0
 800fb7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800fb7e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800fb82:	eea6 0a27 	vfma.f32	s0, s12, s15
 800fb86:	eef0 7a40 	vmov.f32	s15, s0
 800fb8a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fb8e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fb92:	ee15 2a90 	vmov	r2, s11
 800fb96:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fb9a:	1a5b      	subs	r3, r3, r1
 800fb9c:	2b19      	cmp	r3, #25
 800fb9e:	dc04      	bgt.n	800fbaa <__ieee754_rem_pio2f+0x17e>
 800fba0:	edc4 5a00 	vstr	s11, [r4]
 800fba4:	eeb0 0a66 	vmov.f32	s0, s13
 800fba8:	e7c6      	b.n	800fb38 <__ieee754_rem_pio2f+0x10c>
 800fbaa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800fc94 <__ieee754_rem_pio2f+0x268>
 800fbae:	eeb0 0a66 	vmov.f32	s0, s13
 800fbb2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fbb6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fbba:	eddf 6a37 	vldr	s13, [pc, #220]	; 800fc98 <__ieee754_rem_pio2f+0x26c>
 800fbbe:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fbc2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fbc6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fbca:	ed84 7a00 	vstr	s14, [r4]
 800fbce:	e7b3      	b.n	800fb38 <__ieee754_rem_pio2f+0x10c>
 800fbd0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fbd4:	db06      	blt.n	800fbe4 <__ieee754_rem_pio2f+0x1b8>
 800fbd6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fbda:	edc0 7a01 	vstr	s15, [r0, #4]
 800fbde:	edc0 7a00 	vstr	s15, [r0]
 800fbe2:	e733      	b.n	800fa4c <__ieee754_rem_pio2f+0x20>
 800fbe4:	15ea      	asrs	r2, r5, #23
 800fbe6:	3a86      	subs	r2, #134	; 0x86
 800fbe8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fbec:	ee07 3a90 	vmov	s15, r3
 800fbf0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fbf4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800fc9c <__ieee754_rem_pio2f+0x270>
 800fbf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fbfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc00:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fc04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fc0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc14:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fc18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc24:	edcd 7a05 	vstr	s15, [sp, #20]
 800fc28:	d11e      	bne.n	800fc68 <__ieee754_rem_pio2f+0x23c>
 800fc2a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc32:	bf14      	ite	ne
 800fc34:	2302      	movne	r3, #2
 800fc36:	2301      	moveq	r3, #1
 800fc38:	4919      	ldr	r1, [pc, #100]	; (800fca0 <__ieee754_rem_pio2f+0x274>)
 800fc3a:	9101      	str	r1, [sp, #4]
 800fc3c:	2102      	movs	r1, #2
 800fc3e:	9100      	str	r1, [sp, #0]
 800fc40:	a803      	add	r0, sp, #12
 800fc42:	4621      	mov	r1, r4
 800fc44:	f000 f892 	bl	800fd6c <__kernel_rem_pio2f>
 800fc48:	2e00      	cmp	r6, #0
 800fc4a:	f6bf af1c 	bge.w	800fa86 <__ieee754_rem_pio2f+0x5a>
 800fc4e:	edd4 7a00 	vldr	s15, [r4]
 800fc52:	eef1 7a67 	vneg.f32	s15, s15
 800fc56:	edc4 7a00 	vstr	s15, [r4]
 800fc5a:	edd4 7a01 	vldr	s15, [r4, #4]
 800fc5e:	eef1 7a67 	vneg.f32	s15, s15
 800fc62:	edc4 7a01 	vstr	s15, [r4, #4]
 800fc66:	e779      	b.n	800fb5c <__ieee754_rem_pio2f+0x130>
 800fc68:	2303      	movs	r3, #3
 800fc6a:	e7e5      	b.n	800fc38 <__ieee754_rem_pio2f+0x20c>
 800fc6c:	3f490fd8 	.word	0x3f490fd8
 800fc70:	4016cbe3 	.word	0x4016cbe3
 800fc74:	3fc90f80 	.word	0x3fc90f80
 800fc78:	3fc90fd0 	.word	0x3fc90fd0
 800fc7c:	37354443 	.word	0x37354443
 800fc80:	37354400 	.word	0x37354400
 800fc84:	2e85a308 	.word	0x2e85a308
 800fc88:	43490f80 	.word	0x43490f80
 800fc8c:	3f22f984 	.word	0x3f22f984
 800fc90:	08010da4 	.word	0x08010da4
 800fc94:	2e85a300 	.word	0x2e85a300
 800fc98:	248d3132 	.word	0x248d3132
 800fc9c:	43800000 	.word	0x43800000
 800fca0:	08010e24 	.word	0x08010e24

0800fca4 <__ieee754_sqrtf>:
 800fca4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fca8:	4770      	bx	lr
	...

0800fcac <__kernel_cosf>:
 800fcac:	ee10 3a10 	vmov	r3, s0
 800fcb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcb4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fcb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fcbc:	da05      	bge.n	800fcca <__kernel_cosf+0x1e>
 800fcbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fcc2:	ee17 2a90 	vmov	r2, s15
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	d03d      	beq.n	800fd46 <__kernel_cosf+0x9a>
 800fcca:	ee60 5a00 	vmul.f32	s11, s0, s0
 800fcce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fd4c <__kernel_cosf+0xa0>
 800fcd2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800fd50 <__kernel_cosf+0xa4>
 800fcd6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800fd54 <__kernel_cosf+0xa8>
 800fcda:	4a1f      	ldr	r2, [pc, #124]	; (800fd58 <__kernel_cosf+0xac>)
 800fcdc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fce0:	4293      	cmp	r3, r2
 800fce2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800fd5c <__kernel_cosf+0xb0>
 800fce6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fcea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800fd60 <__kernel_cosf+0xb4>
 800fcee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fcf2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800fd64 <__kernel_cosf+0xb8>
 800fcf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fcfa:	eeb0 7a66 	vmov.f32	s14, s13
 800fcfe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fd02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800fd06:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800fd0a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800fd0e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800fd12:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fd16:	dc04      	bgt.n	800fd22 <__kernel_cosf+0x76>
 800fd18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fd1c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800fd20:	4770      	bx	lr
 800fd22:	4a11      	ldr	r2, [pc, #68]	; (800fd68 <__kernel_cosf+0xbc>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	bfda      	itte	le
 800fd28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800fd2c:	ee06 3a90 	vmovle	s13, r3
 800fd30:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800fd34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fd38:	ee36 0a66 	vsub.f32	s0, s12, s13
 800fd3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd40:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fd44:	4770      	bx	lr
 800fd46:	eeb0 0a46 	vmov.f32	s0, s12
 800fd4a:	4770      	bx	lr
 800fd4c:	ad47d74e 	.word	0xad47d74e
 800fd50:	310f74f6 	.word	0x310f74f6
 800fd54:	3d2aaaab 	.word	0x3d2aaaab
 800fd58:	3e999999 	.word	0x3e999999
 800fd5c:	b493f27c 	.word	0xb493f27c
 800fd60:	37d00d01 	.word	0x37d00d01
 800fd64:	bab60b61 	.word	0xbab60b61
 800fd68:	3f480000 	.word	0x3f480000

0800fd6c <__kernel_rem_pio2f>:
 800fd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	ed2d 8b04 	vpush	{d8-d9}
 800fd74:	b0d9      	sub	sp, #356	; 0x164
 800fd76:	4688      	mov	r8, r1
 800fd78:	9002      	str	r0, [sp, #8]
 800fd7a:	49bb      	ldr	r1, [pc, #748]	; (8010068 <__kernel_rem_pio2f+0x2fc>)
 800fd7c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800fd84:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800fd88:	1e59      	subs	r1, r3, #1
 800fd8a:	1d13      	adds	r3, r2, #4
 800fd8c:	db27      	blt.n	800fdde <__kernel_rem_pio2f+0x72>
 800fd8e:	f1b2 0b03 	subs.w	fp, r2, #3
 800fd92:	bf48      	it	mi
 800fd94:	f102 0b04 	addmi.w	fp, r2, #4
 800fd98:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800fd9c:	1c45      	adds	r5, r0, #1
 800fd9e:	00ec      	lsls	r4, r5, #3
 800fda0:	1a47      	subs	r7, r0, r1
 800fda2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8010078 <__kernel_rem_pio2f+0x30c>
 800fda6:	9403      	str	r4, [sp, #12]
 800fda8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800fdac:	eb0a 0c01 	add.w	ip, sl, r1
 800fdb0:	ae1c      	add	r6, sp, #112	; 0x70
 800fdb2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800fdb6:	2400      	movs	r4, #0
 800fdb8:	4564      	cmp	r4, ip
 800fdba:	dd12      	ble.n	800fde2 <__kernel_rem_pio2f+0x76>
 800fdbc:	9b01      	ldr	r3, [sp, #4]
 800fdbe:	ac1c      	add	r4, sp, #112	; 0x70
 800fdc0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800fdc4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800fdc8:	f04f 0c00 	mov.w	ip, #0
 800fdcc:	45d4      	cmp	ip, sl
 800fdce:	dc27      	bgt.n	800fe20 <__kernel_rem_pio2f+0xb4>
 800fdd0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800fdd4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8010078 <__kernel_rem_pio2f+0x30c>
 800fdd8:	4627      	mov	r7, r4
 800fdda:	2600      	movs	r6, #0
 800fddc:	e016      	b.n	800fe0c <__kernel_rem_pio2f+0xa0>
 800fdde:	2000      	movs	r0, #0
 800fde0:	e7dc      	b.n	800fd9c <__kernel_rem_pio2f+0x30>
 800fde2:	42e7      	cmn	r7, r4
 800fde4:	bf5d      	ittte	pl
 800fde6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800fdea:	ee07 3a90 	vmovpl	s15, r3
 800fdee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fdf2:	eef0 7a47 	vmovmi.f32	s15, s14
 800fdf6:	ece6 7a01 	vstmia	r6!, {s15}
 800fdfa:	3401      	adds	r4, #1
 800fdfc:	e7dc      	b.n	800fdb8 <__kernel_rem_pio2f+0x4c>
 800fdfe:	ecf9 6a01 	vldmia	r9!, {s13}
 800fe02:	ed97 7a00 	vldr	s14, [r7]
 800fe06:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe0a:	3601      	adds	r6, #1
 800fe0c:	428e      	cmp	r6, r1
 800fe0e:	f1a7 0704 	sub.w	r7, r7, #4
 800fe12:	ddf4      	ble.n	800fdfe <__kernel_rem_pio2f+0x92>
 800fe14:	eceb 7a01 	vstmia	fp!, {s15}
 800fe18:	f10c 0c01 	add.w	ip, ip, #1
 800fe1c:	3404      	adds	r4, #4
 800fe1e:	e7d5      	b.n	800fdcc <__kernel_rem_pio2f+0x60>
 800fe20:	ab08      	add	r3, sp, #32
 800fe22:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800fe26:	eddf 8a93 	vldr	s17, [pc, #588]	; 8010074 <__kernel_rem_pio2f+0x308>
 800fe2a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8010070 <__kernel_rem_pio2f+0x304>
 800fe2e:	9304      	str	r3, [sp, #16]
 800fe30:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800fe34:	4656      	mov	r6, sl
 800fe36:	00b3      	lsls	r3, r6, #2
 800fe38:	9305      	str	r3, [sp, #20]
 800fe3a:	ab58      	add	r3, sp, #352	; 0x160
 800fe3c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fe40:	ac08      	add	r4, sp, #32
 800fe42:	ab44      	add	r3, sp, #272	; 0x110
 800fe44:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800fe48:	46a4      	mov	ip, r4
 800fe4a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fe4e:	4637      	mov	r7, r6
 800fe50:	2f00      	cmp	r7, #0
 800fe52:	f1a0 0004 	sub.w	r0, r0, #4
 800fe56:	dc4f      	bgt.n	800fef8 <__kernel_rem_pio2f+0x18c>
 800fe58:	4628      	mov	r0, r5
 800fe5a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800fe5e:	f000 fb95 	bl	801058c <scalbnf>
 800fe62:	eeb0 8a40 	vmov.f32	s16, s0
 800fe66:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fe6a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fe6e:	f000 fb45 	bl	80104fc <floorf>
 800fe72:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fe76:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fe7a:	2d00      	cmp	r5, #0
 800fe7c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fe80:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fe84:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800fe88:	ee17 9a90 	vmov	r9, s15
 800fe8c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fe90:	dd44      	ble.n	800ff1c <__kernel_rem_pio2f+0x1b0>
 800fe92:	f106 3cff 	add.w	ip, r6, #4294967295
 800fe96:	ab08      	add	r3, sp, #32
 800fe98:	f1c5 0e08 	rsb	lr, r5, #8
 800fe9c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fea0:	fa47 f00e 	asr.w	r0, r7, lr
 800fea4:	4481      	add	r9, r0
 800fea6:	fa00 f00e 	lsl.w	r0, r0, lr
 800feaa:	1a3f      	subs	r7, r7, r0
 800feac:	f1c5 0007 	rsb	r0, r5, #7
 800feb0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800feb4:	4107      	asrs	r7, r0
 800feb6:	2f00      	cmp	r7, #0
 800feb8:	dd3f      	ble.n	800ff3a <__kernel_rem_pio2f+0x1ce>
 800feba:	f04f 0e00 	mov.w	lr, #0
 800febe:	f109 0901 	add.w	r9, r9, #1
 800fec2:	4673      	mov	r3, lr
 800fec4:	4576      	cmp	r6, lr
 800fec6:	dc6b      	bgt.n	800ffa0 <__kernel_rem_pio2f+0x234>
 800fec8:	2d00      	cmp	r5, #0
 800feca:	dd04      	ble.n	800fed6 <__kernel_rem_pio2f+0x16a>
 800fecc:	2d01      	cmp	r5, #1
 800fece:	d078      	beq.n	800ffc2 <__kernel_rem_pio2f+0x256>
 800fed0:	2d02      	cmp	r5, #2
 800fed2:	f000 8081 	beq.w	800ffd8 <__kernel_rem_pio2f+0x26c>
 800fed6:	2f02      	cmp	r7, #2
 800fed8:	d12f      	bne.n	800ff3a <__kernel_rem_pio2f+0x1ce>
 800feda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fede:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fee2:	b353      	cbz	r3, 800ff3a <__kernel_rem_pio2f+0x1ce>
 800fee4:	4628      	mov	r0, r5
 800fee6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800feea:	f000 fb4f 	bl	801058c <scalbnf>
 800feee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800fef2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fef6:	e020      	b.n	800ff3a <__kernel_rem_pio2f+0x1ce>
 800fef8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fefc:	3f01      	subs	r7, #1
 800fefe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff06:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ff0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff0e:	ecac 0a01 	vstmia	ip!, {s0}
 800ff12:	ed90 0a00 	vldr	s0, [r0]
 800ff16:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ff1a:	e799      	b.n	800fe50 <__kernel_rem_pio2f+0xe4>
 800ff1c:	d105      	bne.n	800ff2a <__kernel_rem_pio2f+0x1be>
 800ff1e:	1e70      	subs	r0, r6, #1
 800ff20:	ab08      	add	r3, sp, #32
 800ff22:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ff26:	11ff      	asrs	r7, r7, #7
 800ff28:	e7c5      	b.n	800feb6 <__kernel_rem_pio2f+0x14a>
 800ff2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	da31      	bge.n	800ff9c <__kernel_rem_pio2f+0x230>
 800ff38:	2700      	movs	r7, #0
 800ff3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ff3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff42:	f040 809b 	bne.w	801007c <__kernel_rem_pio2f+0x310>
 800ff46:	1e74      	subs	r4, r6, #1
 800ff48:	46a4      	mov	ip, r4
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	45d4      	cmp	ip, sl
 800ff4e:	da4a      	bge.n	800ffe6 <__kernel_rem_pio2f+0x27a>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d07a      	beq.n	801004a <__kernel_rem_pio2f+0x2de>
 800ff54:	ab08      	add	r3, sp, #32
 800ff56:	3d08      	subs	r5, #8
 800ff58:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 8081 	beq.w	8010064 <__kernel_rem_pio2f+0x2f8>
 800ff62:	4628      	mov	r0, r5
 800ff64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ff68:	00a5      	lsls	r5, r4, #2
 800ff6a:	f000 fb0f 	bl	801058c <scalbnf>
 800ff6e:	aa44      	add	r2, sp, #272	; 0x110
 800ff70:	1d2b      	adds	r3, r5, #4
 800ff72:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010074 <__kernel_rem_pio2f+0x308>
 800ff76:	18d1      	adds	r1, r2, r3
 800ff78:	4622      	mov	r2, r4
 800ff7a:	2a00      	cmp	r2, #0
 800ff7c:	f280 80ae 	bge.w	80100dc <__kernel_rem_pio2f+0x370>
 800ff80:	4622      	mov	r2, r4
 800ff82:	2a00      	cmp	r2, #0
 800ff84:	f2c0 80cc 	blt.w	8010120 <__kernel_rem_pio2f+0x3b4>
 800ff88:	a944      	add	r1, sp, #272	; 0x110
 800ff8a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ff8e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801006c <__kernel_rem_pio2f+0x300>
 800ff92:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010078 <__kernel_rem_pio2f+0x30c>
 800ff96:	2000      	movs	r0, #0
 800ff98:	1aa1      	subs	r1, r4, r2
 800ff9a:	e0b6      	b.n	801010a <__kernel_rem_pio2f+0x39e>
 800ff9c:	2702      	movs	r7, #2
 800ff9e:	e78c      	b.n	800feba <__kernel_rem_pio2f+0x14e>
 800ffa0:	6820      	ldr	r0, [r4, #0]
 800ffa2:	b94b      	cbnz	r3, 800ffb8 <__kernel_rem_pio2f+0x24c>
 800ffa4:	b118      	cbz	r0, 800ffae <__kernel_rem_pio2f+0x242>
 800ffa6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ffaa:	6020      	str	r0, [r4, #0]
 800ffac:	2001      	movs	r0, #1
 800ffae:	f10e 0e01 	add.w	lr, lr, #1
 800ffb2:	3404      	adds	r4, #4
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	e785      	b.n	800fec4 <__kernel_rem_pio2f+0x158>
 800ffb8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ffbc:	6020      	str	r0, [r4, #0]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	e7f5      	b.n	800ffae <__kernel_rem_pio2f+0x242>
 800ffc2:	1e74      	subs	r4, r6, #1
 800ffc4:	a808      	add	r0, sp, #32
 800ffc6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ffca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ffce:	f10d 0c20 	add.w	ip, sp, #32
 800ffd2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800ffd6:	e77e      	b.n	800fed6 <__kernel_rem_pio2f+0x16a>
 800ffd8:	1e74      	subs	r4, r6, #1
 800ffda:	a808      	add	r0, sp, #32
 800ffdc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ffe0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ffe4:	e7f3      	b.n	800ffce <__kernel_rem_pio2f+0x262>
 800ffe6:	ab08      	add	r3, sp, #32
 800ffe8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ffec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fff0:	4318      	orrs	r0, r3
 800fff2:	e7ab      	b.n	800ff4c <__kernel_rem_pio2f+0x1e0>
 800fff4:	f10c 0c01 	add.w	ip, ip, #1
 800fff8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800fffc:	2c00      	cmp	r4, #0
 800fffe:	d0f9      	beq.n	800fff4 <__kernel_rem_pio2f+0x288>
 8010000:	9b05      	ldr	r3, [sp, #20]
 8010002:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010006:	eb0d 0003 	add.w	r0, sp, r3
 801000a:	9b01      	ldr	r3, [sp, #4]
 801000c:	18f4      	adds	r4, r6, r3
 801000e:	ab1c      	add	r3, sp, #112	; 0x70
 8010010:	1c77      	adds	r7, r6, #1
 8010012:	384c      	subs	r0, #76	; 0x4c
 8010014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010018:	4466      	add	r6, ip
 801001a:	42be      	cmp	r6, r7
 801001c:	f6ff af0b 	blt.w	800fe36 <__kernel_rem_pio2f+0xca>
 8010020:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8010024:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010028:	ee07 3a90 	vmov	s15, r3
 801002c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010030:	f04f 0c00 	mov.w	ip, #0
 8010034:	ece4 7a01 	vstmia	r4!, {s15}
 8010038:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010078 <__kernel_rem_pio2f+0x30c>
 801003c:	46a1      	mov	r9, r4
 801003e:	458c      	cmp	ip, r1
 8010040:	dd07      	ble.n	8010052 <__kernel_rem_pio2f+0x2e6>
 8010042:	ece0 7a01 	vstmia	r0!, {s15}
 8010046:	3701      	adds	r7, #1
 8010048:	e7e7      	b.n	801001a <__kernel_rem_pio2f+0x2ae>
 801004a:	9804      	ldr	r0, [sp, #16]
 801004c:	f04f 0c01 	mov.w	ip, #1
 8010050:	e7d2      	b.n	800fff8 <__kernel_rem_pio2f+0x28c>
 8010052:	ecfe 6a01 	vldmia	lr!, {s13}
 8010056:	ed39 7a01 	vldmdb	r9!, {s14}
 801005a:	f10c 0c01 	add.w	ip, ip, #1
 801005e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010062:	e7ec      	b.n	801003e <__kernel_rem_pio2f+0x2d2>
 8010064:	3c01      	subs	r4, #1
 8010066:	e775      	b.n	800ff54 <__kernel_rem_pio2f+0x1e8>
 8010068:	08011168 	.word	0x08011168
 801006c:	0801113c 	.word	0x0801113c
 8010070:	43800000 	.word	0x43800000
 8010074:	3b800000 	.word	0x3b800000
 8010078:	00000000 	.word	0x00000000
 801007c:	9b03      	ldr	r3, [sp, #12]
 801007e:	eeb0 0a48 	vmov.f32	s0, s16
 8010082:	1a98      	subs	r0, r3, r2
 8010084:	f000 fa82 	bl	801058c <scalbnf>
 8010088:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8010070 <__kernel_rem_pio2f+0x304>
 801008c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010094:	db19      	blt.n	80100ca <__kernel_rem_pio2f+0x35e>
 8010096:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8010074 <__kernel_rem_pio2f+0x308>
 801009a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801009e:	aa08      	add	r2, sp, #32
 80100a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100a4:	1c74      	adds	r4, r6, #1
 80100a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100aa:	3508      	adds	r5, #8
 80100ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80100b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80100b8:	ee10 3a10 	vmov	r3, s0
 80100bc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80100c0:	ee17 3a90 	vmov	r3, s15
 80100c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80100c8:	e74b      	b.n	800ff62 <__kernel_rem_pio2f+0x1f6>
 80100ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80100ce:	aa08      	add	r2, sp, #32
 80100d0:	ee10 3a10 	vmov	r3, s0
 80100d4:	4634      	mov	r4, r6
 80100d6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80100da:	e742      	b.n	800ff62 <__kernel_rem_pio2f+0x1f6>
 80100dc:	a808      	add	r0, sp, #32
 80100de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80100e2:	9001      	str	r0, [sp, #4]
 80100e4:	ee07 0a90 	vmov	s15, r0
 80100e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100ec:	3a01      	subs	r2, #1
 80100ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80100f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80100f6:	ed61 7a01 	vstmdb	r1!, {s15}
 80100fa:	e73e      	b.n	800ff7a <__kernel_rem_pio2f+0x20e>
 80100fc:	ecfc 6a01 	vldmia	ip!, {s13}
 8010100:	ecb6 7a01 	vldmia	r6!, {s14}
 8010104:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010108:	3001      	adds	r0, #1
 801010a:	4550      	cmp	r0, sl
 801010c:	dc01      	bgt.n	8010112 <__kernel_rem_pio2f+0x3a6>
 801010e:	4288      	cmp	r0, r1
 8010110:	ddf4      	ble.n	80100fc <__kernel_rem_pio2f+0x390>
 8010112:	a858      	add	r0, sp, #352	; 0x160
 8010114:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010118:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801011c:	3a01      	subs	r2, #1
 801011e:	e730      	b.n	800ff82 <__kernel_rem_pio2f+0x216>
 8010120:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8010122:	2a02      	cmp	r2, #2
 8010124:	dc09      	bgt.n	801013a <__kernel_rem_pio2f+0x3ce>
 8010126:	2a00      	cmp	r2, #0
 8010128:	dc2a      	bgt.n	8010180 <__kernel_rem_pio2f+0x414>
 801012a:	d043      	beq.n	80101b4 <__kernel_rem_pio2f+0x448>
 801012c:	f009 0007 	and.w	r0, r9, #7
 8010130:	b059      	add	sp, #356	; 0x164
 8010132:	ecbd 8b04 	vpop	{d8-d9}
 8010136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801013c:	2b03      	cmp	r3, #3
 801013e:	d1f5      	bne.n	801012c <__kernel_rem_pio2f+0x3c0>
 8010140:	ab30      	add	r3, sp, #192	; 0xc0
 8010142:	442b      	add	r3, r5
 8010144:	461a      	mov	r2, r3
 8010146:	4619      	mov	r1, r3
 8010148:	4620      	mov	r0, r4
 801014a:	2800      	cmp	r0, #0
 801014c:	f1a1 0104 	sub.w	r1, r1, #4
 8010150:	dc51      	bgt.n	80101f6 <__kernel_rem_pio2f+0x48a>
 8010152:	4621      	mov	r1, r4
 8010154:	2901      	cmp	r1, #1
 8010156:	f1a2 0204 	sub.w	r2, r2, #4
 801015a:	dc5c      	bgt.n	8010216 <__kernel_rem_pio2f+0x4aa>
 801015c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8010078 <__kernel_rem_pio2f+0x30c>
 8010160:	3304      	adds	r3, #4
 8010162:	2c01      	cmp	r4, #1
 8010164:	dc67      	bgt.n	8010236 <__kernel_rem_pio2f+0x4ca>
 8010166:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801016a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801016e:	2f00      	cmp	r7, #0
 8010170:	d167      	bne.n	8010242 <__kernel_rem_pio2f+0x4d6>
 8010172:	edc8 6a00 	vstr	s13, [r8]
 8010176:	ed88 7a01 	vstr	s14, [r8, #4]
 801017a:	edc8 7a02 	vstr	s15, [r8, #8]
 801017e:	e7d5      	b.n	801012c <__kernel_rem_pio2f+0x3c0>
 8010180:	aa30      	add	r2, sp, #192	; 0xc0
 8010182:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8010078 <__kernel_rem_pio2f+0x30c>
 8010186:	4413      	add	r3, r2
 8010188:	4622      	mov	r2, r4
 801018a:	2a00      	cmp	r2, #0
 801018c:	da24      	bge.n	80101d8 <__kernel_rem_pio2f+0x46c>
 801018e:	b34f      	cbz	r7, 80101e4 <__kernel_rem_pio2f+0x478>
 8010190:	eef1 7a47 	vneg.f32	s15, s14
 8010194:	edc8 7a00 	vstr	s15, [r8]
 8010198:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801019c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101a0:	aa31      	add	r2, sp, #196	; 0xc4
 80101a2:	2301      	movs	r3, #1
 80101a4:	429c      	cmp	r4, r3
 80101a6:	da20      	bge.n	80101ea <__kernel_rem_pio2f+0x47e>
 80101a8:	b10f      	cbz	r7, 80101ae <__kernel_rem_pio2f+0x442>
 80101aa:	eef1 7a67 	vneg.f32	s15, s15
 80101ae:	edc8 7a01 	vstr	s15, [r8, #4]
 80101b2:	e7bb      	b.n	801012c <__kernel_rem_pio2f+0x3c0>
 80101b4:	aa30      	add	r2, sp, #192	; 0xc0
 80101b6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8010078 <__kernel_rem_pio2f+0x30c>
 80101ba:	4413      	add	r3, r2
 80101bc:	2c00      	cmp	r4, #0
 80101be:	da05      	bge.n	80101cc <__kernel_rem_pio2f+0x460>
 80101c0:	b10f      	cbz	r7, 80101c6 <__kernel_rem_pio2f+0x45a>
 80101c2:	eef1 7a67 	vneg.f32	s15, s15
 80101c6:	edc8 7a00 	vstr	s15, [r8]
 80101ca:	e7af      	b.n	801012c <__kernel_rem_pio2f+0x3c0>
 80101cc:	ed33 7a01 	vldmdb	r3!, {s14}
 80101d0:	3c01      	subs	r4, #1
 80101d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101d6:	e7f1      	b.n	80101bc <__kernel_rem_pio2f+0x450>
 80101d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80101dc:	3a01      	subs	r2, #1
 80101de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101e2:	e7d2      	b.n	801018a <__kernel_rem_pio2f+0x41e>
 80101e4:	eef0 7a47 	vmov.f32	s15, s14
 80101e8:	e7d4      	b.n	8010194 <__kernel_rem_pio2f+0x428>
 80101ea:	ecb2 7a01 	vldmia	r2!, {s14}
 80101ee:	3301      	adds	r3, #1
 80101f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101f4:	e7d6      	b.n	80101a4 <__kernel_rem_pio2f+0x438>
 80101f6:	edd1 7a00 	vldr	s15, [r1]
 80101fa:	edd1 6a01 	vldr	s13, [r1, #4]
 80101fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010202:	3801      	subs	r0, #1
 8010204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010208:	ed81 7a00 	vstr	s14, [r1]
 801020c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010210:	edc1 7a01 	vstr	s15, [r1, #4]
 8010214:	e799      	b.n	801014a <__kernel_rem_pio2f+0x3de>
 8010216:	edd2 7a00 	vldr	s15, [r2]
 801021a:	edd2 6a01 	vldr	s13, [r2, #4]
 801021e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010222:	3901      	subs	r1, #1
 8010224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010228:	ed82 7a00 	vstr	s14, [r2]
 801022c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010230:	edc2 7a01 	vstr	s15, [r2, #4]
 8010234:	e78e      	b.n	8010154 <__kernel_rem_pio2f+0x3e8>
 8010236:	ed33 7a01 	vldmdb	r3!, {s14}
 801023a:	3c01      	subs	r4, #1
 801023c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010240:	e78f      	b.n	8010162 <__kernel_rem_pio2f+0x3f6>
 8010242:	eef1 6a66 	vneg.f32	s13, s13
 8010246:	eeb1 7a47 	vneg.f32	s14, s14
 801024a:	edc8 6a00 	vstr	s13, [r8]
 801024e:	ed88 7a01 	vstr	s14, [r8, #4]
 8010252:	eef1 7a67 	vneg.f32	s15, s15
 8010256:	e790      	b.n	801017a <__kernel_rem_pio2f+0x40e>

08010258 <__kernel_sinf>:
 8010258:	ee10 3a10 	vmov	r3, s0
 801025c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010260:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010264:	da04      	bge.n	8010270 <__kernel_sinf+0x18>
 8010266:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801026a:	ee17 3a90 	vmov	r3, s15
 801026e:	b35b      	cbz	r3, 80102c8 <__kernel_sinf+0x70>
 8010270:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010274:	eddf 7a15 	vldr	s15, [pc, #84]	; 80102cc <__kernel_sinf+0x74>
 8010278:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80102d0 <__kernel_sinf+0x78>
 801027c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010280:	eddf 7a14 	vldr	s15, [pc, #80]	; 80102d4 <__kernel_sinf+0x7c>
 8010284:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010288:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80102d8 <__kernel_sinf+0x80>
 801028c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010290:	eddf 7a12 	vldr	s15, [pc, #72]	; 80102dc <__kernel_sinf+0x84>
 8010294:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010298:	eee6 7a07 	vfma.f32	s15, s12, s14
 801029c:	b930      	cbnz	r0, 80102ac <__kernel_sinf+0x54>
 801029e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80102e0 <__kernel_sinf+0x88>
 80102a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80102a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80102aa:	4770      	bx	lr
 80102ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80102b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80102b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80102b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80102bc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80102e4 <__kernel_sinf+0x8c>
 80102c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80102c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop
 80102cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80102d0:	b2d72f34 	.word	0xb2d72f34
 80102d4:	3638ef1b 	.word	0x3638ef1b
 80102d8:	b9500d01 	.word	0xb9500d01
 80102dc:	3c088889 	.word	0x3c088889
 80102e0:	be2aaaab 	.word	0xbe2aaaab
 80102e4:	3e2aaaab 	.word	0x3e2aaaab

080102e8 <with_errnof>:
 80102e8:	b513      	push	{r0, r1, r4, lr}
 80102ea:	4604      	mov	r4, r0
 80102ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 80102f0:	f7fb ff24 	bl	800c13c <__errno>
 80102f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80102f8:	6004      	str	r4, [r0, #0]
 80102fa:	b002      	add	sp, #8
 80102fc:	bd10      	pop	{r4, pc}

080102fe <xflowf>:
 80102fe:	b130      	cbz	r0, 801030e <xflowf+0x10>
 8010300:	eef1 7a40 	vneg.f32	s15, s0
 8010304:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010308:	2022      	movs	r0, #34	; 0x22
 801030a:	f7ff bfed 	b.w	80102e8 <with_errnof>
 801030e:	eef0 7a40 	vmov.f32	s15, s0
 8010312:	e7f7      	b.n	8010304 <xflowf+0x6>

08010314 <__math_uflowf>:
 8010314:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801031c <__math_uflowf+0x8>
 8010318:	f7ff bff1 	b.w	80102fe <xflowf>
 801031c:	10000000 	.word	0x10000000

08010320 <__math_oflowf>:
 8010320:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010328 <__math_oflowf+0x8>
 8010324:	f7ff bfeb 	b.w	80102fe <xflowf>
 8010328:	70000000 	.word	0x70000000

0801032c <atanf>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	ee10 5a10 	vmov	r5, s0
 8010332:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010336:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801033a:	eef0 7a40 	vmov.f32	s15, s0
 801033e:	db10      	blt.n	8010362 <atanf+0x36>
 8010340:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010344:	dd04      	ble.n	8010350 <atanf+0x24>
 8010346:	ee70 7a00 	vadd.f32	s15, s0, s0
 801034a:	eeb0 0a67 	vmov.f32	s0, s15
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010488 <atanf+0x15c>
 8010354:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801048c <atanf+0x160>
 8010358:	2d00      	cmp	r5, #0
 801035a:	bfd8      	it	le
 801035c:	eef0 7a40 	vmovle.f32	s15, s0
 8010360:	e7f3      	b.n	801034a <atanf+0x1e>
 8010362:	4b4b      	ldr	r3, [pc, #300]	; (8010490 <atanf+0x164>)
 8010364:	429c      	cmp	r4, r3
 8010366:	dc10      	bgt.n	801038a <atanf+0x5e>
 8010368:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801036c:	da0a      	bge.n	8010384 <atanf+0x58>
 801036e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010494 <atanf+0x168>
 8010372:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801037a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801037e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010382:	dce2      	bgt.n	801034a <atanf+0x1e>
 8010384:	f04f 33ff 	mov.w	r3, #4294967295
 8010388:	e013      	b.n	80103b2 <atanf+0x86>
 801038a:	f000 f8a3 	bl	80104d4 <fabsf>
 801038e:	4b42      	ldr	r3, [pc, #264]	; (8010498 <atanf+0x16c>)
 8010390:	429c      	cmp	r4, r3
 8010392:	dc4f      	bgt.n	8010434 <atanf+0x108>
 8010394:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010398:	429c      	cmp	r4, r3
 801039a:	dc41      	bgt.n	8010420 <atanf+0xf4>
 801039c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80103a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80103a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80103a8:	2300      	movs	r3, #0
 80103aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80103ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80103b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801049c <atanf+0x170>
 80103bc:	eddf 5a38 	vldr	s11, [pc, #224]	; 80104a0 <atanf+0x174>
 80103c0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80104a4 <atanf+0x178>
 80103c4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80103c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80103cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80104a8 <atanf+0x17c>
 80103d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80103d4:	eddf 5a35 	vldr	s11, [pc, #212]	; 80104ac <atanf+0x180>
 80103d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80103dc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80104b0 <atanf+0x184>
 80103e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80103e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80104b4 <atanf+0x188>
 80103e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80103ec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80104b8 <atanf+0x18c>
 80103f0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80103f4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80104bc <atanf+0x190>
 80103f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80103fc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80104c0 <atanf+0x194>
 8010400:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010404:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80104c4 <atanf+0x198>
 8010408:	eea5 7a26 	vfma.f32	s14, s10, s13
 801040c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010410:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010414:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010418:	d121      	bne.n	801045e <atanf+0x132>
 801041a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801041e:	e794      	b.n	801034a <atanf+0x1e>
 8010420:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010424:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010428:	ee30 0a27 	vadd.f32	s0, s0, s15
 801042c:	2301      	movs	r3, #1
 801042e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010432:	e7be      	b.n	80103b2 <atanf+0x86>
 8010434:	4b24      	ldr	r3, [pc, #144]	; (80104c8 <atanf+0x19c>)
 8010436:	429c      	cmp	r4, r3
 8010438:	dc0b      	bgt.n	8010452 <atanf+0x126>
 801043a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801043e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010442:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010446:	2302      	movs	r3, #2
 8010448:	ee70 6a67 	vsub.f32	s13, s0, s15
 801044c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010450:	e7af      	b.n	80103b2 <atanf+0x86>
 8010452:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010456:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801045a:	2303      	movs	r3, #3
 801045c:	e7a9      	b.n	80103b2 <atanf+0x86>
 801045e:	4a1b      	ldr	r2, [pc, #108]	; (80104cc <atanf+0x1a0>)
 8010460:	491b      	ldr	r1, [pc, #108]	; (80104d0 <atanf+0x1a4>)
 8010462:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010466:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801046a:	ed93 0a00 	vldr	s0, [r3]
 801046e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8010472:	ed92 0a00 	vldr	s0, [r2]
 8010476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801047a:	2d00      	cmp	r5, #0
 801047c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010480:	bfb8      	it	lt
 8010482:	eef1 7a67 	vneglt.f32	s15, s15
 8010486:	e760      	b.n	801034a <atanf+0x1e>
 8010488:	3fc90fdb 	.word	0x3fc90fdb
 801048c:	bfc90fdb 	.word	0xbfc90fdb
 8010490:	3edfffff 	.word	0x3edfffff
 8010494:	7149f2ca 	.word	0x7149f2ca
 8010498:	3f97ffff 	.word	0x3f97ffff
 801049c:	3c8569d7 	.word	0x3c8569d7
 80104a0:	3d4bda59 	.word	0x3d4bda59
 80104a4:	bd6ef16b 	.word	0xbd6ef16b
 80104a8:	3d886b35 	.word	0x3d886b35
 80104ac:	3dba2e6e 	.word	0x3dba2e6e
 80104b0:	3e124925 	.word	0x3e124925
 80104b4:	3eaaaaab 	.word	0x3eaaaaab
 80104b8:	bd15a221 	.word	0xbd15a221
 80104bc:	bd9d8795 	.word	0xbd9d8795
 80104c0:	bde38e38 	.word	0xbde38e38
 80104c4:	be4ccccd 	.word	0xbe4ccccd
 80104c8:	401bffff 	.word	0x401bffff
 80104cc:	08011174 	.word	0x08011174
 80104d0:	08011184 	.word	0x08011184

080104d4 <fabsf>:
 80104d4:	ee10 3a10 	vmov	r3, s0
 80104d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80104dc:	ee00 3a10 	vmov	s0, r3
 80104e0:	4770      	bx	lr

080104e2 <finitef>:
 80104e2:	b082      	sub	sp, #8
 80104e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80104e8:	9801      	ldr	r0, [sp, #4]
 80104ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80104ee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80104f2:	bfac      	ite	ge
 80104f4:	2000      	movge	r0, #0
 80104f6:	2001      	movlt	r0, #1
 80104f8:	b002      	add	sp, #8
 80104fa:	4770      	bx	lr

080104fc <floorf>:
 80104fc:	ee10 3a10 	vmov	r3, s0
 8010500:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010504:	3a7f      	subs	r2, #127	; 0x7f
 8010506:	2a16      	cmp	r2, #22
 8010508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801050c:	dc2a      	bgt.n	8010564 <floorf+0x68>
 801050e:	2a00      	cmp	r2, #0
 8010510:	da11      	bge.n	8010536 <floorf+0x3a>
 8010512:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010574 <floorf+0x78>
 8010516:	ee30 0a27 	vadd.f32	s0, s0, s15
 801051a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801051e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010522:	dd05      	ble.n	8010530 <floorf+0x34>
 8010524:	2b00      	cmp	r3, #0
 8010526:	da23      	bge.n	8010570 <floorf+0x74>
 8010528:	4a13      	ldr	r2, [pc, #76]	; (8010578 <floorf+0x7c>)
 801052a:	2900      	cmp	r1, #0
 801052c:	bf18      	it	ne
 801052e:	4613      	movne	r3, r2
 8010530:	ee00 3a10 	vmov	s0, r3
 8010534:	4770      	bx	lr
 8010536:	4911      	ldr	r1, [pc, #68]	; (801057c <floorf+0x80>)
 8010538:	4111      	asrs	r1, r2
 801053a:	420b      	tst	r3, r1
 801053c:	d0fa      	beq.n	8010534 <floorf+0x38>
 801053e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010574 <floorf+0x78>
 8010542:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010546:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801054a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054e:	ddef      	ble.n	8010530 <floorf+0x34>
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfbe      	ittt	lt
 8010554:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010558:	fa40 f202 	asrlt.w	r2, r0, r2
 801055c:	189b      	addlt	r3, r3, r2
 801055e:	ea23 0301 	bic.w	r3, r3, r1
 8010562:	e7e5      	b.n	8010530 <floorf+0x34>
 8010564:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010568:	d3e4      	bcc.n	8010534 <floorf+0x38>
 801056a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801056e:	4770      	bx	lr
 8010570:	2300      	movs	r3, #0
 8010572:	e7dd      	b.n	8010530 <floorf+0x34>
 8010574:	7149f2ca 	.word	0x7149f2ca
 8010578:	bf800000 	.word	0xbf800000
 801057c:	007fffff 	.word	0x007fffff

08010580 <nanf>:
 8010580:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010588 <nanf+0x8>
 8010584:	4770      	bx	lr
 8010586:	bf00      	nop
 8010588:	7fc00000 	.word	0x7fc00000

0801058c <scalbnf>:
 801058c:	ee10 3a10 	vmov	r3, s0
 8010590:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010594:	d025      	beq.n	80105e2 <scalbnf+0x56>
 8010596:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801059a:	d302      	bcc.n	80105a2 <scalbnf+0x16>
 801059c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80105a0:	4770      	bx	lr
 80105a2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80105a6:	d122      	bne.n	80105ee <scalbnf+0x62>
 80105a8:	4b2a      	ldr	r3, [pc, #168]	; (8010654 <scalbnf+0xc8>)
 80105aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010658 <scalbnf+0xcc>
 80105ae:	4298      	cmp	r0, r3
 80105b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105b4:	db16      	blt.n	80105e4 <scalbnf+0x58>
 80105b6:	ee10 3a10 	vmov	r3, s0
 80105ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80105be:	3a19      	subs	r2, #25
 80105c0:	4402      	add	r2, r0
 80105c2:	2afe      	cmp	r2, #254	; 0xfe
 80105c4:	dd15      	ble.n	80105f2 <scalbnf+0x66>
 80105c6:	ee10 3a10 	vmov	r3, s0
 80105ca:	eddf 7a24 	vldr	s15, [pc, #144]	; 801065c <scalbnf+0xd0>
 80105ce:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010660 <scalbnf+0xd4>
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	eeb0 7a67 	vmov.f32	s14, s15
 80105d8:	bfb8      	it	lt
 80105da:	eef0 7a66 	vmovlt.f32	s15, s13
 80105de:	ee27 0a27 	vmul.f32	s0, s14, s15
 80105e2:	4770      	bx	lr
 80105e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010664 <scalbnf+0xd8>
 80105e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105ec:	4770      	bx	lr
 80105ee:	0dd2      	lsrs	r2, r2, #23
 80105f0:	e7e6      	b.n	80105c0 <scalbnf+0x34>
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	dd06      	ble.n	8010604 <scalbnf+0x78>
 80105f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80105fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80105fe:	ee00 3a10 	vmov	s0, r3
 8010602:	4770      	bx	lr
 8010604:	f112 0f16 	cmn.w	r2, #22
 8010608:	da1a      	bge.n	8010640 <scalbnf+0xb4>
 801060a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801060e:	4298      	cmp	r0, r3
 8010610:	ee10 3a10 	vmov	r3, s0
 8010614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010618:	dd0a      	ble.n	8010630 <scalbnf+0xa4>
 801061a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801065c <scalbnf+0xd0>
 801061e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010660 <scalbnf+0xd4>
 8010622:	eef0 7a40 	vmov.f32	s15, s0
 8010626:	2b00      	cmp	r3, #0
 8010628:	bf18      	it	ne
 801062a:	eeb0 0a47 	vmovne.f32	s0, s14
 801062e:	e7db      	b.n	80105e8 <scalbnf+0x5c>
 8010630:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010664 <scalbnf+0xd8>
 8010634:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010668 <scalbnf+0xdc>
 8010638:	eef0 7a40 	vmov.f32	s15, s0
 801063c:	2b00      	cmp	r3, #0
 801063e:	e7f3      	b.n	8010628 <scalbnf+0x9c>
 8010640:	3219      	adds	r2, #25
 8010642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010646:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801064a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801066c <scalbnf+0xe0>
 801064e:	ee07 3a10 	vmov	s14, r3
 8010652:	e7c4      	b.n	80105de <scalbnf+0x52>
 8010654:	ffff3cb0 	.word	0xffff3cb0
 8010658:	4c000000 	.word	0x4c000000
 801065c:	7149f2ca 	.word	0x7149f2ca
 8010660:	f149f2ca 	.word	0xf149f2ca
 8010664:	0da24260 	.word	0x0da24260
 8010668:	8da24260 	.word	0x8da24260
 801066c:	33000000 	.word	0x33000000

08010670 <_init>:
 8010670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010672:	bf00      	nop
 8010674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010676:	bc08      	pop	{r3}
 8010678:	469e      	mov	lr, r3
 801067a:	4770      	bx	lr

0801067c <_fini>:
 801067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067e:	bf00      	nop
 8010680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010682:	bc08      	pop	{r3}
 8010684:	469e      	mov	lr, r3
 8010686:	4770      	bx	lr
